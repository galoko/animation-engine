
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; r.crossOrigin='anonymous'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
'use strict';

let lastTickTime = undefined;
class GameLoop {
    static process;
    static init(process) {
        GameLoop.process = process;
    }
    static start() {
        requestAnimationFrame(GameLoop.tick);
    }
    static pause() {
        //
    }
    static stop() {
        //
    }
    static tick(time) {
        if (lastTickTime === undefined) {
            lastTickTime = time;
        }
        const dt = (time - lastTickTime) / 1000;
        lastTickTime = time;
        GameLoop.process(dt);
        requestAnimationFrame(GameLoop.tick);
    }
    static finalize() {
        //
    }
}

var Module = (() => {
  var _scriptDir = (typeof document === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : (document.currentScript && document.currentScript.src || new URL('index.js', document.baseURI).href));
  
  return (
function(Module) {
  Module = Module || {};

var Module=typeof Module!="undefined"?Module:{};var readyPromiseResolve,readyPromiseReject;Module["ready"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject;});var moduleOverrides=Object.assign({},Module);var arguments_=[];var thisProgram="./this.program";var quit_=(status,toThrow)=>{throw toThrow};var ENVIRONMENT_IS_WEB=typeof window=="object";var ENVIRONMENT_IS_WORKER=typeof importScripts=="function";var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;function logExceptionOnExit(e){if(e instanceof ExitStatus)return;let toLog=e;err("exiting due to exception: "+toLog);}if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require("path").dirname(scriptDirectory)+"/";}else {scriptDirectory=__dirname+"/";}var fs,nodePath;if(typeof require==="function"){fs=require("fs");nodePath=require("path");}read_=(filename,binary)=>{filename=nodePath["normalize"](filename);return fs.readFileSync(filename,binary?undefined:"utf8")};readBinary=filename=>{var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret);}return ret};readAsync=(filename,onload,onerror)=>{filename=nodePath["normalize"](filename);fs.readFile(filename,function(err,data){if(err)onerror(err);else onload(data.buffer);});};if(process["argv"].length>1){thisProgram=process["argv"][1].replace(/\\/g,"/");}arguments_=process["argv"].slice(2);process["on"]("uncaughtException",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process["on"]("unhandledRejection",function(reason){throw reason});quit_=(status,toThrow)=>{if(keepRuntimeAlive()){process["exitCode"]=status;throw toThrow}logExceptionOnExit(toThrow);process["exit"](status);};Module["inspect"]=function(){return "[Emscripten Module object]"};}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href;}else if(typeof document!="undefined"&&document.currentScript){scriptDirectory=document.currentScript.src;}if(_scriptDir){scriptDirectory=_scriptDir;}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,"").lastIndexOf("/")+1);}else {scriptDirectory="";}{read_=url=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=url=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)};}readAsync=(url,onload,onerror)=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=()=>{if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror();};xhr.onerror=onerror;xhr.send(null);};}setWindowTitle=title=>document.title=title;}else {}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime=Module["noExitRuntime"]||true;if(typeof WebAssembly!="object"){abort("no native wasm support detected");}var wasmMemory;var ABORT=false;var EXITSTATUS;var UTF8Decoder=typeof TextDecoder!="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(heapOrArray,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heapOrArray[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heapOrArray.buffer&&UTF8Decoder){return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr))}var str="";while(idx<endPtr){var u0=heapOrArray[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heapOrArray[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heapOrArray[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2;}else {u0=(u0&7)<<18|u1<<12|u2<<6|heapOrArray[idx++]&63;}if(u0<65536){str+=String.fromCharCode(u0);}else {var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023);}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf);}var INITIAL_MEMORY=Module["INITIAL_MEMORY"]||1073741824;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function keepRuntimeAlive(){return noExitRuntime}function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift());}}callRuntimeCallbacks(__ATPRERUN__);}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__);}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift());}}callRuntimeCallbacks(__ATPOSTRUN__);}function addOnPreRun(cb){__ATPRERUN__.unshift(cb);}function addOnInit(cb){__ATINIT__.unshift(cb);}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb);}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null;}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback();}}}function abort(what){{if(Module["onAbort"]){Module["onAbort"](what);}}what="Aborted("+what+")";err(what);ABORT=true;EXITSTATUS=1;what+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith("file://")}var wasmBinaryFile;if(Module["locateFile"]){wasmBinaryFile="engine.wasm";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile);}}else {wasmBinaryFile=new URL("engine.wasm",(typeof document === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : (document.currentScript && document.currentScript.src || new URL('index.js', document.baseURI).href))).toString();}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}throw "both async and sync fetching of the wasm failed"}catch(err){abort(err);}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch=="function"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw "failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else {if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response));},reject);})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;wasmMemory=Module["asm"]["j"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module["asm"]["l"];addOnInit(Module["asm"]["k"]);removeRunDependency("wasm-instantiate");}addRunDependency("wasm-instantiate");function receiveInstantiationResult(result){receiveInstance(result["instance"]);}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(function(instance){return instance}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason);})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming=="function"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&!ENVIRONMENT_IS_NODE&&typeof fetch=="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");return instantiateArrayBuffer(receiveInstantiationResult)})})}else {return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);readyPromiseReject(e);}}instantiateAsync().catch(readyPromiseReject);return {}}function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status;}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){callbacks.shift()(Module);}}function ___assert_fail(condition,filename,line,func){abort("Assertion failed: "+UTF8ToString(condition)+", at: "+[filename?UTF8ToString(filename):"unknown filename",line,func?UTF8ToString(func):"unknown function"]);}function ___cxa_allocate_exception(size){return _malloc(size+24)+24}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-24;this.set_type=function(type){HEAPU32[this.ptr+4>>2]=type;};this.get_type=function(){return HEAPU32[this.ptr+4>>2]};this.set_destructor=function(destructor){HEAPU32[this.ptr+8>>2]=destructor;};this.get_destructor=function(){return HEAPU32[this.ptr+8>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr>>2]=refcount;};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+12>>0]=caught;};this.get_caught=function(){return HEAP8[this.ptr+12>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+13>>0]=rethrown;};this.get_rethrown=function(){return HEAP8[this.ptr+13>>0]!=0};this.init=function(type,destructor){this.set_adjusted_ptr(0);this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false);};this.add_ref=function(){var value=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=value+1;};this.release_ref=function(){var prev=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=prev-1;return prev===1};this.set_adjusted_ptr=function(adjustedPtr){HEAPU32[this.ptr+16>>2]=adjustedPtr;};this.get_adjusted_ptr=function(){return HEAPU32[this.ptr+16>>2]};this.get_exception_ptr=function(){var isPointer=___cxa_is_pointer_type(this.get_type());if(isPointer){return HEAPU32[this.excPtr>>2]}var adjusted=this.get_adjusted_ptr();if(adjusted!==0)return adjusted;return this.excPtr};}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}var nowIsMonotonic=true;function __emscripten_get_now_is_monotonic(){return nowIsMonotonic}function _abort(){abort("");}var _emscripten_get_now;if(ENVIRONMENT_IS_NODE){_emscripten_get_now=()=>{var t=process["hrtime"]();return t[0]*1e3+t[1]/1e6};}else _emscripten_get_now=()=>performance.now();function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num);}function abortOnCannotGrowMemory(requestedSize){abort("OOM");}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;abortOnCannotGrowMemory(requestedSize);}var printCharBuffers=[null,[],[]];function printChar(stream,curr){var buffer=printCharBuffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0;}else {buffer.push(curr);}}var SYSCALLS={varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret}};function _fd_write(fd,iov,iovcnt,pnum){var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>2];var len=HEAPU32[iov+4>>2];iov+=8;for(var j=0;j<len;j++){printChar(fd,HEAPU8[ptr+j]);}num+=len;}HEAPU32[pnum>>2]=num;return 0}var asmLibraryArg={"a":___assert_fail,"c":___cxa_allocate_exception,"b":___cxa_throw,"g":__emscripten_get_now_is_monotonic,"e":_abort,"d":_emscripten_get_now,"i":_emscripten_memcpy_big,"h":_emscripten_resize_heap,"f":_fd_write};var asm=createWasm();var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return (___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["k"]).apply(null,arguments)};var _test=Module["_test"]=function(){return (_test=Module["_test"]=Module["asm"]["m"]).apply(null,arguments)};var _check=Module["_check"]=function(){return (_check=Module["_check"]=Module["asm"]["n"]).apply(null,arguments)};var _init=Module["_init"]=function(){return (_init=Module["_init"]=Module["asm"]["o"]).apply(null,arguments)};var _tick=Module["_tick"]=function(){return (_tick=Module["_tick"]=Module["asm"]["p"]).apply(null,arguments)};var _finalize=Module["_finalize"]=function(){return (_finalize=Module["_finalize"]=Module["asm"]["q"]).apply(null,arguments)};var _get_input_queue_ptr=Module["_get_input_queue_ptr"]=function(){return (_get_input_queue_ptr=Module["_get_input_queue_ptr"]=Module["asm"]["r"]).apply(null,arguments)};var _get_output_queue_ptr=Module["_get_output_queue_ptr"]=function(){return (_get_output_queue_ptr=Module["_get_output_queue_ptr"]=Module["asm"]["s"]).apply(null,arguments)};var _print_memory_stats=Module["_print_memory_stats"]=function(){return (_print_memory_stats=Module["_print_memory_stats"]=Module["asm"]["t"]).apply(null,arguments)};var _print_exception=Module["_print_exception"]=function(){return (_print_exception=Module["_print_exception"]=Module["asm"]["u"]).apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return (_malloc=Module["_malloc"]=Module["asm"]["v"]).apply(null,arguments)};var _free=Module["_free"]=function(){return (_free=Module["_free"]=Module["asm"]["w"]).apply(null,arguments)};var ___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=function(){return (___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=Module["asm"]["x"]).apply(null,arguments)};var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller;};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();readyPromiseResolve(Module);if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun();}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("");},1);doRun();},1);}else {doRun();}}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()();}}run();


  return Module.ready
}
);
})();

function base64ToBuffer(base64) {
    const binary = window.atob(base64);
    const bytes = new Uint8Array(binary.length);
    for (let i = 0; i < binary.length; ++i) { bytes[i] = binary.charCodeAt(i); }
    return bytes.buffer;
}
var EngineWasm = base64ToBuffer("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a0EAIAJBAXRrTQRAIAAgASACEAwPCyAAIAFzQQNxIQMCQAJAIAAgAUkEQCADBEAgACEDDAMLIABBA3FFBEAgACEDDAILIAAhAwNAIAJFDQQgAyABLQAAOgAAIAFBAWohASACQQFrIQIgA0EBaiIDQQNxDQALDAELAkAgAw0AIARBA3EEQANAIAJFDQUgACACQQFrIgJqIgMgASACai0AADoAACADQQNxDQALCyACQQNNDQADQCAAIAJBBGsiAmogASACaigCADYCACACQQNLDQALCyACRQ0CA0AgACACQQFrIgJqIAEgAmotAAA6AAAgAg0ACwwCCyACQQNNDQADQCADIAEoAgA2AgAgAUEEaiEBIANBBGohAyACQQRrIgJBA0sNAAsLIAJFDQADQCADIAEtAAA6AAAgA0EBaiEDIAFBAWohASACQQFrIgINAAsLIAALlAQBA38gASAAIAFGIgI6AAwCQCACDQADQCABKAIIIgItAAwNAQJAIAIgAigCCCIDKAIAIgRGBEACQCADKAIEIgRFDQAgBC0ADA0ADAILAkAgASACKAIARgRAIAIhAQwBCyACIAIoAgQiASgCACIANgIEIAEgAAR/IAAgAjYCCCACKAIIBSADCzYCCCACKAIIIgAgACgCACACR0ECdGogATYCACABIAI2AgAgAiABNgIIIAEoAggiAygCACECCyABQQE6AAwgA0EAOgAMIAMgAigCBCIANgIAIAAEQCAAIAM2AggLIAIgAygCCDYCCCADKAIIIgAgACgCACADR0ECdGogAjYCACACIAM2AgQgAyACNgIIDwsCQCAERQ0AIAQtAAwNAAwBCwJAIAEgAigCAEcEQCACIQEMAQsgAiABKAIEIgA2AgAgASAABH8gACACNgIIIAIoAggFIAMLNgIIIAIoAggiACAAKAIAIAJHQQJ0aiABNgIAIAEgAjYCBCACIAE2AgggASgCCCEDCyABQQE6AAwgA0EAOgAMIAMgAygCBCIAKAIAIgE2AgQgAQRAIAEgAzYCCAsgACADKAIINgIIIAMoAggiASABKAIAIANHQQJ0aiAANgIAIAAgAzYCACADIAA2AggMAgsgBEEMaiEBIAJBAToADCADIAAgA0Y6AAwgAUEBOgAAIAMiASAARw0ACwsL4gIDA38BfgJ8IwBBMGsiACQAAn9BtNedAy0A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QQJ0ajYCCCAAIAZBBGo2AgQgACAFNgIAIAIEQCACEAoLDwsQDwALEB8AC/0CAQZ/AkACQAJAIAAoAgQiAiAAKAIAIgRrQQN1IgVBAWoiA0GAgICAAkkEQEH/////ASAAKAIIIARrIgZBAnUiByADIAMgB0kbIAZB+P///wdPGyIDQYCAgIACTw0BIANBA3QiBhALIgcgBUEDdGoiAyABKAIANgIAIAMgASgCBCIBNgIEIAEEQCABIAEoAgRBAWo2AgQgACgCACEEIAAoAgQhAgsgBiAHaiEBIANBCGohBSACIARGDQIDQCADQQhrIgMgAkEIayICKAIANgIAIAMgAigCBDYCBCACQgA3AgAgAiAERw0ACyAAIAE2AgggACgCBCEEIAAgBTYCBCAAKAIAIQIgACADNgIAIAIgBEYNAwNAAkAgBEEIayIEKAIEIgBFDQAgACAAKAIEIgFBAWs2AgQgAQ0AIAAgACgCACgCCBEAACAAEAkLIAIgBEcNAAsMAwsQDwALEB8ACyAAIAE2AgggACAFNgIEIAAgAzYCAAsgAgRAIAIQCgsLDAAgABCvARogABAKC0kBAn8gACgCBCIFQQh1IQYgACgCACIAIAEgBUEBcQR/IAYgAigCAGooAgAFIAYLIAJqIANBAiAFQQJxGyAEIAAoAgAoAhgRBwALuQIBA38jAEEQayIDJAACQCAAIAFGDQAgASgCECECIAAgACgCECIERgRAIAEgAkYEQCAAIAMgACgCACgCDBECACAAKAIQIgIgAigCACgCEBEAACAAQQA2AhAgASgCECICIAAgAigCACgCDBECACABKAIQIgIgAigCACgCEBEAACABQQA2AhAgACAANgIQIAMgASADKAIAKAIMEQIAIAMgAygCACgCEBEAACABIAE2AhAMAgsgACABIAAoAgAoAgwRAgAgACgCECICIAIoAgAoAhARAAAgACABKAIQNgIQIAEgATYCEAwBCyABIAJGBEAgASAAIAEoAgAoAgwRAgAgASgCECICIAIoAgAoAhARAAAgASAAKAIQNgIQIAAgADYCEAwBCyAAIAI2AhAgASAENgIQCyADQRBqJAALPwEBfyAAIAFB5ABuIgJBAXRBsKQDai8BADsAACAAQQJqIgAgASACQeQAbGtBAXRBsKQDai8BADsAACAAQQJqCy8AIAEEQCAA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AgQ2AgQgAiADNgIEIAEoAgAhBSABKAIEIgIEQCACIAIoAgRBAWo2AgQLIAAoAgAhByAAKAIEIgMEQCADIAMoAgRBAWo2AgQLIAYgAjYCPCAGIAU2AjggAgRAIAIgAigCBEEBajYCBAsgBiADNgI0IAYgBzYCMCADBEAgAyADKAIEQQFqNgIECyAELQAAIQUgBCgCCCEHIAQoAgQhBCAGIAYpAzg3AwggBiAGKQMwNwMAIAZBCGogBiAEIAcgBRAaIQQCQCADRQ0AIAMgAygCBCIFQQFrNgIEIAUNACADIAMoAgAoAggRAAAgAxAJCwJAIAJFDQAgAiACKAIEIgNBAWs2AgQgAw0AIAIgAigCACgCCBEAACACEAkLIARFBEAgCUECaiEJDAELIAAoAgAhAiAAIAEoAgA2AgAgASACNgIAIAAoAgQhAiAAIAEoAgQ2AgQgASACNgIEIAlBA2ohCQsgBkFAayQAIAkL8QwBCH8jAEEQayIGJAAgBkEANgIIIAZCADcDAAJAIAEoAgQiAyABKAIAIgJHBEAgAyACayIEQQBIDQEgBiAEEAsiATYCACAGIAE2AgQgBiABIARBeHFqNgIIA0AgASACKAIANgIAIAEgAigCBCIENgIEIAQEQCAEIAQoAgRBAWo2AgQLIAFBCGohASACQQhqIgIgA0cNAAsgBiABNgIECyAAIQEjAEEgayIEJAAgBEEANgIIIARCADcDAAJAAkAgBigCBCIFIAYoAgAiAEcEQCAFIABrIgNBAEgNASAEIAMQCyICNgIAIAQgAjYCBCAEIAIgA0F4cWo2AggDQCACIAAoAgA2AgAgAiAAKAIEIgM2AgQgAwRAIAMgAygCBEEBajYCBAsgAkEIaiECIABBCGoiACAFRw0ACyAEIAI2AgQLIARBEGohByMAQRBrIgAkAAJAIAQoAgAiCCAEKAIEIglHBEAgB0EANgIIIAdCADcCACAHQfAAEAsiAjYCACAHIAJB8ABqIgM2AgggAkKAgICAgICAgIB/NwNoIAJC////////////ADcDYCACQoCAgICAgICAgH83A1ggAkL///////////8ANwNQIAJCgICAgICAgICAfzcDSCACQv///////////wA3A0AgAkKAgICAgICAgIB/NwM4IAJC////////////ADcDMCACQoCAgICAgICAgH83AyggAkL///////////8ANwMgIAJCgICAgICAgICAfzcDGCACQv///////////wA3AxAgAkKAgICAgICAgIB/NwMIIAJC////////////ADcDACAHIAM2AgQDQCAIKAIAIQUgCCgCBCIDBEAgAyADKAIEQQFqNgIECyAAIAUoAgQgBygCACICEDwgAiAAKQMINwMIIAIgACkDADcDACAAIAUoAgRBEGogAkEQahA8IAIgACkDCDcDGCACIAApAwA3AxAgACAFKAIEQSBqIAJBIGoQPCACIAApAwg3AyggAiAAKQMANwMgIAAgBSgCBEEwaiACQTBqEDwgAiAAKQMINwM4IAIgACkDADcDMCAAIAUoAgRBQGsgAkFAaxA8IAIgACkDCDcDSCACIAApAwA3A0AgACAFKAIEQdAAaiACQdAAahA8IAIgACkDCDcDWCACIAApAwA3A1AgACAFKAIEQeAAaiACQeAAahA8IAIgACkDCDcDaCACIAApAwA3A2ACQCADRQ0AIAMgAygCBCICQQFrNgIEIAINACADIAMoAgAoAggRAAAgAxAJCyAIQQhqIgggCUcNAAsgAEEQaiQADAELQQQQAiIAQQgQC0GT3wAQQzYCACAAQaiQAUEAEAEAC0EAIQBBACECIwBBEGsiAyQAIANBADYCCCADQgA3AwACQAJAAkACQCAHKAIEIgggBygCACIFRwRAIAggBWsiAkEASA0BIAIQCyIAIAUgAhAMIAJqIQILIAFCADcCBCABQQA2AgwgAUHgkgE2AgAgACACRwRAIAIgAGsiAkEASA0CIAEgAhALIgU2AgQgASAFIAJBcHFqNgIMIAEgBSAAIAIQDCACajYCCAsgAARAIAAQCgsgAUIANwIQIAFBADYCGCABQeiTATYCACAGKAIEIgAgBigCACICRwRAIAAgAmsiAkEASA0DIAEgAhALIgA2AhAgASAANgIUIAEgACACQXhxajYCGCAGKAIAIgIgBigCBCIHRwRAA0AgACACKAIANgIAIAAgAigCBCIFNgIEIAUEQCAFIAUoAgRBAWo2AgQLIABBCGohACACQQhqIgIgB0cNAAsLIAEgADYCFAsgA0EQaiQADAMLEA8ACxAPAAsQDwALIAQoAhAiAARAIAQgADYCFCAAEAoLIAQoAgAiAQRAIAQoAgQiAiABIgBHBEADQAJA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QYCAD2pBEHZBAnEiBXRBD3YgACABciAFcmsiAEEBdCAEIABBFWp2QQFxckEcaiEACyACIAA2AhwgAkIANwIQIABBAnRB9NWdA2ohAQJAAkAgCEEBIAB0IgVxRQRAQcjTnQMgBSAIcjYCACABIAI2AgAMAQsgBEEZIABBAXZrQQAgAEEfRxt0IQAgASgCACEGA0AgBiIBKAIEQXhxIARGDQIgAEEddiEFIABBAXQhACABIAVBBHFqIgUoAhAiBg0ACyAFIAI2AhALIAIgATYCGCACIAI2AgwgAiACNgIIDAELIAEoAggiACACNgIMIAEgAjYCCCACQQA2AhggAiABNgIMIAIgADYCCAsgA0EIaiEADAELAkAgCUUNAAJAIAIoAhwiAEECdEH01Z0DaiIBKAIAIAJGBEAgASADNgIAIAMNAUHI050DIApBfiAAd3E2AgAMAgsgCUEQQRQgCSgCECACRhtqIAM2AgAgA0UNAQsgAyAJNgIYIAIoAhAiAARAIAMgADYCECAAIAM2AhgLIAIoAhQiAEUNACADIAA2AhQgACADNgIYCwJAIARBD00EQCACIAQgBmoiAEEDcjYCBCAAIAJqIgAgACgCBEEBcjYCBAwBCyACIAZBA3I2AgQgAiAGaiIDIARBAXI2AgQgAyAEaiAENgIAIAcEQCAHQXhxQezTnQNqIQBB2NOdAygCACEBAn9BASAHQQN2dCIGIAVxRQRAQcTTnQMgBSAGcjYCACAADAELIAAoAggLIQUgACABNgIIIAUgATYCDCABIAA2AgwgASAFNgIIC0HY050DIAM2AgBBzNOdAyAENgIACyACQQhqIQALIAtBEGokACAAC/8CAgN/AXwjAEEQayIBJAACQCAAvCIDQf////8HcSICQdqfpPoDTQRAIAJBgICAzANJDQEgALsQLiEADAELIAJB0aftgwRNBEAgALshBCACQeOX24AETQRAIANBAEgEQCAERBgtRFT7Ifk/oBAvjCEADAMLIAREGC1EVPsh+b+gEC8hAAwCC0QYLURU+yEJwEQYLURU+yEJQCADQQBOGyAEoJoQLiEADAELIAJB1eOIhwRNBEAgAkHf27+FBE0EQCAAuyEEIANBAEgEQCAERNIhM3982RJAoBAvIQAMAwsgBETSITN/fNkSwKAQL4whAAwCC0QYLURU+yEZQEQYLURU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ADYCiAQgAQRAIAEgASgCBEEBajYCBAsgA0EQEAsiATYC8AIgAyABNgL0AiADIAFBEGo2AvgCIAEgAygCgAQ2AgAgASADKAKEBCICNgIEIAIEQCACIAIoAgRBAWo2AgQLIAEgAygCiAQ2AgggASADKAKMBCICNgIMIAIEQCACIAIoAgRBAWo2AgQLIAMgAUEQajYC9AIgA0GIBWogA0HwAmoQNCADKALwAiICBEAgAygC9AIiBiACIgFHBEADQAJAIAZBCGsiBigCBCIBRQ0AIAEgASgCBCIIQQFrNgIEIAgNACABIAEoAgAoAggRAAAgARAJCyACIAZHDQALIAMoAvACIQELIAMgAjYC9AIgARAKCwJAIAMoAowEIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLAkAgAygChAQiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsgA0HgyZcDKAIANgLoBCADQeTJlwMoAgAiATYC7AQgAQRAIAEgASgCBEEBajYCBAsgA0HIyJcDKAIANgLgBCADQczIlwMoAgAiATYC5AQgAQRAIAEgASgCBEEBajYCBAsgAyADKQPoBDcDyAEgAyADKQPgBDcDwAEgA0GABGogA0HIAWogA0HAAWoQKSADQcTIlwMoAgAiATYCjAQgA0HAyJcDKAIANgKIBCABBEAgASABKAIEQQFqNgIECyADQRAQCyIBNgLwAiADIAE2AvQCIAMgAUEQajYC+AIgASADKAKABDYCACABIAMoAoQEIgI2AgQgAgRAIAIgAigCBEEBajYCBAsgASADKAKIBDYCCCABIAMoAowEIgI2AgwgAgRAIAIgAigCBEEBajYCBAsgAyABQRBqNgL0AiADQfAEaiADQfACahA0IAMoAvACIgIEQCADKAL0AiIGIAIiAUcEQANAAkAgBkEIayIGKAIEIgFFDQAgASABKAIEIghBAWs2AgQgCA0AIAEgASgCACgCCBEAACABEAkLIAIgBkcNAAsgAygC8AIhAQsgAyACNgL0AiABEAoLAkAgAygCjAQiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsCQCADKAKEBCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCyADQeDJlwMoAgA2AtAEIANB5MmXAygCACIBNgLUBCABBEAgASABKAIEQQFqNgIECyADQfjHlwMoAgA2AsgEIANB/MeXAygCACIBNgLMBCABBEAgASABKAIEQQFqNgIECyADIAMpA9AENwO4ASADIAMpA8gENwOwASADQYAEaiADQbgBaiADQbABahApIANBvMiXAygCACIBNgKMBCADQbjIlwMoAgA2AogEIAEEQCABIAEoAgRBAWo2AgQLIANBEBALIgE2AvACIAMgATYC9AIgAyABQRBqNgL4AiABIAMoAoAENgIAIAEgAygChAQiAjYCBCACBEAgAiACKAIEQQFqNgIECyABIAMoAogENgIIIAEgAygCjAQiAjYCDCACBEAgAiACKAIEQQFqNgIECyADIAFBEGo2AvQCIANB2ARqIANB8AJqEDQgAygC8AIiAgRAIAMoAvQCIgYgAiIBRwRAA0ACQCAGQQhrIgYoAgQiAUUNACABIAEoAgQiCEEBazYCBCAIDQAgASABKAIAKAIIEQAAIAEQCQsgAiAGRw0ACyADKALwAiEBCyADIAI2AvQCIAEQCgsCQCADKAKMBCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAMoAoQEIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLIANBDBALIgE2ArgEIAMgAUEMaiICNgLABCABQSU2AgggAUKogICA4AA3AgAgAyACNgK8BCADQYAEaiADQbgEahCFASADKAKABCEMIAMoAoQEIQggAygCuAQiAQRAIAMgATYCvAQgARAKCyADIAg2AqwEIAMgDDYCqAQgCARAIAggCCgCBEEBajYCBAsgAyADKALwBDYCoAQgAyADKAL0BCIBNgKkBCABBEAgASABKAIEQQFqNgIECyADIAMpA6gENwOoASADIAMpA6AENwOgASADQbAEaiADQagBaiADQaABahApIANBBBALIgE2AugDIAMgAUEEaiICNgLwAyABQR42AgAgAyACNgLsAyADQYAEaiADQegDahCFASADIAMpA4AENwP4AyADQYjIlwMoAgA2AuADIANBjMiXAygCACIBNgLkAyABBEAgASABKAIEQQFqNgIECyADIAMpA/gDNwOYASADIAMpA+ADNwOQASADQYAEaiADQZgBaiADQZABahApIAMgAygCtAQiATYCjAQgAyADKAKwBDYCiAQgAQRAIAEgASgCBEEBajYCBAsgA0GMyJcDKAIAIgE2ApQEIANBiMiXAygCADYCkAQgAQRAIAEgASgCBEEBajYCBAsgA0EYEAsiATYC8AIgAyABNgL0AiADIAFBGGo2AvgCIAEgAygCgAQ2AgAgASADKAKEBCICNgIEIAIEQCACIAIoAgRBAWo2AgQLIAEgAygCiAQ2AgggASADKAKMBCICNgIMIAIEQCACIAIoAgRBAWo2AgQLIAEgAygCkAQ2AhAgASADKAKUBCICNgIUIAIEQCACIAIoAgRBAWo2AgQLIAMgAUEYajYC9AIgA0GYBGogA0HwAmoQNCADKALwAiICBEAgAygC9AIiBiACIgFHBEADQAJAIAZBCGsiBigCBCIBRQ0AIAEgASgCBCIFQQFrNgIEIAUNACABIAEoAgAoAggRAAAgARAJCyACIAZHDQALIAMoAvACIQELIAMgAjYC9AIgARAKCwJAIAMoApQEIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLAkAgAygCjAQiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsCQCADKAKEBCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCyADKALoAyIBBEAgAyABNgLsAyABEAoLIAMoArQEIgUEQCAFIAUoAgRBAWo2AgQLIAMoArAEIQIgAygCjAUiCQRAIAkgCSgCBEEBajYCBAsgAygCiAUhBiADQRAQCyIBNgKABCADIAE2AoQEIAMgAUEQajYCiAQgASAFNgIEIAEgAjYCACAFBEAgBSAFKAIEQQFqNgIECyABIAY2AgggASAJNgIMIAkEQCAJIAkoAgRBAWo2AgQLIAMgAUEQajYChAQgA0HYA2ogA0GABGoQNCADKAKABCICBEAgAygChAQiBiACIgFHBEADQAJAIAZBCGsiBigCBCIBRQ0AIAEgASgCBCIPQQFrNgIEIA8NACABIAEoAgAoAggRAAAgARAJCyACIAZHDQALIAMoAoAEIQELIAMgAjYChAQgARAKCwJAIAlFDQAgCSAJKAIEIgFBAWs2AgQgAQ0AIAkgCSgCACgCCBEAACAJEAkLAkAgBUUNACAFIAUoAgQiAUEBazYCBCABDQAgBSAFKAIAKAIIEQAAIAUQCQsgA0HQyZcDKAIANgK4AyADQdTJlwMoAgAiATYCvAMgAQRAIAEgASgCBEEBajYCBAsgAyAENgKsAyADIAs2AqgDIAQgBCgCBEEBajYCBCADIAMoAtgDNgKgAyADIAMoAtwDIgE2AqQDIAEEQCABIAEoAgRBAWo2AgQLIAMgAykDqAM3A4gBIAMgAykDoAM3A4ABIANBsANqIANBiAFqIANBgAFqECkgAyADKQO4AzcDeCADIAMpA7ADNwNwIANBgARqIANB+ABqIANB8ABqECkgAyAHNgKcAyADIA02ApgDIAcgBygCBEEBajYCBCADQdjJlwMoAgA2AugCIANB3MmXAygCACIBNgLsAiABBEAgASABKAIEQQFqNgIECyADIAMoApgENgLgAiADIAMoApwEIgE2AuQCIAEEQCABIAEoAgRBAWo2AgQLIAMgAykD6AI3A2ggAyADKQPgAjcDYCADQfACaiADQegAaiADQeAAahApIAMgCDYC3AIgAyAMNgLYAiAIBEAgCCAIKAIEQQFqNgIEC0EkEAsiAUHo9AE2AgwgAUHo8wE2AgAgAUKAgICAEDcCBCABQX82AiAgAUGBAjsBHCABQQA2AhggASABNgIUIAEgAUEMaiICNgIQIAMgATYCzAIgAyACNgLIAiADQcjIlwMoAgA2AsACIANBzMiXAygCACIBNgLEAiABBEAgASABKAIEQQFqNgIECyADIAMpA8gCNwNYIAMgAykDwAI3A1AgA0HQAmogA0HYAGogA0HQAGoQKSADIAMpA9gCNwNIIAMgAykD0AI3A0AgA0H4AmogA0HIAGogA0FAaxApIANBEBALIgE2AoADIAMgATYChAMgAyABQRBqNgKIAyABIAMoAvACNgIAIAEgAygC9AIiAjYCBCACBEAgAiACKAIEQQFqNgIECyABIAMoAvgCNgIIIAEgAygC/AIiAjYCDCACBEAgAiACKAIEQQFqNgIECyADIAFBEGo2AoQDIANBkANqIANBgANqEDQgAyADKQOYAzcDOCADIAMpA5ADNwMwIANBiARqIANBOGogA0EwahApIANB0MmXAygCADYCuAIgA0HUyZcDKAIAIgE2ArwCIAEEQCABIAEoAgRBAWo2AgQLIANBBBALIgE2AvgBIAMgAUEEaiICNgKAAiABQSg2AgAgAyACNgL8ASADQZACaiADQfgBahCFASADIAMpA5ACNwOIAiADIAMoAvAENgLwASADIAMoAvQEIgE2AvQBIAEEQCABIAEoAgRBAWo2AgQLIAMgAykDiAI3AyggAyADKQPwATcDICADQZACaiADQShqIANBIGoQKSADIAMoAtwEIgE2ApwCIAMgAygC2AQ2ApgCIAEEQCABIAEoAgRBAWo2AgQLIANBEBALIgE2AqACIAMgATYCpAIgAyABQRBqNgKoAiABIAMoApACNgIAIAEgAygClAIiAjYCBCACBEAgAiACKAIEQQFqNgIECyABIAMoApgCNgIIIAEgAygCnAIiAjYCDCACBEAgAiACKAIEQQFqNgIECyADIAFBEGo2AqQCIANBsAJqIANBoAJqEDQgAyADKQO4AjcDGCADIAMpA7ACNwMQIANBkARqIANBGGogA0EQahApIANBGBALIgE2AsADIAMgATYCxAMgAyABQRhqNgLIAyABIAMoAoAENgIAIAEgAygChAQiAjYCBCACBEAgAiACKAIEQQFqNgIECyABIAMoAogENgIIIAEgAygCjAQiAjYCDCACBEAgAiACKAIEQQFqNgIECyABIAMoApAENgIQIAEgAygClAQiAjYCFCACBEAgAiACKAIEQQFqNgIECyADIAFBGGo2AsQDIANB0ANqIANBwANqEDQgAygCwAMiAgRAIAMoAsQDIgYgAiIBRwRAA0ACQCAGQQhrIgYoAgQiAUUNACABIAEoAgQiBUEBazYCBCAFDQAgASABKAIAKAIIEQAAIAEQCQsgAiAGRw0ACyADKALAAyEBCyADIAI2AsQDIAEQCgsCQCADKAKUBCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAMoAowEIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLAkAgAygChAQiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsgAygCoAIiAgRAIAMoAqQCIgYgAiIBRwRAA0ACQCAGQQhrIgYoAgQiAUUNACABIAEoAgQiBUEBazYCBCAFDQAgASABKAIAKAIIEQAAIAEQCQsgAiAGRw0ACyADKAKgAiEBCyADIAI2AqQCIAEQCgsCQCADKAKcAiIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAMoApQCIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLIAMoAvgBIgEEQCADIAE2AvwBIAEQCgsgAygCgAMiAgRAIAMoAoQDIgYgAiIBRwRAA0ACQCAGQQhrIgYoAgQiAUUNACABIAEoAgQiBUEBazYCBCAFDQAgASABKAIAKAIIEQAAIAEQCQsgAiAGRw0ACyADKAKAAyEBCyADIAI2AoQDIAEQCgsCQCADKAL8AiIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAMoAvQCIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLIANB8MmXAygCADYC6AEgA0H0yZcDKAIAIgE2AuwBIAEEQCABIAEoAgRBAWo2AgQLIAMgAygC0AM2AuABIAMgAygC1AMiATYC5AEgAQRAIAEgASgCBEEBajYCBAsgAyADKQPoATcDCCADIAMpA+ABNwMAIANB8AJqIANBCGogAxApIAMoAvACIQIgAygC9AIiBQRAIAUgBSgCBEEBajYCBAsgA0EIEAsiATYCgAQgAyABNgKEBCADIAFBCGoiBjYCiAQgASAFNgIEIAEgAjYCACAFBEAgBSAFKAIEQQFqNgIECyADIAY2AoQEIApBCGogA0GABGoQNCADKAKABCICBEAgAygChAQiBiACIgFHBEADQAJAIAZBCGsiBigCBCIBRQ0AIAEgASgCBCIJQQFrNgIEIAkNACABIAEoAgAoAggRAAAgARAJCyACIAZHDQALIAMoAoAEIQELIAMgAjYChAQgARAKCwJAIAVFDQAgBSAFKAIEIgFBAWs2AgQgAQ0AIAUgBSgCACgCCBEAACAFEAkLAkAgAygC9AIiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsCQCADKALUAyIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAMoAtwDIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLAkAgAygCnAQiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsCQCADKAK0BCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAhFDQAgCCAIKAIEIgFBAWs2AgQgAQ0AIAggCCgCACgCCBEAACAIEAkLAkAgAygC3AQiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsCQCADKAL0BCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAMoAowFIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLIAcgBygCBCIBQQFrNgIEIAFFBEAgByAHKAIAKAIIEQAAIAcQCQsgBCAEKAIEIgFBAWs2AgQgAUUEQCAEIAQoAgAoAggRAAAgBBAJCyADQZAFaiQAIAogCikDCDcDACAAIA5BAkEbIApBP0EAQQFBABCBAgJAIAooAtABIgBFDQAgACAAKAIEIgFBAWs2AgQgAQ0AIAAgACgCACgCCBEAACAAEAkLAkAgCigCyAEiAEUNACAAIAAoAgQiAUEBazYCBCABDQAgACAAKAIAKAIIEQAAIAAQCQsCQCAKKALAASIARQ0AIAAgACgCBCIBQQFrNgIEIAENACAAIAAoAgAoAggRAAAgABAJCwJAIAooAiQiAEUNACAAIAAoAgQiAUEBazYCBCABDQAgACAAKAIAKAIIEQAAIAAQCQsCQCAKKAIcIgBFDQAgACAAKAIEIgFBAWs2AgQgAQ0AIAAgACgCACgCCBEAACAAEAkLAkAgCigCFCIARQ0AIAAgACgCBCIBQQFrNgIEIAENACAAIAAoAgAoAggRAAAgABAJCyAKQeABaiQAC40BAgF/AX5B7LLXASgAACIBQen/vwFrQf7/v35NBEBBCBACQfTwABA1QYCvA0EDEAEACyABQeiy1wFqIgFChICAgIABNwAIQbCvA0GwrwMpAwAiAkIBfDcDACABIAA3ABggASACNwAQQeiy1wFB6LLXASgAAEEBajYAAEHsstcBQeyy1wEoAABBGGo2AAAL0QICAn4BfyABKAIAIgQpAwgiAiAAKAIEIgAiASkDGH0iAyABKQMQIAJ9IgJCACACQgBVGyADQgBVGyICIAJ+IAQpAwAiAiAAKQMIfSIDIAApAwAgAn0iAkIAIAJCAFUbIANCAFUbIgIgAn58IAQpAxAiAiAAKQMofSIDIAApAyAgAn0iAkIAIAJCAFUbIANCAFUbIgIgAn58IAQpAxgiAiAAKQM4fSIDIAApAzAgAn0iAkIAIAJCAFUbIANCAFUbIgIgAn58IAQpAyAiAiAAQUBrIgEpAwh9IgMgASkDACACfSICQgAgAkIAVRsgA0IAVRsiAiACfnwgBCkDKCICIAApA1h9IgMgACkDUCACfSICQgAgAkIAVRsgA0IAVRsiAiACfnwgBCkDMCICIAApA2h9IgMgACkDYCACfSICQgAgAkIAVRsgA0IAVRsiAiACfnwL4AUBA38jAEGAAWsiBiQAIAAgASACIAMgBRCeASEIIAYgBCgCADYCeCAGIAQoAgQiBzYCfCAHBEAgByAHKAIEQQFqNgIECyAGIAMoAgA2AnAgBiADKAIEIgc2AnQgBwRAIAcgBygCBEEBajYCBAsgBiAGKQN4NwM4IAYgBikDcDcDMAJAIAUgBkE4aiAGQTBqEB1FDQAgAygCACEHIAMgBCgCADYCACAEIAc2AgAgAygCBCEHIAMgBCgCBDYCBCAEIAc2AgQgBiADKAIANgJoIAYgAygCBCIENgJsIAQEQCAEIAQoAgRBAWo2AgQLIAYgAigCADYCYCAGIAIoAgQiBDYCZCAEBEAgBCAEKAIEQQFqNgIECyAGIAYpA2g3AyggBiAGKQNgNwMgIAUgBkEoaiAGQSBqEB1FBEAgCEEBaiEIDAELIAIoAgAhBCACIAMoAgA2AgAgAyAENgIAIAIoAgQhBCACIAMoAgQ2AgQgAyAENgIEIAYgAigCADYCWCAGIAIoAgQiAzYCXCADBEAgAyADKAIEQQFqNgIECyAGIAEoAgA2AlAgBiABKAIEIgM2AlQgAwRAIAMgAygCBEEBajYCBAsgBiAGKQNYNwMYIAYgBikDUDcDECAFIAZBGGogBkEQahAdRQRAIAhBAmohCAwBCyABKAIAIQMgASACKAIANgIAIAIgAzYCACABKAIEIQMgASACKAIENgIEIAIgAzYCBCAGIAEoAgA2AkggBiABKAIEIgI2AkwgAgRAIAIgAigCBEEBajYCBAsgBiAAKAIANgJAIAYgACgCBCICNgJEIAIEQCACIAIoAgRBAWo2AgQLIAYgBikDSDcDCCAGIAYpA0A3AwAgBSAGQQhqIAYQHUUEQCAIQQNqIQgMAQsgACgCACECIAAgASgCADYCACABIAI2AgAgACgCBCECIAAgASgCBDYCBCABIAI2AgQgCEEEaiEICyAGQYABaiQAIAgLrgQBA38jAEHgAGsiBSQAIAAgASACIAQQSiEHIAUgAygCADYCWCAFIAMoAgQiBjYCXCAGBEAgBiAGKAIEQQFqNgIECyAFIAIoAgA2AlAgBSACKAIEIgY2AlQgBgRAIAYgBigCBEEBajYCBAsgBSAFKQNYNwMoIAUgBSkDUDcDIAJAIAQgBUEoaiAFQSBqEB1FDQAgAigCACEGIAIgAygCADYCACADIAY2AgAgAigCBCEGIAIgAygCBDYCBCADIAY2AgQgBSACKAIANgJIIAUgAigCBCIDNgJMIAMEQCADIAMoAgRBAWo2AgQLIAUgASgCADYCQCAFIAEoAgQiAzYCRCADBEAgAyADKAIEQQFqNgIECyAFIAUpA0g3AxggBSAFKQNANwMQIAQgBUEYaiAFQRBqEB1FBEAgB0EBaiEHDAELIAEoAgAhAyABIAIoAgA2AgAgAiADNgIAIAEoAgQhAyABIAIoAgQ2AgQgAiADNgIEIAUgASgCADYCOCAFIAEoAgQiAjYCPCACBEAgAiACKAIEQQFqNgIECyAFIAAoAgA2AjAgBSAAKAIEIgI2AjQgAgRAIAIgAigCBEEBajYCBAsgBSAFKQM4NwMIIAUgBSkDMDcDACAEIAVBCGogBRAdRQRAIAdBAmohBwwBCyAAKAIAIQIgACABKAIANgIAIAEgAjYCACAAKAIEIQIgACABKAIENgIEIAEgAjYCBCAHQQNqIQcLIAVB4ABqJAAgBwvEAgEGfwJAIAAoAgQiAyAAKAIAIgRrQQN1IgdBAWoiAkGAgICAAkkEQEH/////ASAAKAIIIARrIgVBAnUiBiACIAIgBkkbIAVB+P///wdPGyICQYCAgIACTw0BIAJBA3QiBRALIgYgB0EDdGoiAiABKAIANgIAIAIgASgCBDYCBCABQgA3AgAgAkEIaiEBIAMgBEcEQANAIAJBCGsiAiADQQhrIgMoAgA2AgAgAiADKAIENgIEIANCADcCACADIARHDQALIAAoAgAhAwsgACACNgIAIAAgBSAGajYCCCAAKAIEIQIgACABNgIEIAIgA0cEQANAAkAgAkEIayICKAIEIgBFDQAgACAAKAIEIgFBAWs2AgQgAQ0AIAAgACgCACgCCBEAACAAEAkLIAIgA0cNAAsLIAMEQCADEAoLDwsQDwALEB8AC9QoAhR/A34jAEHwAGsiCSQAA0AgAUEEayEWIAFBCGshEgNAAkACQAJAAkACQAJAIAEgAGsiBEEDdSIFDgYFBQABAgMECyABQQhrIgUoAgAhBCAFKAIEIgEEQCABIAEoAgRBAWo2AgQLIAAoAgAhCiAAKAIEIgMEQCADIAMoAgRBAWo2AgQLIAkgATYCbCAJIAQ2AmggAQRAIAEgASgCBEEBajYCBAsgCSADNgJkIAkgCjYCYCADBEAgAyADKAIEQQFqNgIECyACLQAAIQQgAigCCCEKIAIoAgQhAiAJIAkpA2g3A1ggCSAJKQNgNwNQIAlB2ABqIAlB0ABqIAIgCiAEEBohAgJAIANFDQAgAyADKAIEIgRBAWs2AgQgBA0AIAMgAygCACgCCBEAACADEAkLAkAgAUUNACABIAEoAgQiA0EBazYCBCADDQAgASABKAIAKAIIEQAAIAEQCQsgAkUNBCAAKAIAIQEgACAFKAIANgIAIAUgATYCACAAKAIEIQEgACAFKAIENgIEIAUgATYCBAwECyAAIABBCGogAUEIayACEDgaDAMLIAAgAEEIaiAAQRBqIAFBCGsgAhBxGgwCCyAAIABBCGogAEEQaiAAQRhqIAFBCGsgAhBXGgwBCyAEQTdMBEAgACABIAIQgwIMAQsgA0UEQCAAIAFGDQEgBUECa0EBdiELA0AgACACIAUgACALIgNBA3RqEHAgC0EBayELIAMNAAsgBEEDdiEFA0AgACgCACEDIAAgAUEIayIBKAIANgIAIAEgAzYCACAAKAIEIQMgACABQQRqKAIANgIEIAEgAzYCBCAAIAIgBUEBayIDIAAQcCAFQQJLIQQgAyEFIAQNAAsMAQsgACAFQQF2QQN0aiEKAn8gBEG5Pk8EQCAAIAAgBUEBdEF4cSIFaiAKIAUgCmogEiACEFcMAQsgACAKIBIgAhA4CyEOIAAoAgAhBiAAKAIEIgUEQCAFIAUoAgRBAWo2AgQLIAooAgAhCyAKKAIEIgQEQCAEIAQoAgRBAWo2AgQLIAkgBTYCbCAJIAY2AmggBQRAIAUgBSgCBEEBajYCBAsgCSAENgJkIAkgCzYCYCAEBEAgBCAEKAIEQQFqNgIECyACLQAAIQYgAigCCCELIAIoAgQhByAJIAkpA2g3A0ggCSAJKQNgNwNAIAlByABqIAlBQGsgByALIAYQGiEGAkAgBEUNACAEIAQoAgQiC0EBazYCBCALDQAgBCAEKAIAKAIIEQAAIAQQCQsCQCAFRQ0AIAUgBSgCBCIEQQFrNgIEIAQNACAFIAUoAgAoAggRAAAgBRAJCyADQQFrIQMCfwJAAkAgBgRAIBIhBQwBCyASIQUDQCAFIgRBCGsiBSAARgRAIAAoAgAhCiAAKAIEIgUEQCAFIAUoAgRBAWo2AgQLIBIoAgAhBiAWKAIAIgQEQCAEIAQoAgRBAWo2AgQLIAkgBTYCbCAJIAo2AmggBQRAIAUgBSgCBEEBajYCBAsgCSAENgJkIAkgBjYCYCAEBEAgBCAEKAIEQQFqNgIECyACLQAAIQogAigCCCEGIAIoAgQhCyAJIAkpA2g3AyggCSAJKQNgNwMgIAlBKGogCUEgaiALIAYgChAaIQoCQCAERQ0AIAQgBCgCBCIGQQFrNgIEIAYNACAEIAQoAgAoAggRAAAgBBAJCwJAIAVFDQAgBSAFKAIEIgRBAWs2AgQgBA0AIAUgBSgCACgCCBEAACAFEAkLIABBCGohBCAKDQMgBCASRg0FA0AgACgCACEGIAAoAgQiBQRAIAUgBSgCBEEBajYCBAsgBCgCACELIAQoAgQiCgRAIAogCigCBEEBajYCBAsgCSAFNgJsIAkgBjYCaCAFBEAgBSAFKAIEQQFqNgIECyAJIAo2AmQgCSALNgJgIAoEQCAKIAooAgRBAWo2AgQLIAItAAAhBiACKAIIIQsgAigCBCEHIAkgCSkDaDcDGCAJIAkpA2A3AxAgCUEYaiAJQRBqIAcgCyAGEBohBgJAIApFDQAgCiAKKAIEIgtBAWs2AgQgCw0AIAogCigCACgCCBEAACAKEAkLAkAgBUUNACAFIAUoAgQiCkEBazYCBCAKDQAgBSAFKAIAKAIIEQAAIAUQCQsgBgRAIAQoAgAhBSAEIBIoAgA2AgAgEiAFNgIAIAQoAgQhBSAEIBYoAgA2AgQgFiAFNgIAIARBCGohBAwFCyASIARBCGoiBEcNAAsMBQsgBSgCACEHIARBBGsiCygCACIEBEAgBCAEKAIEQQFqNgIECyAKKAIAIQggCigCBCIGBEAgBiAGKAIEQQFqNgIECyAJIAQ2AmwgCSAHNgJoIAQEQCAEIAQoAgRBAWo2AgQLIAkgBjYCZCAJIAg2AmAgBgRAIAYgBigCBEEBajYCBAsgAi0AACEHIAIoAgghCCACKAIEIQwgCSAJKQNoNwM4IAkgCSkDYDcDMCAJQThqIAlBMGogDCAIIAcQGiEHAkAgBkUNACAGIAYoAgQiCEEBazYCBCAIDQAgBiAGKAIAKAIIEQAAIAYQCQsCQCAERQ0AIAQgBCgCBCIGQQFrNgIEIAYNACAEIAQoAgAoAggRAAAgBBAJCyAHRQ0ACyAAKAIAIQQgACAFKAIANgIAIAUgBDYCACAAKAIEIQQgACALKAIANgIEIAsgBDYCACAOQQFqIQ4LIAUgAEEIaiIESwRAA38gBCIGKAIAIQ8gBCgCBCIHBEAgByAHKAIEQQFqNgIECyAKKAIAIRMgCigCBCIIBEAgCCAIKAIEQQFqNgIECyAHBEAgByAHKAIEQQFqNgIECyAIBEAgCCAIKAIEQQFqNgIECwJAIAIoAggiEEEATARAQQAhDQwBCyACLQAAIQQgAigCBCEUQQAhCwNAIAsgFGogEG8hDAJAIAdFBEAgDygCBCAMQQR0aiINKQMIIRggDSkDACEZDAELIAcgBygCBCINQQFqIhE2AgQgDygCBCAMQQR0aiIVKQMIIRggFSkDACEZIAcgDTYCBCARDQAgByAHKAIAKAIIEQAAIAcQCQsgGCAZfEICfyIYIBhCP4ciGYUgGX0gGCAEGyEaAkAgCEUEQCATKAIEIAxBBHRqIgwpAwghGCAMKQMAIRkMAQsgCCAIKAIEIg1BAWoiETYCBCATKAIEIAxBBHRqIgwpAwghGCAMKQMAIRkgCCANNgIEIBENACAIIAgoAgAoAggRAAAgCBAJCyAaIBggGXxCAn8iGCAYQj+HIhmFIBl9IBggBBsiGFMiDQ0BIBggGlMNASALQQFqIgsgEEcNAAsLAkAgCEUNACAIIAgoAgQiBEEBazYCBCAEDQAgCCAIKAIAKAIIEQAAIAgQCQsCQCAHRQ0AIAcgBygCBCIEQQFrNgIEIAQNACAHIAcoAgAoAggRAAAgBxAJCwJAIAhFDQAgCCAIKAIEIgRBAWs2AgQgBA0AIAggCCgCACgCCBEAACAIEAkLAkAgB0UNACAHIAcoAgQiBEEBazYCBCAEDQAgByAHKAIAKAIIEQAAIAcQCQsgBkEIaiEEIA0NAANAIAVBCGsiBSgCACEPIAVBBGooAgAiCARAIAggCCgCBEEBajYCBAsgCigCACETIAooAgQiDARAIAwgDCgCBEEBajYCBAsgCARAIAggCCgCBEEBajYCBAsgDARAIAwgDCgCBEEBajYCBAsCQCACKAIIIhBBAEwEQEEAIQ0MAQsgAi0AACEHIAIoAgQhFEEAIQsDQCALIBRqIBBvIQ0CQCAIRQRAIA8oAgQgDUEEdGoiESkDCCEYIBEpAwAhGQwBCyAIIAgoAgQiEUEBaiIVNgIEIA8oAgQgDUEEdGoiFykDCCEYIBcpAwAhGSAIIBE2AgQgFQ0AIAggCCgCACgCCBEAACAIEAkLIBggGXxCAn8iGCAYQj+HIhmFIBl9IBggBxshGgJAIAxFBEAgEygCBCANQQR0aiINKQMIIRggDSkDACEZDAELIAwgDCgCBCIRQQFqIhU2AgQgEygCBCANQQR0aiINKQMIIRggDSkDACEZIAwgETYCBCAVDQAgDCAMKAIAKAIIEQAAIAwQCQsgGiAYIBl8QgJ/IhggGEI/hyIZhSAZfSAYIAcbIhhTIg0NASAYIBpTDQEgC0EBaiILIBBHDQALCwJAIAxFDQAgDCAMKAIEIgtBAWs2AgQgCw0AIAwgDCgCACgCCBEAACAMEAkLAkAgCEUNACAIIAgoAgQiC0EBazYCBCALDQAgCCAIKAIAKAIIEQAAIAgQCQsCQCAMRQ0AIAwgDCgCBCILQQFrNgIEIAsNACAMIAwoAgAoAggRAAAgDBAJCwJAIAhFDQAgCCAIKAIEIgtBAWs2AgQgCw0AIAggCCgCACgCCBEAACAIEAkLIA1FDQALIAUgBkkEfyAGBSAGKAIAIQsgBiAFKAIANgIAIAUgCzYCACAGKAIEIQsgBiAFKAIENgIEIAUgCzYCBCAFIAogBiAKRhshCiAOQQFqIQ4MAQsLIQQLAkAgBCAKRg0AIAooAgAhCyAKKAIEIgUEQCAFIAUoAgRBAWo2AgQLIAQoAgAhByAEKAIEIgYEQCAGIAYoAgRBAWo2AgQLIAkgBTYCbCAJIAs2AmggBQRAIAUgBSgCBEEBajYCBAsgCSAGNgJkIAkgBzYCYCAGBEAgBiAGKAIEQQFqNgIECyACLQAAIQsgAigCCCEHIAIoAgQhCCAJIAkpA2g3AwggCSAJKQNgNwMAIAlBCGogCSAIIAcgCxAaIQsCQCAGRQ0AIAYgBigCBCIHQQFrNgIEIAcNACAGIAYoAgAoAggRAAAgBhAJCwJAIAVFDQAgBSAFKAIEIgZBAWs2AgQgBg0AIAUgBSgCACgCCBEAACAFEAkLIAtFDQAgBCgCACEFIAQgCigCADYCACAKIAU2AgAgBCgCBCEFIAQgCigCBDYCBCAKIAU2AgQgDkEBaiEOCyAORQRAIAAgBCACEG8hBiAEQQhqIgogASACEG8EQCAEIQEgBkUNBgwEC0ECIAYNAhoLIAQgAGsgASAEa0gEQCAAIAQgAiADEKABIARBCGohAAwECyAEQQhqIAEgAiADEKABIAQhAQwECyAEIBIiBUYNAQN/IAQhCiAAKAIAIQwgACgCBCIGBEAgBiAGKAIEQQFqNgIECyAKKAIAIQ4gCigCBCIHBEAgByAHKAIEQQFqNgIECyAGBEAgBiAGKAIEQQFqNgIECyAHBEAgByAHKAIEQQFqNgIECwJAIAIoAggiD0EATARAQQAhDQwBCyACLQAAIQQgAigCBCETQQAhCwNAIAsgE2ogD28hCAJAIAZFBEAgDCgCBCAIQQR0aiINKQMIIRggDSkDACEZDAELIAYgBigCBCINQQFqIhA2AgQgDCgCBCAIQQR0aiIUKQMIIRggFCkDACEZIAYgDTYCBCAQDQAgBiAGKAIAKAIIEQAAIAYQCQsgGCAZfEICfyIYIBhCP4ciGYUgGX0gGCAEGyEaAkAgB0UEQCAOKAIEIAhBBHRqIggpAwghGCAIKQMAIRkMAQsgByAHKAIEIg1BAWoiEDYCBCAOKAIEIAhBBHRqIggpAwghGCAIKQMAIRkgByANNgIEIBANACAHIAcoAgAoAggRAAAgBxAJCyAaIBggGXxCAn8iGCAYQj+HIhmFIBl9IBggBBsiGFMiDQ0BIBggGlMNASALQQFqIgsgD0cNAAsLAkAgB0UNACAHIAcoAgQiBEEBazYCBCAEDQAgByAHKAIAKAIIEQAAIAcQCQsCQCAGRQ0AIAYgBigCBCIEQQFrNgIEIAQNACAGIAYoAgAoAggRAAAgBhAJCwJAIAdFDQAgByAHKAIEIgRBAWs2AgQgBA0AIAcgBygCACgCCBEAACAHEAkLAkAgBkUNACAGIAYoAgQiBEEBazYCBCAEDQAgBiAGKAIAKAIIEQAAIAYQCQsgCkEIaiEEIA1FDQADQCAAKAIAIQ4gACgCBCIHBEAgByAHKAIEQQFqNgIECyAFQQhrIgUoAgAhDyAFQQRqKAIAIggEQCAIIAgoAgRBAWo2AgQLIAcEQCAHIAcoAgRBAWo2AgQLIAgEQCAIIAgoAgRBAWo2AgQLAkAgAigCCCITQQBMBEBBACENDAELIAItAAAhBiACKAIEIRBBACELA0AgCyAQaiATbyEMAkAgB0UEQCAOKAIEIAxBBHRqIg0pAwghGCANKQMAIRkMAQsgByAHKAIEIg1BAWoiFDYCBCAOKAIEIAxBBHRqIhEpAwghGCARKQMAIRkgByANNgIEIBQNACAHIAcoAgAoAggRAAAgBxAJCyAYIBl8QgJ/IhggGEI/hyIZhSAZfSAYIAYbIRoCQCAIRQRAIA8oAgQgDEEEdGoiDCkDCCEYIAwpAwAhGQwBCyAIIAgoAgQiDUEBaiIUNgIEIA8oAgQgDEEEdGoiDCkDCCEYIAwpAwAhGSAIIA02AgQgFA0AIAggCCgCACgCCBEAACAIEAkLIBogGCAZfEICfyIYIBhCP4ciGYUgGX0gGCAGGyIYUyINDQEgGCAaUw0BIAtBAWoiCyATRw0ACwsCQCAIRQ0AIAggCCgCBCIGQQFrNgIEIAYNACAIIAgoAgAoAggRAAAgCBAJCwJAIAdFDQAgByAHKAIEIgZBAWs2AgQgBg0AIAcgBygCACgCCBEAACAHEAkLAkAgCEUNACAIIAgoAgQiBkEBazYCBCAGDQAgCCAIKAIAKAIIEQAAIAgQCQsCQCAHRQ0AIAcgBygCBCIGQQFrNgIEIAYNACAHIAcoAgAoAggRAAAgBxAJCyANDQALIAUgCk0Ef0EEBSAKKAIAIQYgCiAFKAIANgIAIAUgBjYCACAKKAIEIQYgCiAFKAIENgIEIAUgBjYCBAwBCwsLIQUgCiEAIAVBBEYNASAFQQJGDQELCwsgCUHwAGokAAuKBQEIfyACIAFrIgpBA3UiCCAAKAIIIgUgACgCACIEa0EDdU0EQCABIAEgACgCBCAEayIDaiIJIAIgCCADQQN1IgpLGyIGRwRAA0AgASgCACEDIAEoAgQiBQRAIAUgBSgCBEEBajYCBAsgBCADNgIAIAQoAgQhByAEIAU2AgQCQCAHRQ0AIAcgBygCBCIDQQFrNgIEIAMNACAHIAcoAgAoAggRAAAgBxAJCyAEQQhqIQQgAUEIaiIBIAZHDQALCyAAKAIEIQEgCCAKSwRAIAIgBkcEQANAIAEgCSgCADYCACABIAkoAgQiAzYCBCADBEAgAyADKAIEQQFqNgIECyABQQhqIQEgCUEIaiIJIAJHDQALCyAAIAE2AgQPCyABIARHBEADQAJAIAFBCGsiASgCBCIDRQ0AIAMgAygCBCICQQFrNgIEIAINACADIAMoAgAoAggRAAAgAxAJCyABIARHDQALCyAAIAQ2AgQPCyAEBEAgACgCBCIFIAQiA0cEQANAAkAgBUEIayIFKAIEIgZFDQAgBiAGKAIEIgNBAWs2AgQgAw0AIAYgBigCACgCCBEAACAGEAkLIAQgBUcNAAsgACgCACEDCyAAIAQ2AgQgAxAKIABBADYCCCAAQgA3AgBBACEFCwJAIApBAEgNAEH/////ASAFQQJ1IgMgCCADIAhLGyAFQfj///8HTxsiA0GAgICAAk8NACAAIANBA3QiAxALIgQ2AgAgACAENgIEIAAgAyAEajYCCCABIAJHBEADQCAEIAEoAgA2AgAgBCABKAIEIgM2AgQgAwRAIAMgAygCBEEBajYCBAsgBEEIaiEEIAFBCGoiASACRw0ACwsgACAENgIEDwsQDwAL1CgCFH8DfiMAQfAAayIJJAADQCABQQRrIRYgAUEIayESA0ACQAJAAkACQAJAAkAgASAAayIEQQN1IgUOBgUFAAECAwQLIAFBCGsiBSgCACEEIAUoAgQiAQRAIAEgASgCBEEBajYCBAsgACgCACEKIAAoAgQiAwRAIAMgAygCBEEBajYCBAsgCSABNgJsIAkgBDYCaCABBEAgASABKAIEQQFqNgIECyAJIAM2AmQgCSAKNgJgIAMEQCADIAMoAgRBAWo2AgQLIAItAAAhBCACKAIIIQogAigCBCECIAkgCSkDaDcDWCAJIAkpA2A3A1AgCUHYAGogCUHQAGogAiAKIAQQGiECAkAgA0UNACADIAMoAgQiBEEBazYCBCAEDQAgAyADKAIAKAIIEQAAIAMQCQsCQCABRQ0AIAEgASgCBCIDQQFrNgIEIAMNACABIAEoAgAoAggRAAAgARAJCyACRQ0EIAAoAgAhASAAIAUoAgA2AgAgBSABNgIAIAAoAgQhASAAIAUoAgQ2AgQgBSABNgIEDAQLIAAgAEEIaiABQQhrIAIQOBoMAwsgACAAQQhqIABBEGogAUEIayACEHEaDAILIAAgAEEIaiAAQRBqIABBGGogAUEIayACEFcaDAELIARBN0wEQCAAIAEgAhCDAgwBCyADRQRAIAAgAUYNASAFQQJrQQF2IQsDQCAAIAIgBSAAIAsiA0EDdGoQcCALQQFrIQsgAw0ACyAEQQN2IQUDQCAAKAIAIQMgACABQQhrIgEoAgA2AgAgASADNgIAIAAoAgQhAyAAIAFBBGooAgA2AgQgASADNgIEIAAgAiAFQQFrIgMgABBwIAVBAkshBCADIQUgBA0ACwwBCyAAIAVBAXZBA3RqIQoCfyAEQbk+TwRAIAAgACAFQQF0QXhxIgVqIAogBSAKaiASIAIQVwwBCyAAIAogEiACEDgLIQ4gACgCACEGIAAoAgQiBQRAIAUgBSgCBEEBajYCBAsgCigCACELIAooAgQiBARAIAQgBCgCBEEBajYCBAsgCSAFNgJsIAkgBjYCaCAFBEAgBSAFKAIEQQFqNgIECyAJIAQ2AmQgCSALNgJgIAQEQCAEIAQoAgRBAWo2AgQLIAItAAAhBiACKAIIIQsgAigCBCEHIAkgCSkDaDcDSCAJIAkpA2A3A0AgCUHIAGogCUFAayAHIAsgBhAaIQYCQCAERQ0AIAQgBCgCBCILQQFrNgIEIAsNACAEIAQoAgAoAggRAAAgBBAJCwJAIAVFDQAgBSAFKAIEIgRBAWs2AgQgBA0AIAUgBSgCACgCCBEAACAFEAkLIANBAWshAwJ/AkACQCAGBEAgEiEFDAELIBIhBQNAIAUiBEEIayIFIABGBEAgACgCACEKIAAoAgQiBQRAIAUgBSgCBEEBajYCBAsgEigCACEGIBYoAgAiBARAIAQgBCgCBEEBajYCBAsgCSAFNgJsIAkgCjYCaCAFBEAgBSAFKAIEQQFqNgIECyAJIAQ2AmQgCSAGNgJgIAQEQCAEIAQoAgRBAWo2AgQLIAItAAAhCiACKAIIIQYgAigCBCELIAkgCSkDaDcDKCAJIAkpA2A3AyAgCUEoaiAJQSBqIAsgBiAKEBohCgJAIARFDQAgBCAEKAIEIgZBAWs2AgQgBg0AIAQgBCgCACgCCBEAACAEEAkLAkAgBUUNACAFIAUoAgQiBEEBazYCBCAEDQAgBSAFKAIAKAIIEQAAIAUQCQsgAEEIaiEEIAoNAyAEIBJGDQUDQCAAKAIAIQYgACgCBCIFBEAgBSAFKAIEQQFqNgIECyAEKAIAIQsgBCgCBCIKBEAgCiAKKAIEQQFqNgIECyAJIAU2AmwgCSAGNgJoIAUEQCAFIAUoAgRBAWo2AgQLIAkgCjYCZCAJIAs2AmAgCgRAIAogCigCBEEBajYCBAsgAi0AACEGIAIoAgghCyACKAIEIQcgCSAJKQNoNwMYIAkgCSkDYDcDECAJQRhqIAlBEGogByALIAYQGiEGAkAgCkUNACAKIAooAgQiC0EBazYCBCALDQAgCiAKKAIAKAIIEQAAIAoQCQsCQCAFRQ0AIAUgBSgCBCIKQQFrNgIEIAoNACAFIAUoAgAoAggRAAAgBRAJCyAGBEAgBCgCACEFIAQgEigCADYCACASIAU2AgAgBCgCBCEFIAQgFigCADYCBCAWIAU2AgAgBEEIaiEEDAULIBIgBEEIaiIERw0ACwwFCyAFKAIAIQcgBEEEayILKAIAIgQEQCAEIAQoAgRBAWo2AgQLIAooAgAhCCAKKAIEIgYEQCAGIAYoAgRBAWo2AgQLIAkgBDYCbCAJIAc2AmggBARAIAQgBCgCBEEBajYCBAsgCSAGNgJkIAkgCDYCYCAGBEAgBiAGKAIEQQFqNgIECyACLQAAIQcgAigCCCEIIAIoAgQhDCAJIAkpA2g3AzggCSAJKQNgNwMwIAlBOGogCUEwaiAMIAggBxAaIQcCQCAGRQ0AIAYgBigCBCIIQQFrNgIEIAgNACAGIAYoAgAoAggRAAAgBhAJCwJAIARFDQAgBCAEKAIEIgZBAWs2AgQgBg0AIAQgBCgCACgCCBEAACAEEAkLIAdFDQALIAAoAgAhBCAAIAUoAgA2AgAgBSAENgIAIAAoAgQhBCAAIAsoAgA2AgQgCyAENgIAIA5BAWohDgsgBSAAQQhqIgRLBEADfyAEIgYoAgAhDyAEKAIEIgcEQCAHIAcoAgRBAWo2AgQLIAooAgAhEyAKKAIEIggEQCAIIAgoAgRBAWo2AgQLIAcEQCAHIAcoAgRBAWo2AgQLIAgEQCAIIAgoAgRBAWo2AgQLAkAgAigCCCIQQQBMBEBBACENDAELIAItAAAhBCACKAIEIRRBACELA0AgCyAUaiAQbyEMAkAgB0UEQCAPKAIEIAxBBHRqIg0pAwghGCANKQMAIRkMAQsgByAHKAIEIg1BAWoiETYCBCAPKAIEIAxBBHRqIhUpAwghGCAVKQMAIRkgByANNgIEIBENACAHIAcoAgAoAggRAAAgBxAJCyAYIBl8QgJ/IhggGEI/hyIZhSAZfSAYIAQbIRoCQCAIRQRAIBMoAgQgDEEEdGoiDCkDCCEYIAwpAwAhGQwBCyAIIAgoAgQiDUEBaiIRNgIEIBMoAgQgDEEEdGoiDCkDCCEYIAwpAwAhGSAIIA02AgQgEQ0AIAggCCgCACgCCBEAACAIEAkLIBogGCAZfEICfyIYIBhCP4ciGYUgGX0gGCAEGyIYUyINDQEgGCAaUw0BIAtBAWoiCyAQRw0ACwsCQCAIRQ0AIAggCCgCBCIEQQFrNgIEIAQNACAIIAgoAgAoAggRAAAgCBAJCwJAIAdFDQAgByAHKAIEIgRBAWs2AgQgBA0AIAcgBygCACgCCBEAACAHEAkLAkAgCEUNACAIIAgoAgQiBEEBazYCBCAEDQAgCCAIKAIAKAIIEQAAIAgQCQsCQCAHRQ0AIAcgBygCBCIEQQFrNgIEIAQNACAHIAcoAgAoAggRAAAgBxAJCyAGQQhqIQQgDQ0AA0AgBUEIayIFKAIAIQ8gBUEEaigCACIIBEAgCCAIKAIEQQFqNgIECyAKKAIAIRMgCigCBCIMBEAgDCAMKAIEQQFqNgIECyAIBEAgCCAIKAIEQQFqNgIECyAMBEAgDCAMKAIEQQFqNgIECwJAIAIoAggiEEEATARAQQAhDQwBCyACLQAAIQcgAigCBCEUQQAhCwNAIAsgFGogEG8hDQJAIAhFBEAgDygCBCANQQR0aiIRKQMIIRggESkDACEZDAELIAggCCgCBCIRQQFqIhU2AgQgDygCBCANQQR0aiIXKQMIIRggFykDACEZIAggETYCBCAVDQAgCCAIKAIAKAIIEQAAIAgQCQsgGCAZfEICfyIYIBhCP4ciGYUgGX0gGCAHGyEaAkAgDEUEQCATKAIEIA1BBHRqIg0pAwghGCANKQMAIRkMAQsgDCAMKAIEIhFBAWoiFTYCBCATKAIEIA1BBHRqIg0pAwghGCANKQMAIRkgDCARNgIEIBUNACAMIAwoAgAoAggRAAAgDBAJCyAaIBggGXxCAn8iGCAYQj+HIhmFIBl9IBggBxsiGFMiDQ0BIBggGlMNASALQQFqIgsgEEcNAAsLAkAgDEUNACAMIAwoAgQiC0EBazYCBCALDQAgDCAMKAIAKAIIEQAAIAwQCQsCQCAIRQ0AIAggCCgCBCILQQFrNgIEIAsNACAIIAgoAgAoAggRAAAgCBAJCwJAIAxFDQAgDCAMKAIEIgtBAWs2AgQgCw0AIAwgDCgCACgCCBEAACAMEAkLAkAgCEUNACAIIAgoAgQiC0EBazYCBCALDQAgCCAIKAIAKAIIEQAAIAgQCQsgDUUNAAsgBSAGSQR/IAYFIAYoAgAhCyAGIAUoAgA2AgAgBSALNgIAIAYoAgQhCyAGIAUoAgQ2AgQgBSALNgIEIAUgCiAGIApGGyEKIA5BAWohDgwBCwshBAsCQCAEIApGDQAgCigCACELIAooAgQiBQRAIAUgBSgCBEEBajYCBAsgBCgCACEHIAQoAgQiBgRAIAYgBigCBEEBajYCBAsgCSAFNgJsIAkgCzYCaCAFBEAgBSAFKAIEQQFqNgIECyAJIAY2AmQgCSAHNgJgIAYEQCAGIAYoAgRBAWo2AgQLIAItAAAhCyACKAIIIQcgAigCBCEIIAkgCSkDaDcDCCAJIAkpA2A3AwAgCUEIaiAJIAggByALEBohCwJAIAZFDQAgBiAGKAIEIgdBAWs2AgQgBw0AIAYgBigCACgCCBEAACAGEAkLAkAgBUUNACAFIAUoAgQiBkEBazYCBCAGDQAgBSAFKAIAKAIIEQAAIAUQCQsgC0UNACAEKAIAIQUgBCAKKAIANgIAIAogBTYCACAEKAIEIQUgBCAKKAIENgIEIAogBTYCBCAOQQFqIQ4LIA5FBEAgACAEIAIQbyEGIARBCGoiCiABIAIQbwRAIAQhASAGRQ0GDAQLQQIgBg0CGgsgBCAAayABIARrSARAIAAgBCACIAMQogEgBEEIaiEADAQLIARBCGogASACIAMQogEgBCEBDAQLIAQgEiIFRg0BA38gBCEKIAAoAgAhDCAAKAIEIgYEQCAGIAYoAgRBAWo2AgQLIAooAgAhDiAKKAIEIgcEQCAHIAcoAgRBAWo2AgQLIAYEQCAGIAYoAgRBAWo2AgQLIAcEQCAHIAcoAgRBAWo2AgQLAkAgAigCCCIPQQBMBEBBACENDAELIAItAAAhBCACKAIEIRNBACELA0AgCyATaiAPbyEIAkAgBkUEQCAMKAIEIAhBBHRqIg0pAwghGCANKQMAIRkMAQsgBiAGKAIEIg1BAWoiEDYCBCAMKAIEIAhBBHRqIhQpAwghGCAUKQMAIRkgBiANNgIEIBANACAGIAYoAgAoAggRAAAgBhAJCyAYIBl8QgJ/IhggGEI/hyIZhSAZfSAYIAQbIRoCQCAHRQRAIA4oAgQgCEEEdGoiCCkDCCEYIAgpAwAhGQwBCyAHIAcoAgQiDUEBaiIQNgIEIA4oAgQgCEEEdGoiCCkDCCEYIAgpAwAhGSAHIA02AgQgEA0AIAcgBygCACgCCBEAACAHEAkLIBogGCAZfEICfyIYIBhCP4ciGYUgGX0gGCAEGyIYUyINDQEgGCAaUw0BIAtBAWoiCyAPRw0ACwsCQCAHRQ0AIAcgBygCBCIEQQFrNgIEIAQNACAHIAcoAgAoAggRAAAgBxAJCwJAIAZFDQAgBiAGKAIEIgRBAWs2AgQgBA0AIAYgBigCACgCCBEAACAGEAkLAkAgB0UNACAHIAcoAgQiBEEBazYCBCAEDQAgByAHKAIAKAIIEQAAIAcQCQsCQCAGRQ0AIAYgBigCBCIEQQFrNgIEIAQNACAGIAYoAgAoAggRAAAgBhAJCyAKQQhqIQQgDUUNAANAIAAoAgAhDiAAKAIEIgcEQCAHIAcoAgRBAWo2AgQLIAVBCGsiBSgCACEPIAVBBGooAgAiCARAIAggCCgCBEEBajYCBAsgBwRAIAcgBygCBEEBajYCBAsgCARAIAggCCgCBEEBajYCBAsCQCACKAIIIhNBAEwEQEEAIQ0MAQsgAi0AACEGIAIoAgQhEEEAIQsDQCALIBBqIBNvIQwCQCAHRQRAIA4oAgQgDEEEdGoiDSkDCCEYIA0pAwAhGQwBCyAHIAcoAgQiDUEBaiIUNgIEIA4oAgQgDEEEdGoiESkDCCEYIBEpAwAhGSAHIA02AgQgFA0AIAcgBygCACgCCBEAACAHEAkLIBggGXxCAn8iGCAYQj+HIhmFIBl9IBggBhshGgJAIAhFBEAgDygCBCAMQQR0aiIMKQMIIRggDCkDACEZDAELIAggCCgCBCINQQFqIhQ2AgQgDygCBCAMQQR0aiIMKQMIIRggDCkDACEZIAggDTYCBCAUDQAgCCAIKAIAKAIIEQAAIAgQCQsgGiAYIBl8QgJ/IhggGEI/hyIZhSAZfSAYIAYbIhhTIg0NASAYIBpTDQEgC0EBaiILIBNHDQALCwJAIAhFDQAgCCAIKAIEIgZBAWs2AgQgBg0AIAggCCgCACgCCBEAACAIEAkLAkAgB0UNACAHIAcoAgQiBkEBazYCBCAGDQAgByAHKAIAKAIIEQAAIAcQCQsCQCAIRQ0AIAggCCgCBCIGQQFrNgIEIAYNACAIIAgoAgAoAggRAAAgCBAJCwJAIAdFDQAgByAHKAIEIgZBAWs2AgQgBg0AIAcgBygCACgCCBEAACAHEAkLIA0NAAsgBSAKTQR/QQQFIAooAgAhBiAKIAUoAgA2AgAgBSAGNgIAIAooAgQhBiAKIAUoAgQ2AgQgBSAGNgIEDAELCwshBSAKIQAgBUEERg0BIAVBAkYNAQsLCyAJQfAAaiQAC8QsAhJ/A34jAEHAAWsiByQAA0AgAUEEayESIAFBCGshFQNAAkACQAJAAkACQAJAIAEgAGsiCEEDdSIFDgYFBQABAgMECyAHIAFBCGsiAygCADYCuAEgByADKAIEIgE2ArwBIAEEQCABIAEoAgRBAWo2AgQLIAcgACgCADYCsAEgByAAKAIEIgE2ArQBIAEEQCABIAEoAgRBAWo2AgQLIAcgBykDuAE3A1ggByAHKQOwATcDUCACIAdB2ABqIAdB0ABqEB1FDQQgACgCACEBIAAgAygCADYCACADIAE2AgAgACgCBCEBIAAgAygCBDYCBCADIAE2AgQMBAsgACAAQQhqIAFBCGsgAhBKGgwDCyAAIABBCGogAEEQaiABQQhrIAIQngEaDAILIAAgAEEIaiAAQRBqIABBGGogAUEIayACEJ0BGgwBCyAIQTdMBEAjAEEgayIGJAAgACIDIABBCGogAEEQaiIEIAIiCBBKGiAAQRhqIgIgASIVRwRAA0AgBCEBIAYgAiIEKAIANgIYIAYgBCgCBCIANgIcIAAEQCAAIAAoAgRBAWo2AgQLIAYgASgCADYCECAGIAEoAgQiADYCFCAABEAgACAAKAIEQQFqNgIECyAGIAYpAxg3AwggBiAGKQMQNwMAAkAgCCAGQQhqIAYQHUUNACAEKAIEIQkgBCgCACETIARCADcCAANAIAEiACkCACEWIABCADcCACACKAIEIQUgAiAWNwIAAkAgBUUNACAFIAUoAgQiAUEBazYCBCABDQAgBSAFKAIAKAIIEQAAIAUQCQsCQCAAIANGBEAgAyEADAELIAkEQCAJIAkoAgRBAWo2AgQLIABBCGsiASgCACERIAEoAgQiEgRAIBIgEigCBEEBajYCBAsgCQRAIAkgCSgCBEEBajYCBAsCQCAIKAIAIgJBAEwEQEIAIRcMAQsgAkEBcSEOIBMoAgQhDwJAIAJBAUYEQEEAIQJCACEXDAELIAJBfnEhDUEAIQJCACEXQQAhCgNAIA8gAkEEdCILQRByaiIFKQMIIAUpAwB8QgJ/IhYgFkI/hyIWhSAWfSAXIAsgD2oiBSkDCCAFKQMAfEICfyIWIBZCP4ciFoUgFn18fCEXIAJBAmohAiAKQQJqIgogDUcNAAsLIA5FDQAgFyAPIAJBBHRqIgIpAwggAikDAHxCAn8iFiAWQj+HIhaFIBZ9fCEXCwJAIAlFDQAgCSAJKAIEIgJBAWs2AgQgAg0AIAkgCSgCACgCCBEAACAJEAkLIBIEQCASIBIoAgRBAWo2AgQLAkAgCCgCACICQQBMBEBCACEYDAELIAJBAXEhDiARKAIEIRECQCACQQFGBEBBACECQgAhGAwBCyACQX5xIQ1BACECQgAhGEEAIQoDQCARIAJBBHQiC0EQcmoiBSkDCCAFKQMAfEICfyIWIBZCP4ciFoUgFn0gGCALIBFqIgUpAwggBSkDAHxCAn8iFiAWQj+HIhaFIBZ9fHwhGCACQQJqIQIgCkECaiIKIA1HDQALCyAORQ0AIBggESACQQR0aiICKQMIIAIpAwB8QgJ/IhYgFkI/hyIWhSAWfXwhGAsCQCASRQ0AIBIgEigCBCICQQFrNgIEIAJFBEAgEiASKAIAKAIIEQAAIBIQCQsgEiASKAIEIgJBAWs2AgQgAg0AIBIgEigCACgCCBEAACASEAkLAkAgCUUNACAJIAkoAgQiAkEBazYCBCACDQAgCSAJKAIAKAIIEQAAIAkQCQsgACECIBcgGFMNAQsLIAAgEzYCACAAKAIEIQEgACAJNgIEIAFFDQAgASABKAIEIgBBAWs2AgQgAA0AIAEgASgCACgCCBEAACABEAkLIARBCGoiAiAVRw0ACwsgBkEgaiQADAELIANFBEAgACABRg0BIAVBAmtBAXYhAwNAIAAgAiAFIAAgAyIEQQN0ahCGAiAEQQFrIQMgBA0ACyAIQQN2IQUDQCAAKAIAIQMgACABQQhrIgEoAgA2AgAgASADNgIAIAAoAgQhAyAAIAEoAgQ2AgQgASADNgIEIAAgAiAFQQFrIgMgABCGAiAFQQJLIQQgAyEFIAQNAAsMAQsgACAFQQF2QQN0aiELAn8gCEG5Pk8EQCAAIAAgBUEBdEF4cSIEaiALIAQgC2ogFSACEJ0BDAELIAAgCyAVIAIQSgshCSAHIAAoAgA2AqgBIAcgACgCBCIENgKsASAEBEAgBCAEKAIEQQFqNgIECyAHIAsoAgA2AqABIAcgCygCBCIENgKkASAEBEAgBCAEKAIEQQFqNgIECyADQQFrIQMgByAHKQOoATcDSCAHIAcpA6ABNwNAAn8CQAJAIAIgB0HIAGogB0FAaxAdBEAgFSEIDAELIBUhBQNAIAVBCGsiCCAARgRAIAcgACgCADYCmAEgByAAKAIEIgQ2ApwBIAQEQCAEIAQoAgRBAWo2AgQLIAcgFSgCADYCkAEgByASKAIAIgQ2ApQBIAQEQCAEIAQoAgRBAWo2AgQLIABBCGohBCAHIAcpA5gBNwMoIAcgBykDkAE3AyAgAiAHQShqIAdBIGoQHQ0DIAQgFUYNBQNAIAcgACgCADYCiAEgByAAKAIEIgg2AowBIAgEQCAIIAgoAgRBAWo2AgQLIAcgBCgCADYCgAEgByAEKAIEIgg2AoQBIAgEQCAIIAgoAgRBAWo2AgQLIAcgBykDiAE3AxggByAHKQOAATcDECACIAdBGGogB0EQahAdBEAgBCgCACEIIAQgFSgCADYCACAVIAg2AgAgBCgCBCEIIAQgEigCADYCBCASIAg2AgAgBEEIaiEEDAULIBUgBEEIaiIERw0ACwwFCyAHIAgoAgA2AnggByAFQQRrIg0oAgAiBDYCfCAEBEAgBCAEKAIEQQFqNgIECyAHIAsoAgA2AnAgByALKAIEIgQ2AnQgBARAIAQgBCgCBEEBajYCBAsgByAHKQN4NwM4IAcgBykDcDcDMCAIIQUgAiAHQThqIAdBMGoQHUUNAAsgACgCACEEIAAgCCgCADYCACAIIAQ2AgAgACgCBCEEIAAgDSgCADYCBCANIAQ2AgAgCUEBaiEJCyAIIABBCGoiBEsEQAN/IAQiDSgCACEEIA0oAgQiDARAIAwgDCgCBEEBajYCBAsgCygCACEPIAsoAgQiBgRAIAYgBigCBEEBajYCBAsgDARAIAwgDCgCBEEBajYCBAsCQCACKAIAIgVBAEwEQEIAIRcMAQsgBUEBcSETIAQoAgQhCgJAIAVBAUYEQEEAIQVCACEXDAELIAVBfnEhEUEAIQVCACEXQQAhEANAIAogBUEEdCIOQRByaiIEKQMIIAQpAwB8QgJ/IhYgFkI/hyIWhSAWfSAXIAogDmoiBCkDCCAEKQMAfEICfyIWIBZCP4ciFoUgFn18fCEXIAVBAmohBSAQQQJqIhAgEUcNAAsLIBNFDQAgFyAKIAVBBHRqIgQpAwggBCkDAHxCAn8iFiAWQj+HIhaFIBZ9fCEXCwJAIAxFDQAgDCAMKAIEIgRBAWs2AgQgBA0AIAwgDCgCACgCCBEAACAMEAkLIAYEQCAGIAYoAgRBAWo2AgQLAkAgAigCACIEQQBMBEBCACEYDAELIARBAXEhEyAPKAIEIQ8CQCAEQQFGBEBBACEFQgAhGAwBCyAEQX5xIRFBACEFQgAhGEEAIRADQCAPIAVBBHQiDkEQcmoiBCkDCCAEKQMAfEICfyIWIBZCP4ciFoUgFn0gGCAOIA9qIgQpAwggBCkDAHxCAn8iFiAWQj+HIhaFIBZ9fHwhGCAFQQJqIQUgEEECaiIQIBFHDQALCyATRQ0AIBggDyAFQQR0aiIEKQMIIAQpAwB8QgJ/IhYgFkI/hyIWhSAWfXwhGAsCQCAGRQ0AIAYgBigCBCIEQQFrNgIEIARFBEAgBiAGKAIAKAIIEQAAIAYQCQsgBiAGKAIEIgRBAWs2AgQgBA0AIAYgBigCACgCCBEAACAGEAkLAkAgDEUNACAMIAwoAgQiBEEBazYCBCAEDQAgDCAMKAIAKAIIEQAAIAwQCQsgDUEIaiEEIBcgGFMNAANAIAhBCGsiCCgCACEFIAgoAgQiFARAIBQgFCgCBEEBajYCBAsgCygCACEKIAsoAgQiDARAIAwgDCgCBEEBajYCBAsgFARAIBQgFCgCBEEBajYCBAsCQCACKAIAIg5BAEwEQEIAIRcMAQsgDkEBcSEPIAUoAgQhBgJAIA5BAUYEQEEAIQVCACEXDAELIA5BfnEhE0EAIQVCACEXQQAhEANAIAYgBUEEdCIRQRByaiIOKQMIIA4pAwB8QgJ/IhYgFkI/hyIWhSAWfSAXIAYgEWoiDikDCCAOKQMAfEICfyIWIBZCP4ciFoUgFn18fCEXIAVBAmohBSAQQQJqIhAgE0cNAAsLIA9FDQAgFyAGIAVBBHRqIgUpAwggBSkDAHxCAn8iFiAWQj+HIhaFIBZ9fCEXCwJAIBRFDQAgFCAUKAIEIgVBAWs2AgQgBQ0AIBQgFCgCACgCCBEAACAUEAkLIAwEQCAMIAwoAgRBAWo2AgQLAkAgAigCACIFQQBMBEBCACEYDAELIAVBAXEhDyAKKAIEIQoCQCAFQQFGBEBBACEFQgAhGAwBCyAFQX5xIRNBACEFQgAhGEEAIRADQCAKIAVBBHQiEUEQcmoiDikDCCAOKQMAfEICfyIWIBZCP4ciFoUgFn0gGCAKIBFqIg4pAwggDikDAHxCAn8iFiAWQj+HIhaFIBZ9fHwhGCAFQQJqIQUgEEECaiIQIBNHDQALCyAPRQ0AIBggCiAFQQR0aiIFKQMIIAUpAwB8QgJ/IhYgFkI/hyIWhSAWfXwhGAsCQCAMRQ0AIAwgDCgCBCIFQQFrNgIEIAVFBEAgDCAMKAIAKAIIEQAAIAwQCQsgDCAMKAIEIgVBAWs2AgQgBQ0AIAwgDCgCACgCCBEAACAMEAkLAkAgFEUNACAUIBQoAgQiBUEBazYCBCAFDQAgFCAUKAIAKAIIEQAAIBQQCQsgFyAYWQ0ACyAIIA1JBH8gDQUgDSgCACEFIA0gCCgCADYCACAIIAU2AgAgDSgCBCEFIA0gCCgCBDYCBCAIIAU2AgQgCCALIAsgDUYbIQsgCUEBaiEJDAELCyEECwJAIAQgC0YNACAHIAsoAgA2AmggByALKAIEIgg2AmwgCARAIAggCCgCBEEBajYCBAsgByAEKAIANgJgIAcgBCgCBCIINgJkIAgEQCAIIAgoAgRBAWo2AgQLIAcgBykDaDcDCCAHIAcpA2A3AwAgAiAHQQhqIAcQHUUNACAEKAIAIQggBCALKAIANgIAIAsgCDYCACAEKAIEIQggBCALKAIENgIEIAsgCDYCBCAJQQFqIQkLIAlFBEAgACAEIAIQhQIhCCAEQQhqIgsgASACEIUCBEAgBCEBIAhFDQYMBAtBAiAIDQIaCyAEIABrIAEgBGtIBEAgACAEIAIgAxCjASAEQQhqIQAMBAsgBEEIaiABIAIgAxCjASAEIQEMBAsgBCAVIghGDQEDfyAEIQsgACgCACEEIAAoAgQiBgRAIAYgBigCBEEBajYCBAsgCygCACETIAsoAgQiCgRAIAogCigCBEEBajYCBAsgBgRAIAYgBigCBEEBajYCBAsCQCACKAIAIgVBAEwEQEIAIRcMAQsgBUEBcSERIAQoAgQhDwJAIAVBAUYEQEEAIQVCACEXDAELIAVBfnEhDkEAIQVCACEXQQAhEANAIA8gBUEEdCINQRByaiIEKQMIIAQpAwB8QgJ/IhYgFkI/hyIWhSAWfSAXIA0gD2oiBCkDCCAEKQMAfEICfyIWIBZCP4ciFoUgFn18fCEXIAVBAmohBSAQQQJqIhAgDkcNAAsLIBFFDQAgFyAPIAVBBHRqIgQpAwggBCkDAHxCAn8iFiAWQj+HIhaFIBZ9fCEXCwJAIAZFDQAgBiAGKAIEIgRBAWs2AgQgBA0AIAYgBigCACgCCBEAACAGEAkLIAoEQCAKIAooAgRBAWo2AgQLAkAgAigCACIEQQBMBEBCACEYDAELIARBAXEhESATKAIEIRMCQCAEQQFGBEBBACEFQgAhGAwBCyAEQX5xIQ5BACEFQgAhGEEAIRADQCATIAVBBHQiDUEQcmoiBCkDCCAEKQMAfEICfyIWIBZCP4ciFoUgFn0gGCANIBNqIgQpAwggBCkDAHxCAn8iFiAWQj+HIhaFIBZ9fHwhGCAFQQJqIQUgEEECaiIQIA5HDQALCyARRQ0AIBggEyAFQQR0aiIEKQMIIAQpAwB8QgJ/IhYgFkI/hyIWhSAWfXwhGAsCQCAKRQ0AIAogCigCBCIEQQFrNgIEIARFBEAgCiAKKAIAKAIIEQAAIAoQCQsgCiAKKAIEIgRBAWs2AgQgBA0AIAogCigCACgCCBEAACAKEAkLAkAgBkUNACAGIAYoAgQiBEEBazYCBCAEDQAgBiAGKAIAKAIIEQAAIAYQCQsgC0EIaiEEIBcgGFkNAANAIAAoAgAhBSAAKAIEIgkEQCAJIAkoAgRBAWo2AgQLIAhBCGsiCCgCACEPIAgoAgQiBgRAIAYgBigCBEEBajYCBAsgCQRAIAkgCSgCBEEBajYCBAsCQCACKAIAIg1BAEwEQEIAIRcMAQsgDUEBcSETIAUoAgQhCgJAIA1BAUYEQEEAIQVCACEXDAELIA1BfnEhEUEAIQVCACEXQQAhEANAIAogBUEEdCIOQRByaiINKQMIIA0pAwB8QgJ/IhYgFkI/hyIWhSAWfSAXIAogDmoiDSkDCCANKQMAfEICfyIWIBZCP4ciFoUgFn18fCEXIAVBAmohBSAQQQJqIhAgEUcNAAsLIBNFDQAgFyAKIAVBBHRqIgUpAwggBSkDAHxCAn8iFiAWQj+HIhaFIBZ9fCEXCwJAIAlFDQAgCSAJKAIEIgVBAWs2AgQgBQ0AIAkgCSgCACgCCBEAACAJEAkLIAYEQCAGIAYoAgRBAWo2AgQLAkAgAigCACIFQQBMBEBCACEYDAELIAVBAXEhEyAPKAIEIQ8CQCAFQQFGBEBBACEFQgAhGAwBCyAFQX5xIRFBACEFQgAhGEEAIRADQCAPIAVBBHQiDkEQcmoiDSkDCCANKQMAfEICfyIWIBZCP4ciFoUgFn0gGCAOIA9qIg0pAwggDSkDAHxCAn8iFiAWQj+HIhaFIBZ9fHwhGCAFQQJqIQUgEEECaiIQIBFHDQALCyATRQ0AIBggDyAFQQR0aiIFKQMIIAUpAwB8QgJ/IhYgFkI/hyIWhSAWfXwhGAsCQCAGRQ0AIAYgBigCBCIFQQFrNgIEIAVFBEAgBiAGKAIAKAIIEQAAIAYQCQsgBiAGKAIEIgVBAWs2AgQgBQ0AIAYgBigCACgCCBEAACAGEAkLAkAgCUUNACAJIAkoAgQiBUEBazYCBCAFDQAgCSAJKAIAKAIIEQAAIAkQCQsgFyAYUw0ACyAIIAtNBH9BBAUgCygCACEFIAsgCCgCADYCACAIIAU2AgAgCygCBCEFIAsgCCgCBDYCBCAIIAU2AgQMAQsLCyEEIAshACAEQQRGDQEgBEECRg0BCwsLIAdBwAFqJAALqggDD38CfAF+IAJCJoenIgVBEG0iBiABKAI4ayAFIAZBBHRHIAVBAEhxayABKAJEIAJCGoZCJoenIgZBEG0iAyABKAJAayAGIANBBHRHIAZBAEhxayABKAJIIAKnQRR0QRR1IgNBDG0iBCABKAI8ayADIARBDGxHIANBAEhxa2xqbGpBA3QiDyABKAIkaikCACICp0GAgICAeEcEQCAAIAI3AgAPCyADQQRqIRAgA0EMayERIAEoAiwiBEEEQQxBSiAEKAIAIgQgBEFKThsgA0obaikCACICQiCIpyENQf////8HIQRBsIcBIQcCQANAIAcoAgRBBHQgBmohCSAHKAIAQQR0IAVqIQoCQAJAIAEoAggiCARAIAgQFSIIDQELQQAgCiAJEEchCQwBCyABKAIEIAogCRBHIQkgCCAIKAIEIgpBAWs2AgQgCg0AIAggCCgCACgCCBEAACAIEAkLIAlBCGohCEEAIQoCQCAHKAIADQAgBygCBCILRSEKIAsNACAIIBFODQAgACACNwIADAILAkAgCSAQSCILIApyRQ0AIAAgASgCLCIMQQRBDEFKIAwoAgAiDCAMQUpOGyAIShtqKQIAIhQ3AgAgCCAUp04NACAUQoCAgIBwg0KAgICAEFENACALDQIgCiAOciEOCyAJIAQgBCAJShshBCAHQQhqIgdBmIgBRw0AC0QAAAAAAADwvyABKAIQIAW3IAO3RHE9CtejcOU/oiAGtxAYIhJEAAAAAAAA8D+kIBJEAAAAAAAA8L9jGyITAnxEAAAAAAAA8D8gDkEBcUUNABpEAAAAAAAAAIAgBCADa0EIardEAAAAAAAAkD+iIhJEAAAAAAAAAABjDQAaRAAAAAAAAPA/IBJEAAAAAAAA8D9kDQAaRAAAAAAAAPA/IBKhRAAAAAAAAPC/oJoLIhJEmpmZmZmZ8T+iRDMzMzMzM9O/oGQEQCAAIAI3AgAMAQsgEkQ0MzMzMzPzP6JEmpmZmZmZ6b+gIBNmBEAgACANNgIEIABBgIJ+NgIADAELAn8gASgCFCAFQRBtIgcgB0EEdCAFRyAFQQBIcWu3IANBKG0iByAHQShsIANHIANBAEhxayIHtyITRGZmZmZmZvY/oyAGQRBtIgMgA0EEdCAGRyAGQQBIcWu3EBhEAAAAAAAAJECiRAAAAAAAAAhAoyISmUQAAAAAAADgQWMEQCASqgwBC0GAgICAeAshAyAHQShsIAMgEiADt2NrQQNsakEUaiIDIAQgAyAESBshBCAAAn8gA0F2TARAQRwgASgCGCAFQcAAbSIDIANBBnQgBUcgBUEASHFrtyATIAZBwABtIgUgBUEGdCAGRyAGQQBIcWu3EBiZRDMzMzMzM9M/ZA0BGgsgDQs2AgQgACAENgIACyABKAIkIA9qIAApAgA3AgAL3BMBA39BgLOXA0EANgIAQfizlwNBADYCAEHgs5cDQQA2AgBByLOXA0EANgIAQbCzlwNBADYCAEGYs5cDQQA2AgBB4LSXA0IANwIAQdy0lwNB4LSXAzYCAEHItZcDQoCAgIC4nsGaPzcDAEHAtZcDQvOJ1PmLgICAgH83AwBBuLWXA0LzidT5s4ywgrN/NwMAQbC1lwNC44CTmLOewZq/fzcDAEGotZcDQv////fz////vn83AwBBoLWXA0L////38////75/NwMAQZi1lwNC////9/P///8+NwMAQZC1lwNC////9/v///++fzcDAEGItZcDQoCAgIDgpe+ds383AwBBgLWXA0KAgID8AzcDAEH4tJcDQoCAgICAgIDAPzcDAEHwtJcDQgA3AwAjAEEwayIAJABB8LWXA0EAOgAAQfu1lwNBADoAAEGQtpcDQQA2AgAgAEGR3wAtAAA6ACggAEEJOgArIABBid8AKQAANwMgIABBADoAKSAAQZSKATYCCCAAIABBCGoiATYCGEGYtpcDIABBIGogARCMAgJAAn8gASAAKAIYIgJGBEAgAEEIaiECIAAoAghBEGoMAQsgAkUNASACKAIAQRRqCyEBIAIgASgCABEAAAsgACwAK0EASARAIAAoAiAQCgsgAEEGOgArIABBvikoAAA2AiAgAEHCKS8AADsBJCAAQQA6ACYgAEHUlAE2AgggACAAQQhqIgE2AhhBwLaXAyAAQSBqIAEQjAICQAJ/IAEgACgCGCICRgRAIABBCGohAiAAKAIIQRBqDAELIAJFDQEgAigCAEEUagshASACIAEoAgARAAALIAAsACtBAEgEQCAAKAIgEAoLQey1lwNB8LWXAzYCACAAQTBqJABB6LeXA0IANwMAQdS3lwNCADcCAEHMt5cDQgA3AgBBxLeXA0IANwIAQey4lwNCADcCAEHkuJcDQgA3AgBB3LiXA0IANwIAQYC5lwNCADcDAEGEupcDQgA3AgBB/LmXA0IANwIAQfS5lwNCADcCAEGYupcDQgA3AwBBnLuXA0IANwIAQZS7lwNCADcCAEGMu5cDQgA3AgBBsLuXA0IANwMAQaC8lwNBADYCAEGYvJcDQgA3AgBBrLyXA0EANgIAQaS8lwNCADcCAEG4vJcDQQA2AgBBsLyXA0IANwMAQfS8lwNBADYCAEHsvJcD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IAIgAigCiAQ2AsADIAIgAigCjAQiATYCxAMgAQRAIAEgASgCBEEBajYCBAsgAkGUhQE2AqgDIAJBADYCoAMgAkIANwOYAyACKAKwASEDIAIoArQBIQQgAiACQagDajYCuAMgAyAERwRAIAQgA2siB0EASA0EIAIgBxALIgE2ApgDIAIgATYCnAMgAiABIAdBeHFqNgKgAwNAIAEgAygCADYCACABIAMoAgQiBzYCBCAHBEAgByAHKAIEQQFqNgIECyABQQhqIQEgA0EIaiIDIARHDQALIAIgATYCnAMLIAIgAikDwAM3A5gBIAJByANqQdC+lwMgAkGYAWogAkGoA2ogAkGYA2oQSAJAIAIoAswDIgFFDQAgASABKAIEIgRBAWs2AgQgBA0AIAEgASgCACgCCBEAACABEAkLIAIoApgDIgQEQCACKAKcAyIDIAQiAUcEQANAAkAgA0EIayIDKAIEIgFFDQAgASABKAIEIgdBAWs2AgQgBw0AIAEgASgCACgCCBEAACABEAkLIAMgBEcNAAsgAigCmAMhAQsgAiAENgKcAyABEAoLAkACfyACKAK4AyIDIAJBqANqRgRAIAJBqANqIQMgAigCqANBEGoMAQsgA0UNASADKAIAQRRqCyEBIAMgASgCABEAAAsgAiACKAKIBDYCiAMgAiACKAKMBCIBNgKMAyABBEAgASABKAIEQQFqNgIECyACQZSFATYC8AIgAkEANgLoAiACQgA3A+ACIAIoArABIQMgAigCtAEhBCACIAJB8AJqNgKAAyADIARHBEAgBCADayIHQQBIDQUgAiAHEAsiATYC4AIgAiABNgLkAiACIAEgB0F4cWo2AugCA0AgASADKAIANgIAIAEgAygCBCIHNgIEIAcEQCAHIAcoAgRBAWo2AgQLIAFBCGohASADQQhqIgMgBEcNAAsgAiABNgLkAgsgAiACKQOIAzcDkAEgAkGQA2pBmL+XAyACQZABaiACQfACaiACQeACahBIAkAgAigClAMiAUUNACABIAEoAgQiBEEBazYCBCAEDQAgASABKAIAKAIIEQAAIAEQCQsgAigC4AIiBARAIAIoAuQCIgMgBCIBRwRAA0ACQCADQQhrIgMoAgQiAUUNACABIAEoAgQiB0EBazYCBCAHDQAgASABKAIAKAIIEQAAIAEQCQsgAyAERw0ACyAC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dEGwpANqLwEAOwAAIABBAmoLNwECfyABEEsiAkENahALIgNBADYCCCADIAI2AgQgAyACNgIAIAAgA0EMaiABIAJBAWoQDDYCAAtrAgN/AX4jAEEQayIDJAAjAEEQayIEJAAjAEEQayICJAAgAiABKQMAQoCU69wDfjcDACACIAIpAwA3AwggAikDCCEFIAJBEGokACAEQRBqJAAgAyAFNwMIIAAgAykDCDcDACADQRBqJAAgAAubAgAgAEUEQEEADwsCfwJAIAAEfyABQf8ATQ0BAkBBrNOdAygCACgCAEUEQCABQYB/cUGAvwNGDQMMAQsgAUH/D00EQCAAIAFBP3FBgAFyOgABIAAgAUEGdkHAAXI6AABBAgwECyABQYBAcUGAwANHIAFBgLADT3FFBEAgACABQT9xQYABcjoAAiAAIAFBDHZB4AFyOgAAIAAgAUEGdkE/cUGAAXI6AAFBAwwECyABQYCABGtB//8/TQRAIAAgAUE/cUGAAXI6AAMgACABQRJ2QfABcjoAACAAIAFBBnZBP3FBgAFyOgACIAAgAUEMdkE/cUGAAXI6AAFBBAwECwtBmNKdA0EZNgIAQX8FQQELDAELIAAgAToAAEEBCwu6AgACQAJAAkACQAJAAkACQAJAAkACQAJAIAFBCWsOEgAICQoICQECAwQKCQoKCAkFBgcLIAIgAigCACIBQQRqNgIAIAAgASgCADYCAA8LIAIgAigCACIBQQRqNgIAIAAgATIBADcDAA8LIAIgAigCACIBQQRqNgIAIAAgATMBADcDAA8LIAIgAigCACIBQQRqNgIAIAAgATAAADcDAA8LIAIgAigCACIBQQRqNgIAIAAgATEAADcDAA8LIAIgAigCAEEHakF4cSIBQQhqNgIAIAAgASsDADkDAA8LIAAaIAIaAAsPCyACIAIoAgAiAUEEajYCACAAIAE0AgA3AwAPCyACIAIoAgAiAUEEajYCACAAIAE1AgA3AwAPCyACIAIoAgBBB2pBeHEiAUEIajYCACAAIAEpAwA3AwALcgEDfyAAKAIALAAAQTBrQQpPBEBBAA8LA0AgACgCACEDQX8hASACQcyZs+YATQRAQX8gAywAAEEwayIBIAJBCmwiAmogASACQf////8Hc0obIQELIAAgA0EBajYCACABIQIgAywAAUEwa0EKSQ0ACyACC48V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ADYCvAEgB0IANwK0ASAHQQA2AjggB0EANgIoIAdBsJYBNgIAIAdCADcCVCAHQgA3AlwgB0IANwJkIAdCADcChAEgB0IANwKMASAHQgA3ApQBIAdBxJoBNgLoASAFQRAQCyIGNgKAByAFQoyAgICAgoCAgH83AoQHIAZBlc0AKAAANgAIIAZBjc0AKQAANwAAIAZBADoADCAFQYAHahAbIAUsAIsHQQBIBEAgBSgCgAcQCgsgB0HsEmpBADYCACAHQeQSakIANwIAIAdBmBJqQQA2AgAgB0GQEmpCADcDACAHQbQSakIANwIAIAdBvBJqQgA3AgAgB0HEEmpCADcCACAHQdQTakEANgIAIAdBzBNqQgA3AgAgB0GAE2pBADYCACAHQfgSakIANwMAIAdBnBNqQgA3AgAgB0GkE2pCADcCACAHQawTakIANwIAIAdBtBRqQgA3AgAgB0HgE2pCADcDACAHQbwUakEANgIAIAdB6BNqQQA2AgAgB0GUFGpCADcCACAHQYwUakIANwIAIAdBhBRqQgA3AgAgB0HQFGpBADYCACAHQaQVakEANgIAIAdByBRqQgA3AwAgB0GcFWpCADcCACAHQewUakIANwIAIAdB9BRqQgA3AgAgB0H8FGpCADcCACAHQbgVakEANgIAIAdBjBZqQQA2AgAgB0GwFWpCADcDACAHQYQWakIANwIAIAdB1BVqQgA3AgAgB0HcFWpCADcCACAHQeQVakIANwIAIAdBoBZqQQA2AgAgB0H0FmpBADYCACAHQZgWakIANwMAIAdB7BZqQgA3AgAgB0HMFmpCADcCACAHQcQWakIANwIAIAdBvBZqQgA3AgAgB0HUF2pCADcCACAHQYAXakIANwMAIAdB3BdqQQA2AgAgB0GIF2pBADYCACAHQbQXakIANwIAIAdBrBdqQgA3AgAgB0GkF2pCADcCACAHQbwYakIANwIAIAdB6BdqQgA3AwAgB0HEGGpBADYCACAHQfAXakEANgIAIAdBnBhqQgA3AgAgB0GUGGpCADcCACAHQYwYakIANwIAIAdBpBlqQgA3AgAgB0HQGGpCADcDACAHQawZakEANgIAIAdB2BhqQQA2AgAgB0GEGWpCADcCACAHQfwYakIANwIAIAdB9BhqQgA3AgAgB0GUGmpBADYCACAHQYwaakIANwIAIAdBwBlqQQA2AgAgB0G4GWpCADcDACAHQewZakIANwIAIAdB5BlqQgA3AgAgB0HcGWpCADcCACAHQfwaakEANgIAIAdB9BpqQgA3AgAgB0GoGmpBADYCACAHQaAaakIANwMAIAdB1BpqQgA3AgAgB0HMGmpCADcCACAHQcQaakIANwIAIAdB5BtqQQA2AgAgB0HcG2pCADcCACAHQZAbakEANgIAIAdBiBtqQgA3AwAgB0G8G2pCADcCACAHQbQbakIANwIAIAdBrBtqQgA3AgAgB0HMHGpBADYCACAHQcQcakIANwIAIAdB+BtqQQA2AgAgB0HwG2pCADcDACAHQaQcakIANwIAIAdBnBxqQgA3AgAgB0GUHGpCADcCACAHQbQdakEANgIAIAdBrB1qQgA3AgAgB0HgHGpBADYCACAHQdgcakIANwMAIAdBjB1qQgA3AgAgB0GEHWpCADcCACAHQfwcakIANwIAIAdBnB5qQQA2AgAgB0GUHmpCADcCACAHQcgdakEANgIAIAdBwB1qQgA3AwAgB0H0HWpCADcCACAHQewdakIANwIAIAdB5B1qQgA3AgAgB0GEH2pBADYCACAHQfweakIANwIAIAdBsB5qQQA2AgAgB0GoHmpCADcDACAHQdweakIANwIAIAdB1B5qQgA3AgAgB0HMHmpCADcCACAHQewfakEANgIAIAdB5B9qQgA3AgAgB0GYH2pBADYCACAHQZAfakIANwMAIAdBxB9qQgA3AgAgB0G8H2pCADcCACAHQbQfakIANwIAIAdB1CBqQQA2AgAgB0HMIGpCADcCACAHQYAgakEANgIAIAdB+B9qQgA3AwAgB0GsIGpCADcCACAHQaQgakIANwIAIAdBnCBqQgA3AgAgB0G8IWpBADYCACAHQbQhakIANwIAIAdB6CBqQQA2AgAgB0HgIGpCADcDACAHQZQhakIANwIAIAdBjCFqQgA3AgAgB0GEIWpCADcCACAHQaQiakEANgIAIAdBnCJqQgA3AgAgB0HQIWpBADYCACAHQcghakIANwMAIAdB/CFqQgA3AgAgB0H0IWpCADcCACAHQewhakIANwIAIAdBjCNqQQA2AgAgB0GEI2pCADcCACAHQbgiakEANgIAIAdBsCJqQgA3AwAgB0HkImpCADcCACAHQdwiakIANwIAIAdB1CJqQgA3AgAgB0H0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ECIABEAgAygCFCIFIAAiAUcEQANAAkAgBUEIayIFKAIEIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLIAAgBUcNAAsgAygCECEBCyADIAA2AhQgARAKCyADQZABaiQADwtBBBACIgBBCBALQdjxABBDNgIAIABBqJABQQAQAQALEA8AC9oCAQR/IAAoAkQiAwRAIAAoAkgiASADIgJHBEADQAJAIAEiAkEYayIBKAIQIgRFDQAgAS0AFA0AQQQgAkEQa0EAIAQRBQAaCyABIANHDQALIAAoAkQhAgsgACADNgJIIAIQCgsgACgCOCIBBEAgACABNgI8IAEQCgsgACgCKCIBBEAgACABNgIsIAEQCgsgACgCHCIDBEAgACgCICICIAMiAUcEQANAIAJBGGsiASgCBCEEIAFBADYCBCAEBEAgBCACQRBrKAIAEQAACyABIgIgA0cNAAsgACgCHCEBCyAAIAM2AiAgARAKCyAAKAIMIgMEQCAAKAIQIgIgAyIBRwRAA0AgAkEMayICKAIIIQEgAkEANgIIIAEEQCABIAEoAgAoAhwRAAALIAIgA0cNAAsgACgCDCEBCyAAIAM2AhAgARAKCyAAKAIAIgEEQCAAIAE2AgQgARAKCyAAC54CAQN/IwBBEGsiAiQAIABBzIgBNgIAAkAgACgCPCIBRQ0AIAEgASgCBCIDQQFrNgIEIAMNACABIAEoAgAoAggRAAAgARAJCwJAIAAoAjQiAUUNACABIAEoAgQiA0EBazYCBCADDQAgASABKAIAKAIIEQAAIAEQCQsgACgCJCIBBEAgACABNgIoIAEQCgsgACgCICIBBEAgARAJCyAAQbSIATYCACACQRAQCyIBNgIAIAJCi4CAgICCgICAfzcCBCABQcHaACgAADYAByABQbraACkAADcAACABQQA6AAsgAhAZIAIsAAtBAEgEQCACKAIAEAoLIAAoAhAiAQRAIAAgATYCFCABEAoLIABBBGogACgCCBA5IAJBEGokACAAC4IBAAJAIAEsAAtBAE4EQCAAIAEpAgA3AgAgACABKAIINgIIDAELIAAgASgCACABKAIEEDMLIAIoAhAiAUUEQCAAQQA2AiAPCyABIAJGBEAgACAAQRBqIgA2AiAgAigCECIBIAAgASgCACgCDBECAA8LIAAgASABKAIAKAIIEQEANgIgC78CAQV/IAEgAkcEQCAAQQRqIQcDQCAAKAIEIQYCQAJAAkAgByIDIAAoAgBGDQAgByEFAkAgBiIEBEADQCAEIgMoAgQiBA0ADAILAAsDQCAFKAIIIgMoAgAgBUYhBCADIQUgBA0ACwsgASgCACIEIAMoAhBKDQAgByIFIQMgBkUNAQNAIAYiAygCECIFIARKBEAgAyEFIAMoAgAiBg0BDAMLIAQgBUwNAyADKAIEIgYNAAsgA0EEaiEFDAELIANBBGogByAGGyIFKAIADQEgAyAHIAYbIQMLQRQQCyEEIAEoAgAhBiAEIAM2AgggBEIANwIAIAQgBjYCECAFIAQ2AgAgACgCACgCACIDBEAgACADNgIAIAUoAgAhBAsgACgCBCAEECwgACAAKAIIQQFqNgIICyABQQRqIgEgAkcNAAsLC/cBAQN/IwBBEGsiAiQAIABBnIcBNgIAIAJBBzoACyACQQA6AAcgAkHaKSgAADYCACACQd0pKAAANgADIAIQGSACLAALQQBIBEAgAigCABAKCwJAIAAoAjAiAUUNACABIAEoAgQiA0EBazYCBCADDQAgASABKAIAKAIIEQAAIAEQCQsgACgCKCEBIABBADYCKCABBEAgARAKCyAAKAIkIQEgAEEANgIkIAEEQCABEAoLAkAgACgCICIBRQ0AIAEgASgCBCIDQQFrNgIEIAMNACABIAEoAgAoAggRAAAgARAJCyAAKAIIIgEEQCABEAkLIAJBEGokACAAC6UIAQJ/IwBBIGsiCyQAIABBnIcBNgIAIAAgASgCADYCBCAAIAEoAgQiDDYCCCAMBEAgDCAMKAIIQQFqNgIICyAAIAY2AhggACAFNgIUIAAgBDYCECAAIAM2AgwgACAHKAIANgIcIAAgBygCBCIDNgIgIAMEQCADIAMoAgRBAWo2AgQLIABCADcCJCAAIAooAgA2AiwgACAKKAIEIgQ2AjAgBARAIAQgBCgCBEEBajYCBAsgC0EHOgAbIAtBADoAFyALQdopKAAANgIQIAtB3SkoAAA2ABMgC0EQahAbIAssABtBAEgEQCALKAIQEAoLIAtBEBALIgM2AgAgC0KLgICAgIKAgIB/NwIEIANBlSkoAAA2AAcgA0GOKSkAADcAACADQQA6AAsgCxAbIAssAAtBAEgEQCALKAIAEAoLIAIoAgAhAyAAIAhBDG0iBUEMbCAIRyAIQQBIcUF/cyAFaiIFNgI8IAAgA0EEdCIDQQBIIANBEG0iBkEEdCADR3FBf3MgBmoiBjYCOCACKAIEIQIgACADQQ9yQRBtIANBH3VqIAZrQQJqIgM2AkQgACACQQR0IgJBAEggAkEQbSIGQQR0IAJHcUF/cyAGaiIGNgJAIAAgAkEPckEQbSACQR91aiAGa0ECaiIGNgJIQX8gBiADIAggCWoiAkEMbSIIIAVrIAhBDGwgAkcgAkEASHFrQQJqbGwiAkEDdCIGIAJB/////wFLGyIFEAshAyACBEAgAyAGaiEGIAMhCANAIAhBgICAgHg2AgAgCEEIaiIIIAZHDQALCyAAKAIkIQYgACADNgIkIAYEQCAGEAoLIAUQCyIIQQAgBRAcIQUgACgCKCEDIAAgBTYCKCADBEAgAxAKIAAoAighCAsCQCACQQBMDQACQCACQQdxIgBFBEAgAiEDDAELQQAhCiACIQMDQCAIQv///////////wA3AwAgA0EBayEDIAhBCGohCCAKQQFqIgogAEcNAAsLIAJBCEkNAANAIAhC////////////ADcDOCAIQv///////////wA3AzAgCEL///////////8ANwMoIAhC////////////ADcDICAIQv///////////wA3AxggCEL///////////8ANwMQIAhC////////////ADcDCCAIQv///////////wA3AwAgCEFAayEIIANBCWshACADQQhrIQMgAEF+SQ0ACwsCQCAERQ0AIAQgBCgCBCIAQQFrNgIEIAANACAEIAQoAgAoAggRAAAgBBAJCwJAIAcoAgQiAEUNACAAIAAoAgQiAkEBazYCBCACDQAgACAAKAIAKAIIEQAAIAAQCQsCQCABKAIEIgBFDQAgACAAKAIEIgFBAWs2AgQgAQ0AIAAgACgCACgCCBEAACAAEAkLIAtBIGokAAujAwEDfyMAQdAAayIKJABBzAAQCyEMIAogACgCADYCSCAKIAAoAgQiCzYCTCALBEAgCyALKAIEQQFqNgIECyAKIAYoAgA2AkAgCiAGKAIEIgs2AkQgCwRAIAsgCygCBEEBajYCBAsgCiAJKAIANgI4IAogCSgCBCIJNgI8AkAgCUUEQCAKIAopA0g3AxggCiAKKQNANwMQ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KAIIEQAAIAAQCQsjAEGgAWsiACQAIABCADcCdCAAQgA3AmwgAEIANwJkIABCADcDiAFB6LaXAyAAQQhqEDcCQCAAKAKMASIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAAoAngiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsCQCAAKAJwIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLAkAgACgCaCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCyAAQgA3AnQgAEIANwJsIABCADcCZCAAQgA3A4gBQYC4lwMgAEEIahA3AkAgACgCjAEiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsCQCAAKAJ4IgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLAkAgACgCcCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAAoAmgiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsgAEIANwJ0IABCADcCbCAAQgA3AmQgAEIANwOIAUGYuZcDIABBCGoQNwJAIAAoAowBIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLAkAgACgCeCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAAoAnAiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsCQCAAKAJoIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLIABCADcCdCAAQgA3AmwgAEIANwJkIABCADcDiAFBsLqXAyAAQQhqEDcCQCAAKAKMASIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAAoAngiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsCQCAAKAJwIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLAkAgACgCaCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCyAAQaABaiQAIwBBMGsiAiQAIAJBADoACCACQQA6ABMgAkEANgIoQfu1lwMsAABBAEgEQEHwtZcDKAIAEAoLQfC1lwMgAikDCDcDAEH4tZcDIAIoAhA2AgBBkLaXAygCACEAQZC2lwNBADYCACACQQA6AAggAkEAOgATAkAgAAJ/IABBgLaXA0YEQEGAtpcDKAIAQRBqDAELIABFDQEgACgCAEEUagsoAgARAAALAkAgAigCKCIBRQRAQZC2lwNBADYCAAwBCyACQRhqIgAgAUYEQEGQtpcDQYC2lwM2AgAgAEGAtpcDIAIoAhgoAgwRAgACfyAAIAIoAigiAUYEQCACKAIYQRBqDAELIAFFDQIgASIAKAIAQRRqCyEBIAAgASgCABEAAAwBC0GQtpcDIAE2AgAgAkEANgIoCyACLAATQQBIBEAgAigCCBAKCyACQQA6AAggAkEAOgATIAJBADYCKEGjtpcDLAAAQQBIBEBBmLaXAygCABAKC0GYtpcDIAIpAwg3AwBBoLaXAyACKAIQNgIAQbi2lwMoAgAhAEG4tpcDQQA2AgAgAkEAOgAIIAJBADoAEwJAIAACfyAAQai2lwNGBEBBqLaXAygCAEEQagwBCyAARQ0BIAAoAgBBFGoLKAIAEQAACwJAIAIoAigiAUUEQEG4tpcDQQA2AgAMAQsgAkEYaiIAIAFGBEBBuLaXA0GotpcDNgIAIABBqLaXAyACKAIYKAIMEQIAAn8gACACKAIoIgFGBEAgAigCGEEQagwBCyABRQ0CIAEiACgCAEEUagshASAAIAEoAgARAAAMAQtBuLaXAyABNgIAIAJBADYCKAsgAiwAE0EASARAIAIoAggQCgsgAkEAOgAIIAJBADoAEyACQQA2AihBy7aXAywAAEEASARAQcC2lwMoAgAQCgtBwLaXAyACKQMINwMAQci2lwMgAigCEDYCAEHgtpcDKAIAIQBB4LaXA0EANgIAIAJBADoACCACQQA6ABMCQCAAAn8gAEHQtpcDRgRAQdC2lwMoAgBBEGoMAQsgAEUNASAAKAIAQRRqCygCABEAAAsCQCACKAIoIgFFBEBB4LaXA0EANgIADAELIAJBGGoiACABRgRAQeC2lwNB0LaXAzYCACAAQdC2lwMgAigCGCgCDBECAAJ/IAAgAigCKCIBRgRAIAIoAhhBEGoMAQsgAUUNAiABIgAoAgBBFGoLIQEgACABKAIAEQAADAELQeC2lwMgATYCACACQQA2AigLIAIsABNBAEgEQCACKAIIEAoLIAJBMGokAEGAtJcDKAIAIQBBgLSXA0EANgIAIAAEQCAAEH8QCgtBgLOXAygCACEAQYCzlwNBADYCAAJAIAACfyAAQfCylwNGBEBB8LKXAygCAEEQagwBCyAARQ0BIAAoAgBBFGoLKAIAEQAAC0GYs5cDKAIAIQBBmLOXA0EANgIAAkAgAAJ/IABBiLOXA0cEQCAARQ0CIAAoAgBBFGoMAQtBiLOXAygCAEEQagsoAgARAAALQbCzlwMoAgAhAEGws5cDQQA2AgACQCAAAn8gAEGgs5cDRwRAIABFDQIgACgCAEEUagwBC0Ggs5cDKAIAQRBqCygCABEAAAtByLOXAygCACEAQcizlwNBADYCAAJAIAACfyAAQbizlwNHBEAgAEUNAiAAKAIAQRRqDAELQbizlwMoAgBBEGoLKAIAEQAAC0Hgs5cDKAIAIQBB4LOXA0EANgIAAkAgAAJ/IABB0LOXA0cEQCAARQ0CIAAoAgBBFGoMAQtB0LOXAygCAEEQagsoAgARAAALQfizlwMoAgAhAEH4s5cDQQA2AgACQCAAAn8gAEHos5cDRwRAIABFDQIgACgCAEEUagwBC0Hos5cDKAIAQRBqCygCABEAAAsLrAIBA38jAEEQayIFJAACQCABKAJYBEACQCAEBEAgBUEIaiABIAIgAyAEEKkBDAELIAVBCGogASACIAMQqAELIAEoAjQiBCABKAI4IgNHBEAgASgCWCEGA0AgBCgCBCIHRQ0DIAQoAgAgBiACIAcRAwAgBEEIaiIEIANHDQALCwJAAkAgAkEMdkH/AXEiAyABKAIIIAEoAgQiBGtBAnVPDQAgBCADQQJ0aigCACIDRQ0AIAMgAkH/H3FBAnRqKAIAIgMgAkGAgEBxc0H+/z9LDQAgACABQRBqrSADQf//P3FBAWqtQiCGhDcCAAwBCyAAQQA2AgQgACABQRBqNgIACyAFQRBqJAAPC0GWH0HiLEG6hAFBltwAEAAAC0Hm8gBB4ixB9P4AQc/0ABAAAAucAwIIfwJ+IwBBIGsiAyQAIAMgASkCACIMNwMYIAMgAikCACILNwMQIAMgDDcDCCADIAs3AwAjAEEgayICJAACQAJAIAAoAlgEQCADKAIMIgYgAygCBCIIRwRAIABBEGqtIQwgAygCCCEJA0AgCSgCACAGQQFrIgZBAnRqKAIAIQUgACgCQCIBIAAoAkQiBEcEQCAAKAJYIQcDQCABKAIEIgpFDQUgASgCACAHIAUgChEDACABQQhqIgEgBEcNAAsLQQAhAQJAIAVBDHZB/wFxIgQgACgCCCAAKAIEIgdrQQJ1Tw0AIAcgBEECdGooAgAiBEUNACAEIAVB/x9xQQJ0aigCACIEIAVBgIBAcXNB/v8/Sw0AIARB//8/cUEBaiEBCyACIAGtQiCGIAyEIgs3AxggAiALNwMIIAIgAUEBa61CIIYgDIQiCzcDECACIAs3AwAgACACQQhqIAIQkgIgBiAIRw0ACwsgAkEgaiQADAILQZYfQeIsQaeEAUHoMBAAAAtB5vIAQeIsQfT+AEHP9AAQAAALIANBIGokAAucAwIIfwJ+IwBBIGsiAyQAIAMgASkCACIMNwMYIAMgAikCACILNwMQIAMgDDcDCCADIAs3AwAjAEEgayICJAACQAJAIAAoAlgEQCADKAIMIgYgAygCBCIIRwRAIABBEGqtIQwgAygCCCEJA0AgCSgCACAGQQFrIgZBAnRqKAIAIQUgACgCQCIBIAAoAkQiBEcEQCAAKAJYIQcDQCABKAIEIgpFDQUgASgCACAHIAUgChEDACABQQhqIgEgBEcNAAsLQQAhAQJAIAVBDHZB/wFxIgQgACgCCCAAKAIEIgdrQQJ1Tw0AIAcgBEECdGooAgAiBEUNACAEIAVB/x9xQQJ0aigCACIEIAVBgIBAcXNB/v8/Sw0AIARB//8/cUEBaiEBCyACIAGtQiCGIAyEIgs3AxggAiALNwMIIAIgAUEBa61CIIYgDIQiCzcDECACIAs3AwAgACACQQhqIAIQpgEgBiAIRw0ACwsgAkEgaiQADAILQZYfQeIsQaeEAUHoMBAAAAtB5vIAQeIsQfT+AEHP9AAQAAALIANBIGokAAuBAgEGfyMAQRBrIgUkACAAKAIoIgMgAUEIdkH8//8HcWooAgAhBwJAIAJBCnYiBiAAKAIsIANrQQJ1IgRJDQAgBUEANgIMIABBKGogBiAEa0EBaiAFQQxqEDAgBCAAKAIsIAAoAigiA2tBAnUiCE8NAANAQYDgABALIQMgACgCKCAEQQJ0aiADNgIAIARBAWoiBCAIRw0ACyAAKAIoIQMLIAMgBkECdGooAgAgAkH/B3FBDGxqIgBBADYCCCAAQgA3AgAgACAHIAFB/wdxQQxsaiIBKAIANgIAIAAgASgCBDYCBCAAIAEoAgg2AgggAUEANgIIIAFCADcCACAFQRBqJAALjQECAX8BfiAAKAIoIgAgAUEIdkH8//8HcWooAgAgAUH/B3FBDGxqIgMoAgghASAAIAJBCHZB/P//B3FqKAIAIQAgA0EANgIIIAMpAgAhBCADQgA3AgAgAyAAIAJB/wdxQQxsaiIAKAIANgIAIAMgACgCBDYCBCADIAAoAgg2AgggACABNgIIIAAgBDcCAAsgACAAKAIoIAFBCHZB/P//B3FqKAIAIAFB/wdxQQxsagvhGQMKfxF9AX4jAEEwayICJAACQAJAQeCyFygCAARAQeiyFyEBA0AgASgAAEEYbEHwspcDaiIDKAIQIgRFBEAgAkEANgIYDAMLAkAgAyAERgRAIAIgAkEIaiIENgIYIAMgBCADKAIAKAIMEQIAIAIoAhghAwwBCyACIAQgBCgCACgCCBEBACIDNgIYCyADRQ0CIAEpAAghHCACIAEoAAA2AiwgAiAcNwMgIAMgAkEsaiACQSBqIAFBEGoiBCADKAIAKAIYEQYAIAEoAAQhAwJAAn8gAigCGCIBIAJBCGpGBEAgAkEIaiEBIAIoAghBEGoMAQsgAUUNASABKAIAQRRqCyEFIAEgBSgCABEAAAsgAyAEaiEBIAdBAWoiB0HgshcoAgBJDQALC0HgshdCADcCACACQTBqJAAMAQtBCBACQZLxABBDQcyuA0EDEAEAC0GAtJcDKAIAIgEhByMAQSBrIgIkAAJAIAEoAoQBKAIAIgNB//8/cSIEIAEoAuQBIAEoAuABIgVrQQJ1Tw0AIAUgBEECdGooAgAgA0cNACACIAFBuAFqEFQiATYCGCACIAE2AhAgAkEANgIUIAJBEGogAxCXASEBQYC0lwMoAgAhBCACQRAQCyIDNgIAIAIgA0EQaiIFNgIIIANCi4CAgOABNwIIIANCoYCAgNADNwIAIAIgBTYCBCACKAIAIgMgAigCBCIFRgR/QQAFA0AgBCADKAIAai0AACIGRQRAIANBBGoiAyAFRw0BCwsgBkEARwshAyACKAIAIgQEQCACIAQ2AgQgBBAKC0GAtJcDKAIAIgQqAnghCyAELQALBEAgC7tBgLSXAygCAC0AIQR8RBgtRFT7Iek/BUQYLURU+yHpv0QYLURU+yH5P0GAtJcDKAIALQAdGwuhtiELC0GAtJcDKAIALQAOBEBBgLSXAygCAC0AIQR8RBgtRFT7Iek/BUQYLURU+yHpv0QYLURU+yH5P0GAtJcDKAIALQAdGwsgC7ugtiELC0GAtJcDKAIAIgQtAB0hBiAELQAmIQVDAACAPyEMAkAgBC0AJUUEQCADIAVyQQFHDQFDAACAv0MAAAAAIAUbIQwLIAu7RBgtRFT7IQlAoLYgCyAGG0MAAAC/lCIPEHshCyAPEIIBIQ8gASABKgIUQwAAgL9DAAAAACADG0MAAIA/QwAAgD9DAAAAACADGyAMIAyUkpGVIg6UQwAAAkSUIg0gDyALQwAAAACUIhKSIhEgD0MAAAAAlCIQIBKSIg8gDCAOlEMAAAJElCISlCALIBCTIgwgDkMAAAAAlEMAAAJElCIOlJMiE5QgDyAQIAtDAAAAgJSSIgsgDpQgDyANlJMiEJQgDCAMIA2UIAsgEpSTIg2Uk5IiFCAUkpIgALYiFJSSOAIUIAEgASoCGCAOIBEgDZQgDCATlCALIBCUk5IiDCAMkpIgFJSSOAIYIAEgASoCHCASIBEgEJQgCyANlCAPIBOUk5IiCyALkpIgFJSSOAIcCyACQSBqJAAjAEHgAGsiBSQAIAdBuAFqIgEQVCECIAEQcyEBIAVBADYCWCAFIAE2AlQgBSACNgJQIAUgASACIAEoAhQgASgCEGsgAigCFCACKAIQa0kbNgJcIAUoAlwiAigCFCEBIAIoAhAhBiAFKAJUIQMgBSgCUCEEIAUgBSgCWDYCTCAFIAJBEGqtIhw3AkAgBSAEQQAgAiAERxsgAyACIANGGyIDNgJIIAUgASAGa0ECdSICrUIghiAchDcCOAJAIAEgBkYNAAJAIAYgAkEBayIBQQJ0aigCACIEQQx2Qf8BcSIJIAMoAgggAygCBCIIa0ECdSIKTw0AIAggCUECdGooAgAiA0UNACADIARB/x9xQQJ0aigCACAEQYCAQHFzQf//P0kNAQtBACEDAkAgAUUNAANAIAIhBCABIQICQCAEQQJ0IAZqQQhrKAIAIgFBDHZB/wFxIgQgCk8NACAIIARBAnRqKAIAIgRFDQAgBCABQf8fcUECdGooAgAgAUGAgEBxc0H//z9PDQAgAiEDDAILIAJBAWsiAQ0ACwsgBSADNgI8CyAFKQNQIRwgBSAFKQNINwMoIAUgBUFAaykDADcDICAFIAUpAzg3AxggBSAcNwMwIAUoAhwEQANAAkACQCAFKAIYKAIAIAUoAhxBAnRqQQRrKAIAIgJBDHZB/wFxIgEgBSgCMCIDKAIIIAMoAgQiBGtBAnVPDQAgBCABQQJ0aigCACIERQ0AIAQgAkH/H3EiCEECdGooAgAiBCACQYCAQHEiCXNB//8/Tw0AIAEgBSgCNCIGKAIIIAYoAgQiCmtBAnVPDQAgCiABQQJ0aigCACIBRQ0AIAEgCEECdGooAgAiASAJc0H//z9PDQAgBigCKCABQQh2QfwfcWooAgAhBiAFIAMoAiggBEEIdkH8H3FqKAIAIARB/wdxQQV0ajYCDCAFIAI2AgggBSAGIAFB/wdxQQxsajYCEAwBC0HG8gBB4ixBqfAAQbkLEAAACyAFKAIQIQEgBSgCDCEDIwBBIGsiAiQAIAEoAgAiBiABKAIEIghHBEADQCAGKAIAIQEgBigCBCIEBEAgBCAEKAIEQQFqNgIECyACIAEqAhQiCyADKgIMIgyUIAMqAgAiDyABKgIIIg6UkyABKgIMIg0gAyoCBCIRlJMgASoCECIQIAMqAggiEpSTOAIMIAIgDiARlCALIBKUIBAgDJSSkiANIA+UkzgCCCACIBAgD5QgCyARlCANIAyUkpIgDiASlJM4AgQgAiANIBKUIAsgD5QgDiAMlJKSIBAgEZSTOAIAIAEqAhwhCyABKgIgIQwgAyoCFCEPIAMqAhghDiACIAEqAiQgAyoCHJI4AhwgAiAMIA6SOAIYIAIgCyAPkjgCFCACIAEqAhggAyoAEJQ4AhAgASkDACACEIQCAkAgBEUNACAEIAQoAgQiAUEBazYCBCABDQAgBCAEKAIAKAIIEQAAIAQQCQsgBkEIaiIGIAhHDQALCyACQSBqJAACQCAFKAIcIgJBAWsiAyAFKAIkIgFGDQAgBSgCKCIEKAIIIAQoAgQiBmtBAnUhCCAFKAIYKAIAIQkDQCACIQQgAyECAkAgBEECdCAJakEIaygCACIDQQx2Qf8BcSIEIAhPDQAgBiAEQQJ0aigCACIERQ0AIAQgA0H/H3FBAnRqKAIAIANBgIBAcXNB//8/Tw0AIAIhAQwCCyACQQFrIgMgAUcNAAsLIAUgATYCHCABDQALCyAFQeAAaiQAIAcoAmwEQCMAQdAAayICJAACQCAHKAJsKAIAIgFB//8/cSIEQYC0lwMoAgAiAygC5AEgAygC4AEiBWtBAnVJBEAgBSAEQQJ0aigCACABRg0BCwwCCyACIANBuAFqEFQiAzYCSCACQQA2AkQgAiADNgJAIAJBQGsgARCXASEBIAcqAnwhDyAHKgJ0IQsgByoCeCEMIAIgASoAECIOQwAAAACUIhJDAAAAAJQiEyATkiAOIAcqAoABIhWUIAEqAhwiFyABKgIUIhhDAAAAAJQiGSABKgIYIhpDAAAAAJQiG5KSQwAAAACSkpIiDTgCKCALQwAAAL+UIhEQggEhDiAMQwAAAL+UIhAQeyELIBEQeyEMIAIgDSAOIBAQggEiDZQgCyAMQwAAAACUlJIiFCAOQwAAAACUIhAgDZQgCyAMlJMiEUMAAAAAlCAPIAwgDZQgECALlJIiEJSTIhaUIBEgDyAOIAuUIAxDAAAAgJQgDZSSIguUIBFDAAAAgJSSIgyUIBAgEEMAAAAAlCALQwAAAICUkiIOlJOSIg0gDZJDAAAAAJKSOAI4IAIgAigCKDYCCCACIAIoAjg2AhggAiASIBOSIg0gFSASlCISIBkgGpIgF0MAAAAAlCITkkMAAAAAkpKSIhU4AiQgAiAVIBQgDJQgCyAOlCARIBaUk5IiESARkkMAAAAAkpI4AjQgAiANIBIgGCAbkiATkkMAAAAAkpKSIg04AiAgAiANIA8gFCAOlCAQIBaUIAsgDJSTkiILIAuSkpI4AjAgAiACKQMgNwMAIAIgAikDMDcDECMAQSBrIgEkACABIAIoAhg2AhAgASACKQIQNwMIIAEgAigCCDYCHCABIAIpAgA3AhRB7LLXASgAACIDQdn/vwFrQf7/v35NBEBBCBACQfTwABA1QYCvA0EDEAEACyADQeiy1wFqIgNCgYCAgIADNwAIQbCvA0GwrwMpAwAiHEIBfDcDACADIBw3ABAgAyABKQMINwAYIAMgASkDEDcAICADIAEpAxg3AChB6LLXAUHostcBKAAAQQFqNgAAQeyy1wFB7LLXASgAAEEoajYAACABQSBqJAAgAkHQAGokAAsPC0G38gBB4ixB28UBQd0PEAAACwYAQabCAAsGAEG/4gALBQBB2TALFgAgAEUEQEEADwsgAEHcpwMQKkEARwsRAEHctJcDQeC0lwMoAgAQdAsaACAAIAEoAgggBRAgBEAgASACIAMgBBB2Cws3ACAAIAEoAgggBRAgBEAgASACIAMgBBB2DwsgACgCCCIAIAEgAiADIAQgBSAAKAIAKAIUEQ4AC50CAQd/IAAgASgCCCAFECAEQCABIAIgAyAEEHYPCyABLQA1IQYgACgCDCEIIAFBADoANSABLQA0IQcgAUEAOgA0IABBEGoiDCABIAIgAyAEIAUQdSAGIAEtADUiCnIhBiAHIAEtADQiC3IhBwJAIABBGGoiCSAMIAhBA3RqIghPDQADQCAHQQFxIQcgBkEBcSEGIAEtADYNAQJAIAsEQCABKAIYQQFGDQMgAC0ACEECcQ0BDAMLIApFDQAgAC0ACEEBcUUNAgsgAUEAOwE0IAkgASACIAMgBCAFEHUgAS0ANSIKIAZyIQYgAS0ANCILIAdyIQcgCUEIaiIJIAhJDQALCyABIAZB/wFxQQBHOgA1IAEgB0H/AXFBAEc6ADQLpwEAIAAgASgCCCAEECAEQAJAIAEoAgQgAkcNACABKAIcQQFGDQAgASADNgIcCw8LAkAgACABKAIAIAQQIEUNAAJAIAIgASgCEEcEQCABKAIUIAJHDQELIANBAUcNASABQQE2AiAPCyABIAI2AhQgASADNgIgIAEgASgCKEEBajYCKAJAIAEoAiRBAUcNACABKAIYQQJHDQAgAUEBOgA2CyABQQQ2AiwLC4gCACAAIAEoAgggBBAgBEACQCABKAIEIAJHDQAgASgCHEEBRg0AIAEgAzYCHAsPCwJAIAAgASgCACAEECAEQAJAIAIgASgCEEcEQCABKAIUIAJHDQELIANBAUcNAiABQQE2AiAPCyABIAM2AiACQCABKAIsQQRGDQAgAUEAOwE0IAAoAggiACABIAIgAkEBIAQgACgCACgCFBEOACABLQA1BEAgAUEDNgIsIAEtADRFDQEMAwsgAUEENgIsCyABIAI2AhQgASABKAIoQQFqNgIoIAEoAiRBAUcNASABKAIYQQJHDQEgAUEBOgA2DwsgACgCCCIAIAEgAiADIAQgACgCACgCGBEHAAsLqQQBA38gACABKAIIIAQQIARAAkAgASgCBCACRw0AIAEoAhxBAUYNACABIAM2AhwLDwsCQCAAIAEoAgAgBBAgBEACQCACIAEoAhBHBEAgASgCFCACRw0BCyADQQFHDQIgAUEBNgIgDwsgASADNgIgIAEoAixBBEcEQCAAQRBqIgUgACgCDEEDdGohB0EAIQMgAQJ/AkADQAJAIAUgB08NACABQQA7ATQgBSABIAIgAkEBIAQQdSABLQA2DQACQCABLQA1RQ0AIAEtADQEQEEBIQMgASgCGEEBRg0EQQEhBiAALQAIQQJxDQEMBAtBASEGIAAtAAhBAXFFDQMLIAVBCGohBQwBCwtBBCAGRQ0BGgtBAws2AiwgA0EBcQ0CCyABIAI2AhQgASABKAIoQQFqNgIoIAEoAiRBAUcNASABKAIYQQJHDQEgAUEBOgA2DwsgACgCDCEGIABBEGoiByABIAIgAyAEEF0gAEEYaiIFIAcgBkEDdGoiBk8NAAJAIAAoAggiAEECcUUEQCABKAIkQQFHDQELA0AgAS0ANg0CIAUgASACIAMgBBBdIAVBCGoiBSAGSQ0ACwwBCyAAQQFxRQRAA0AgAS0ANg0CIAEoAiRBAUYNAiAFIAEgAiADIAQQXSAFQQhqIgUgBkkNAAwCCwALA0AgAS0ANg0BIAEoAiRBAUYEQCABKAIYQQFGDQILIAUgASACIAMgBBBdIAVBCGoiBSAGSQ0ACwsLiAUBBH8jAEFAaiIGJAACQCABQbipA0EAECAEQCACQQA2AgBBASEEDAELAkAgACABIAAtAAhBGHEEf0EBBSABRQ0BIAFBrKcDECoiA0UNASADLQAIQRhxQQBHCxAgIQULIAUEQEEBIQQgAigCACIARQ0BIAIgACgCADYCAAwBCwJAIAFFDQAgAUHcpwMQKiIFRQ0BIAIoAgAiAQRAIAIgASgCADYCAAsgBSgCCCIDIAAoAggiAUF/c3FBB3ENASADQX9zIAFxQeAAcQ0BQQEhBCAAKAIMIAUoAgxBABAgDQEgACgCDEGsqQNBABAgBEAgBSgCDCIARQ0CIABBkKgDECpFIQQMAgsgACgCDCIDRQ0AQQAhBCADQdynAxAqIgEEQCAALQAIQQFxRQ0CAn8gBSgCDCEAQQAhAgJAA0BBACAARQ0CGiAAQdynAxAqIgNFDQEgAygCCCABKAIIQX9zcQ0BQQEgASgCDCADKAIMQQAQIA0CGiABLQAIQQFxRQ0BIAEoAgwiAEUNASAAQdynAxAqIgEEQCADKAIMIQAMAQsLIABBzKgDECoiAEUNACAAIAMoAgwQsAEhAgsgAgshBAwCCyADQcyoAxAqIgEEQCAALQAIQQFxRQ0CIAEgBSgCDBCwASEEDAILIANB/KYDECoiAUUNASAFKAIMIgBFDQEgAEH8pgMQKiIDRQ0BIAZBCGoiAEEEckEAQTQQHBogBkEBNgI4IAZBfzYCFCAGIAE2AhAgBiADNgIIIAMgACACKAIAQQEgAygCACgCHBEGAAJAIAYoAiAiAEEBRw0AIAIoAgBFDQAgAiAGKAIYNgIACyAAQQFGIQQMAQtBACEECyAGQUBrJAAgBAtqAQJ/IAAgASgCCEEAECAEQCABIAIgAxB3DwsgACgCDCEEIABBEGoiBSABIAIgAxCyAQJAIABBGGoiACAFIARBA3RqIgRPDQADQCAAIAEgAiADELIBIAEtADYNASAAQQhqIgAgBEkNAAsLCzEAIAAgASgCCEEAECAEQCABIAIgAxB3DwsgACgCCCIAIAEgAiADIAAoAgAoAhwRBgALGAAgACABKAIIQQAQIARAIAEgAiADEHcLC58BAQJ/IwBBQGoiAyQAAn9BASAAIAFBABAgDQAaQQAgAUUNABpBACABQfymAxAqIgFFDQAaIANBCGoiBEEEckEAQTQQHBogA0EBNgI4IANBfzYCFCADIAA2AhAgAyABNgIIIAEgBCACKAIAQQEgASgCACgCHBEGACADKAIgIgBBAUYEQCACIAMoAhg2AgALIABBAUYLIQAgA0FAayQAIAALCgAgACABQQAQIAsKAEGA9QAQswEACwYAQYj/AAsFAEGnHwsFAEHDOwsUACAAQQRqQQAgASgCBEHs/gBGGwvxAQIBfQF/AkAgAygAACIFQQRJBEAgACgCBCECQQEhAAJAAkACQCABKAIAQQJrDgIBAAILQQAhAAsgAiAFaiAAOgAqCyACIAMqAAwiBEMAAAAAIAQgBFsbOAI4IAIgAyoAECIEQwAAAAAgBCAEWxs4AjwgAiADKgAEOAIwIAIgAyoACDgCNCACIAMoABRBAEc6AEAgAigCRCIAIAIoAkgiAUcEQANAIAAoAgQiAkUNAyAAKAIAIAMgAhECACAAQQhqIgAgAUcNAAsLDwtBCBACQcDxABA1QYCvA0EDEAEAC0Hm8gBB4ixB9P4AQc/0ABAAAAsEAEIACwQAQQAL+AIBB38jAEEgayIDJAAgAyAAKAIcIgQ2AhAgACgCFCEFIAMgAjYCHCADIAE2AhggAyAFIARrIgE2AhQgASACaiEFQQIhBwJ/AkACQAJAIAAoAjwgA0EQaiIBQQIgA0EMahAFIgQEf0GY0p0DIAQ2AgBBfwVBAAsEQCABIQQMAQsDQCAFIAMoAgwiBkYNAiAGQQBIBEAgASEEDAQLIAEgBiABKAIEIghLIglBA3RqIgQgBiAIQQAgCRtrIgggBCgCAGo2AgAgAUEMQQQgCRtqIgEgASgCACAIazYCACAFIAZrIQUgACgCPCAEIgEgByAJayIHIANBDGoQBSIGBH9BmNKdAyAGNgIAQX8FQQALRQ0ACwsgBUF/Rw0BCyAAIAAoAiwiATYCHCAAIAE2AhQgACABIAAoAjBqNgIQIAIMAQsgAEEANgIcIABCADcDECAAIAAoAgBBIHI2AgBBACAHQQJGDQAaIAIgBCgCBGsLIQAgA0EgaiQAIAALFQAgASAAKAIENgIEIAFBhP0ANgIACx0BAX9BCBALIgEgACgCBDYCBCABQYT9ADYCACABCygAQYDKnQMoAgAhAEGAyp0DQQA2AgAgAARAIAAgACgCBBBgIAAQCgsLBgBBgLYCCxQAIABBBGpBACABKAIEQey1AkYbCwsAIAFB1LQCNgIACwYAQfT8AAsRAEEIEAsiAEHUtAI2AgAgAAsUACAAQQxqQQAgASgCBEGMmAJGGwsZACAAKAIMIgAEQCAAIAAoAgAoAggRAAALC3ABAn8jAEEQayIBJAAgAUEQEAsiAjYCACABQoyAgICAgoCAgH83AgQgAkHNKSgAADYACCACQcUpKQAANwAAIAJBADoADCABEBkgASwAC0EASARAIAEoAgAQCgsgACgCFCIABEAgABAJCyABQRBqJAALDwAgAEGYlgI2AgAgABAKCw0AIABBmJYCNgIAIAALCQAgABDCARAKCxQAIABBBGpBACABKAIEQdj8AEYbC6EDAQR/AkACQAJAAkAgAUECdSIEIAAoAiAiBkgNACAAKAIoIARIDQAgA0ECdSIFIAAoAiQiB0gNACAAKAIsIAVIDQAgACgCFCAEIAZrIAAoAjAgBSAHa2xqQQN0aiIEKAIAIQUgBCgCBCIEBEAgBCAEKAIEQQFqNgIECyAFKAIMKAIMQZS+lwMoAgBODQEgBEUNACAEIAQoAgQiBUEBazYCBCAFDQAgBCAEKAIAKAIIEQAAIAQQCQsgACgCEBAVIQQgACgCDCIAIAEgAiADIAAoAgAoAgARCAAhACAEIAQoAgQiAUEBazYCBCABRQ0BDAILAn8CQEFwQc8AIAIgAkHPAE4bIgAgAEFwTBsiAEECdUEEaiICIAUoAiggBSgCJCIFa0EkbUkEQCAAQQR0QTBxIANBAnRBDHEgAUEDcXJyIgAgBSACQSRsaiIBKAIcIAEoAhgiAWtBAnVPDQEgASAAQQJ0aigCAAwCCxAeAAsQHgALIQAgBEUNASAEIAQoAgQiAUEBazYCBCABDQELIAQgBCgCACgCCBEAACAEEAkLIAALtwcCCX8GfSMAQUBqIgUkACAAQQhqIQkgASAAKAIEEQwAIQsCQAJAAkACQAJAAkACQAJAAkAgACgCDCAAKAIIIgRrIgNBAEoEQCADQQJ1IgMhBgNAIAMgBkEBdiIHIAJqIghNDQQgAiAIQQFqIAQgCEECdGoqAgAgC14iCBshAiAHIAYgB0F/c2ogCBsiBkEASg0ACyACQQBKDQELIAAoAhQiAiAAKAIYRg0DIAIoAgAiAigCACgCCCEDIAUgASkCCDcDCCAFIAEpAgA3AwAgAiAFIAMRDwAhDCAAKAIgIgEgACgCJEYNBCAAKAIIIgIgACgCDEYNAiABKgIAIAsgAioCAJOUIAySIQsMAQsgAiADRgRAIANBAWsiAiAAKAIYIAAoAhQiA2tBA3VPDQUgAyACQQN0aigCACIDKAIAKAIIIQQgBSABKQIINwMYIAUgASkCADcDECADIAVBEGogBBEPACEMIAAoAiQgACgCICIBa0ECdSACTQ0GIAAoAgwgACgCCCIAa0ECdSACTQ0CIAEgAkECdCICaioCACALIAAgAmoqAgCTlCAMkiELDAELIAMgAkEBayIGTQ0BIAIgA08NASAAQRRqIQogACgCGCAAKAIUIgdrQQN1IgggBk0NBiAEIAZBAnRqKgIAIQwgBCACQQJ0aioCACENIAcgBkEDdGoiAygCACEJIAMoAgQiAwR/IAMgAygCBEEBajYCBCAAKAIYIAAoAhQiB2tBA3UFIAgLIAJNDQYgByACQQN0aiIEKAIAIQcgBCgCBCIEBEAgBCAEKAIEQQFqNgIECyAAQSBqIQggACgCJCAAKAIgIgBrQQJ1IgogBk0NByACIApPDQcgACACQQJ0aioCACEPIAAgBkECdGoqAgAhECAJKAIAKAIIIQAgBSABKQIINwM4IAUgASkCADcDMCAJIAVBMGogABEPACEOIAcoAgAoAgghACAFIAEpAgg3AyggBSABKQIANwMgIAsgDJMgDSAMkyIMlSILQwAAgD8gC5OUIAsgByAFQSBqIAARDwAgDpMiDSAPIAyUkyAQIAyUIA2TIgyTlCAMkpQhDCAOIAsgDZSSIQsCQCAERQ0AIAQgBCgCBCIAQQFrNgIEIAANACAEIAQoAgAoAggRAAAgBBAJCyAMIAuSIQsgA0UNACADIAMoAgQiAEEBazYCBCAADQAgAyADKAIAKAIIEQAAIAMQCQsgBUFAayQAIAsPCxAeAAsQHgALEB4ACxAeAAsQHgALEB4ACxAeAAsJACAAEMUBEAoLDwAgAEGEkQI2AgAgABAKCw0AIABBhJECNgIAIAALBwAgACoCBAtxAQJ/IwBBEGsiASQAIABB8JACNgIAIAFBEBALIgI2AgAgAUKLgICAgIKAgIB/NwIEIAJB9tEAKAAANgAHIAJB79EAKQAANwAAIAJBADoACyABEBkgASwAC0EASARAIAEoAgAQCgsgABAKIAFBEGokAAuHAQACQCADKAAAIgJBKmtBVksEQCAAKAIEIgAgAmogASgCAEEERjoAACAAKAJQIgEgACgCVCIARwRAA0AgASgCBCICRQ0DIAEoAgAgAyACEQIAIAFBCGoiASAARw0ACwsPC0EIEAJBq/EAEDVBgK8DQQMQAQALQebyAEHiLEH0/gBBz/QAEAAAC28BAn8jAEEQayIBJAAgAEHwkAI2AgAgAUEQEAsiAjYCACABQouAgICAgoCAgH83AgQgAkH20QAoAAA2AAcgAkHv0QApAAA3AAAgAkEAOgALIAEQGSABLAALQQBIBEAgASgCABAKCyABQRBqJAAgAAsPACAAQdyOAjYCACAAEAoLDQAgAEHcjgI2AgAgAAsHACAAKgIMCwcAIAAqAgQLBwAgACoCCAsOAQF9IAAqAgAiASABkgsZAEMAAMjAIAAqAgBDAACgQJKVQwAAoD+SCxUAIAEgACgCBDYCBCABQej6ADYCAAsZAQF9IAAqAgAiASABIAGSIAFDAAAAAF0bC9QCAQN/IwBBEGsiAyQAIANBBzoACyADQQA6AAcgA0HcCygAADYCACADQd8LKAAANgADIAMQGSADLAALQQBIBEAgAygCABAKCwJAIAAoAswBIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLAkAgACgCiAEiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsCQCAAKAKAASIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAAoAngiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsCQCAAKAJwIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLIAAoAhQiAARAIAAQCQsgA0EQaiQACw8AIABB6I0CNgIAIAAQCgsNACAAQeiNAjYCACAAC0IBAn8gAEGUjQI2AgACQCAAKAIIIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLIAAQCgtAAQJ/IABBlI0CNgIAAkAgACgCCCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCyAAC98CAwN/AnwBfiAAKAIEIgAoAjgCfyAAKQMwIgYgACkDkAFRBEAgACgCmAEMAQsgACAGNwOQAQJAIAAoAkgiAUEEda0gACgCTCICQQR1rUIghoQiBiAAKQOgAVEEQCAAKAK0ASEDDAELIAAgBjcDoAEgACAAKAJkIAFBcHEiASACQXBxIgIQRzYCqAEgACAAKAJkIAFBEGoiAyACEEc2AqwBIAAgACgCZCABIAJBEGoiARBHNgKwASAAIAAoAmQgAyABEEciAzYCtAEgACgCTCECIAAoAkghAQsgAAJ/IAJBD3GyQwAAgD2UuyABQQ9xskMAAIA9lLsiBCADtyAAKAKwAbciBaGiIAWgIAQgACgCrAG3IAAoAqgBtyIEoaIgBKAiBKGiIASgIgSZRAAAAAAAAOBBYwRAIASqDAELQYCAgIB4CyIBIAAoAlBqIAQgAbdja0EIayIANgKYASAAC04LDwAgAEGEjAI2AgAgABAKCw0AIABBhIwCNgIAIAALHQEBf0EIEAsiASAAKAIENgIEIAFB6PoANgIAIAELYgAgACACKAIAIgEoArgBNgIAIAAgASgCvAEiADYCBCAABEAgACAAKAIEQQFqNgIECwJAIAIoAgQiAEUNACAAIAAoAgQiAUEBazYCBCABDQAgACAAKAIAKAIIEQAAIAAQCQsLDwAgAEGwigI2AgAgABAKCw0AIABBsIoCNgIAIAALFgAgASgCBCABKAIAaiAAKAIEQX9zagsPACAAQYCJAjYCACAAEAoLDQAgAEGAiQI2AgAgAAsNACAAKAIEIAEoAgBqCw8AIABBzIcCNgIAIAAQCgsNACAAQcyHAjYCACAAC4YIAwt/CHwGfiMAQSBrIgQkACAAKAIcIQkCQCAAKAIEIgItAAgEQCACKAIMIQMMAQsgAigCdCEAIAQgAikDIDcDGCAEIAIpAxg3AxAgBCACKQMQNwMIAn8gBCsDCCIMmUQAAAAAAADgQWMEQCAMqgwBC0GAgICAeAtBAmsiAUECdSEGAn8gBCsDECIMmUQAAAAAAADgQWMEQCAMqgwBC0GAgICAeAtBAmsiA0ECdSEHAn8gBCsDGCIMmUQAAAAAAADgQWMEQCAMqgwBC0GAgICAeAtBAmsiBUECdSEIIAFBA3G3RAAAAAAAANA/oiIORAAAAAAAAPC/oCEPIAApAwgiFkKt/tXk1IX9qNgAfkLPgp677+/eghR8IBZ+IRkgA0EDcbdEAAAAAAAA0D+iIhBEAAAAAAAA8L+gIREgBUEDcbdEAAAAAAAA0D+iIhJEAAAAAAAA8L+gIRNEAAAAAAAA8H8hDEEAIQNBACEBA0AgDyAOIAFBBHEiBRsgCCABQQFxIgpqrCIUIAcgAUECcSILQQF2aqwiFyAZIAYgBUECdmqsIhh8IhVCrf7V5NSF/ajYAH5Cz4Keu+/v3oIUfCAVfnwiFUKt/tXk1IX9qNgAfkLPgp677+/eghR8IBV+fCIVQq3+1eTUhf2o2AB+Qs+Cnrvv796CFHwgFX4gGHwiGEKt/tXk1IX9qNgAfkLPgp677+/eghR8IBh+IBd8IhdCrf7V5NSF/ajYAH5Cz4Keu+/v3oIUfCAXfiAUfCIUQhiIp0H/B3G3RAAAAAAAAFA/okQAAAAAAADgv6BEzczMzMzM7D+ioCINIA2iIBEgECALGyAUQq3+1eTUhf2o2AB+Qs+Cnrvv796CFHwgFH4gFnwiFEIYiKdB/wdxt0QAAAAAAABQP6JEAAAAAAAA4L+gRM3MzMzMzOw/oqAiDSANoiATIBIgChsgFEKt/tXk1IX9KH5Cz4Keuy98IBR+IBZ8QhiIp0H/B3G3RAAAAAAAAFA/okQAAAAAAADgv6BEzczMzMzM7D+ioCINIA2ioKAiDSAMIAwgDWQiBRshDCABIAMgBRshAyABQQFqIgFBCEcNAAsgACgCBBAVIQEgACgCACIAIANBAnZBAXEgBmogA0EBdkEBcSAHaiADQQFxIAhqIAAoAgAoAgARCAAhACABIAEoAgQiA0EBazYCBCADRQRAIAEgASgCACgCCBEAACABEAkLIAAhAyACQQE6AAggAiADNgIMCwJAAkAgCUEQaiIBKAIAIgBFDQAgASECA0AgAiAAIAAoAhAgA0giBhshAiAAQQRqIAAgBhsoAgAiAA0ACyABIAJGDQAgAyACKAIQTg0BCyABIQILIARBIGokACABIAJHC3wBAn8gAEHkhgI2AgACQCAAKAIgIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLIABBpPkBNgIAAkAgACgCCCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCyAAEAoLegECfyAAQeSGAjYCAAJAIAAoAiAiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsgAEGk+QE2AgACQCAAKAIIIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLIAALDwAgAEHohQI2AgAgABAKCw0AIABB6IUCNgIAIAALKwEBfyAAQbiEAjYCACAAQQxqIAAoAhAQOSAAKAIIIgEEQCABEAkLIAAQCgspAQF/IABBuIQCNgIAIABBDGogACgCEBA5IAAoAggiAQRAIAEQCQsgAAufAgEDfyMAQTBrIgMkAAJAIAEoAggiBEUNACABKAIEIQUgBBAVIgFFDQBBOBALIgRB6IUCNgIAIARCADcCBCADIAIoAgA2AiggAyACKAIEIgI2AiwCQCACBEAgAiACKAIEQQFqNgIEIAMgATYCJCADIAU2AiAgAyADKQMoNwMYIAMgAykDIDcDECAEQRBqIANBGGogA0EQahDMASEBIAAgBDYCBCAAIAE2AgAgAiACKAIEIgBBAWs2AgQgAA0BIAIgAigCACgCCBEAACACEAkMAQsgAyABNgIkIAMgBTYCICADIAMpAyg3AwggAyADKQMgNwMAIARBEGogA0EIaiADEMwBIQEgACAENgIEIAAgATYCAAsgA0EwaiQADwsQJgALDwAgAEG0gwI2AgAgABAKCw0AIABBtIMCNgIAIAALcwECfyAAQfiCAjYCAAJAIAAoAhAiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsCQCAAKAIIIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLIAAQCgtxAQJ/IABB+IICNgIAAkAgACgCECIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAAoAggiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsgAAs0AQJ/IAAoAgQiBSAFKAIAKAIAEQEABH8gACgCDCIAIAEgAiADIAAoAgAoAgARCAAFQQALCw8AIABBgIICNgIAIAAQCgsNACAAQYCCAjYCACAAC3MBAn8gAEG8gQI2AgACQCAAKAIQIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLAkAgACgCCCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCyAAEAoLcQECfyAAQbyBAjYCAAJAIAAoAhAiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsCQCAAKAIIIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLIAALnwQBBX8jAEEwayIDJAAgASgCBCEFIAMgAigCACIGNgIgIAMgAigCBCIENgIkIAQEQCAEIAQoAgRBAWo2AgQLIAUoAgAoAgAhByADIAMpAyA3AwggA0EoaiAFIANBCGogBxEDACABKAIMIQEgAyAENgIUIAMgBjYC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QEHoxJcDIAI2AgAgAhAKC0HkxJcDIAEoAgQ2AgBB6MSXAyABKAIINgIAQezElwMgASgCDDYCACAAKALAAiIBBEAgACABNgLEAiABEAoLIABBEBALIgE2ArACIAAgAUEQaiICNgK4AiABQoCAgICAgID4PzcDCCABQoCAgICAgID4PzcDACAAIAI2ArQCQfDElwMgAEHABmpBekQAAAAAAADwPyAAQbACahARIgEoAgA2AgBB9MSXAygCACICBEBB+MSXAyACNgIAIAIQCgtB9MSXAyABKAIENgIAQfjElwMgASgCCDYCAEH8xJcDIAEoAgw2AgAgACgCsAIiAQRAIAAgATYCtAIgARAKCyAAQQA2AqgCIABCADcDoAJBgMWXAyAAQcAGakF4RAAAAAAAAPA/IABBoAJqEBEiASgCADYCAEGExZcDKAIAIgIEQEGIxZcDIAI2AgAgAhAKC0GExZcDIAEoAgQ2AgBBiMWXAyABKAIINgIAQYzFlwMgASgCDDYCACAAKAKgAiIBBEAgACABNgKkAiABEAoLIABBGBALIgE2ApACIAAgAUEYaiICNgKYAiABQejnASkDADcDECABQeDnASkDADcDCCABQdjnASkDADcDACAAIAI2ApQCQZDFlwMgAEHABmpBfkQAAAAAAADwPyAAQZACahARIgEoAgA2AgBBlMWXAygCACICBEBBmMWXAyACNgIAIAIQCgtBlMWXAyABKAIENgIAQZjFlwMgASgCCDYCAEGcxZcDIAEoAgw2AgAgACgCkAIiAQRAIAAgATYClAIgARAKCyAAQQA2AogCIABCADcDgAJBoMWXAyAAQcAGakF4RAAAAAAAAPA/IABBgAJqEBEiASgCADYCAEGkxZcDKAIAIgIEQEGoxZcDIAI2AgAgAhAKC0GkxZcDIAEoAgQ2AgBBqMWXAyABKAIINgIAQazFlwMgASgCDDYCACAAKAKAAiIBBEAgACABNgKEAiABEAoLIABBEBALIgE2AvABIAAgAUEQaiICNgL4ASABQoCAgICAgID4PzcDCCABQoCAgICAgID4PzcDACAAIAI2AvQBQbDFlwMgAEHABmpBekQAAAAAAADwPyAAQfABahARIgEoAgA2AgBBtMWXAygCACICBEBBuMWXAyACNgIAIAIQCgtBtMWXAyABKAIENgIAQbjFlwMgASgC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BEEAOgAUIAJCADcD+AEgAkEANgKAAkEAIQBBnLyXAygCACIBQZi8lwMoAgAiA0cEQCABIANrIgFBAEgNASACIAEQCyIANgL4ASACIAAgAUF8cWo2AoACIAIgACADIAEQDCABajYC/AELIAJB1M8BNgLgASACIAJB4AFqIgE2AvABIAJBiANqIAJBiAJqQfi8lwNBCCACQfgBaiABEPEBQcu9lwMsAABBAEgEQEHAvZcDKAIAEAoLQcC9lwMgAikDiAM3AwBBzL2XAyACKQKUAzcCAEHIvZcDIAIoApADNgIAQei9lwMoAgAhAUHovZcDQQA2AgAgAkEAOgCIAyACQQA6AJMDAkAgAQJ/IAFB2L2XA0YEQEHYvZcDKAIAQRBqDAELIAFFDQEgASgCAEEUagsoAgARAAALIAJBoANqIQECQCACKAKwAyIDRQRAQei9lwNBADYCAAwBCyABIANGBEBB6L2XA0HYvZcDNgIAIAFB2L2XAyACKAKgAygCDBECAAwBC0HovZcDIAM2AgAgAkEANgKwAwtB8L2XAyACKQO4AzcDAEH4vZcDIAIoAsADNgIAQfy9lwMoAgAiAwRAQYC+lwMgAzYCACADEAoLQfy9lwMgAigCxAM2AgAgAikDyAMhESACQQA2AswDQYC+lwMgETcDACACQgA3AsQDAkACfyABIAIoArADIgNGBEAgAigCoANBEGoMAQsgA0UNASADIgEoAgBBFGoLIQMgASADKAIAEQAACyACLACTA0EASARAIAIoAogDEAoLAkACfyACKALwASIBIAJB4AFqRgRAIAJB4AFqIQEgAigC4AFBEGoMAQsgAUUNASABKAIAQRRqCyEDIAEgAygCABEAAAsgAARAIAIgADYC/AEgABAKCyAEEAogAkEGOgDbASACQQA6ANYBIAJBADYCyAEgAkIANwPAASACQeIeKAAANgLQASACQeYeLwAAOwHUAUEAIQNBnLyXAygCACIAQZi8lwMoAgAiAUcEQCAAIAFrIgBBAEgNASACIAAQCyIDNgLAASACIAMgAEF8cWo2AsgBIAIgAyABIAAQDCAAajYCxAELIAJB5NEBNgKoASACIAJBqAFqIgA2ArgBIAJBiANqIAJB0AFqQcC9lwNBCCACQcABaiAAEElBk76XAywAAEEASARAQYi+lwMoAgAQCgtBiL6XAyAC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AwAgAkEoaiIHIgBBATYCDCAAQQc2AgggAEQAAAAAAADOvzkDACMAQUBqIgAkAEEUEAsiA0HcjgI2AgAgA0IANwIEIANBADYCECADQeyPAjYCDCAAQRAQCyIENgIwIABCi4CAgICCgICAfzcCNCAEQfbRACgAACIINgAHIARB79EAKQAAIhE3AAAgBEEAOgALIABBMGoQGyAALAA7QQBIBEAgACgCMBAKCyAAIAM2AiwgACADQQxqNgIoQRQQCyIDQdyOAjYCACADQgA3AgQgA0GAgID8AzYCECADQeyPAjYCDCAAQRAQCyIENgIwIABCi4CAgICCgICAfzcCNCAEIAg2AAcgBCARNwAAIARBADoACyAAQTBqEBsgACwAO0EASARAIAAoAjAQCgsgACADNgIkIAAgA0EMajYCIEEUEAsiA0HcjgI2AgAgA0IANwIEIANBADYCECADQeyPAjYCDCAAQRAQCyIENgIwIABCi4CAgICCgICAfzcCNCAEQfbRACgAADYAByAEQe/RACkAADcAACAEQQA6AAsgAEEwahAbIAAsADtBAEgEQCAAKAIwEAoLIAAgAzYCHCAAIANBDGo2AhggACAAKQMoNwMQIAAgACkDIDcDCCAAIAApAxg3AwAgAkEQaiIDIABBEGogAEEIaiAAEMsBIABBQGskACACQegAaiIAQQBBgAEgAkHIAGogBiAHQQJBAUEBQQBBACADEIICIAJCADcCCCACIAIpAwg3AwAgAUEIaiIDIABBlQJBASACQQBBAUEAQQEQgQICQCACKALQASIARQ0AIAAgACgCBCIEQQFrNgIEIAQNACAAIAAoAgAoAggRAAAgABAJCwJAIAIoAsgBIgBFDQAgACAAKAIEIgRBAWs2AgQgBA0AIAAgACgCACgCCBEAACAAEAkLAkAgAigCwAEiAEUNACAAIAAoAgQiBEEBazYCBCAEDQAgACAAKAIAKAIIEQAAIAAQCQsCQCACKAIkIgBFDQAgACAAKAIEIgRBAWs2AgQgBA0AIAAgACgCACgCCBEAACAAEAkLAkAgAigCHCIARQ0AIAAgACgCBCIEQQFrNgIEIAQNACAAIAAoAgAoAggRAAAgABAJCwJAIAIoAhQiAEUNACAAIAAoAgQiBEEBazYCBCAEDQAgACAAKAIAKAIIEQAAIAAQCQsgAkHgAWokAEGwupcDIAMQNwJAIAEoAowBIgBFDQAgACAAKAIEIgJBAWs2AgQgAg0AIAAgACgCACgCCBEAACAAEAkLAkAgASgCeCIARQ0AIAAgACgCBCICQQFrNgIEIAINACAAIAAoAgAoAggRAAAgABAJCwJAIAEoAnAiAEUNACAAIAAoAgQiAkEBazYCBCACDQAgACAAKAIAKAIIEQAAIAAQCQsCQCABKAJoIgBFDQAgACAAKAIEIgJBAWs2AgQgAg0AIAAgACgCACgCCBEAACAAEAkLIAFBoAFqJABBjAIQC0EAQYwCEBwhACMAQYABayICJAAgAEIANwIAIABCADcCMCAAQgA3AkQgAEEANgJkIABCADcBJiAAQgA3AiAgAEIANwIYIABCADcCECAAQgA3AgggAEIANwI4IABBQGtBADoAACAAQgA3AkwgAEIANwJUIABBADYCXCAAIABB0ABqNgJoIAAgAEHEAGo2AmAgAiAANgJUIAJB6PoANgJQIAIgAkHQAGo2AmAgAiAANgI8IAJBhP0ANgI4IAIgAkE4ajYCSEEIEAsiA0KFgICAwAA3AgAgAiAANgIkIAJB6PoANgIgIAIgAkEgajYCMCACIAA2AmwgAkHo+gA2AmggAiACQegAaiIENgJ4QQUgBBBPAn8CfyAEIAIoAngiAUYEQCACQegAaiEBIAIoAmhBEGoMAQtBBCABRQ0BGiABKAIAQRRqCyEEIAEgBCgCABEAACADKAIECyEEAkAgAigCMCIBBEAgAkEgaiABRwRAIAIgASABKAIAKAIIEQEANgJ4DAILIAIgAkHoAGoiATYCeCACQSBqIAEgAigCICgCDBECAAwBCyACQQA2AngLIAQgAkHoAGoiBBBPAkACfyAEIAIoAngiAUcEQCABRQ0CIAEoAgBBFGoMAQsgAkHoAGohASACKAJoQRBqCyEEIAEgBCgCABEAAAsCQAJ/IAIoAjAiASACQSBqRgRAIAJBIGohASACKAIgQRBqDAELIAFFDQEgASgCAEEUagshBCABIAQoAgARAAALIAMQCgJAAkACQCACKAJIIgFFBEAgAkEANgIYDAELAkAgAkE4aiABRgRAIAIgAkEIaiIBNgIYIAJBOGogASACKAI4KAIMEQIAIAIoAhghAQwBCyACIAEgASgCACgCCBEBACIBNgIYCyABDQELIAJBADYCeAwBCyACQQhqIAFGBEAgAiACQegAaiIBNgJ4IAJBCGogASACKAIIKAIMEQIADAELIAIgASABKAIAKAIIEQEANgJ4C0ECIAJB6ABqIgMQTwJAAn8gAyACKAJ4IgFGBEAgAkHoAGohASACKAJoQRBqDAELIAFFDQEgASgCAEEUagshAyABIAMoAgARAAALAkAgAigCGCIBBEAgAkEIaiABRwRAIAIgASABKAIAKAIIEQEANgJ4DAILIAIgAkHoAGoiATYCeCACQQhqIAEgAigCCCgCDBECAAwBCyACQQA2AngLQQEgAkHoAGoiAxBPAkACfyADIAIoAngiAUcEQCABRQ0CIAEoAgBBFGoMAQsgAkHoAGohASACKAJoQRBqCyEDIAEgAygCABEAAAsCQCACKAIYIgEEQCACQQhqIAFHBEAgAiABIAEoAgAoAggRAQA2AngMAgsgAiACQegAaiIBNgJ4IAJBCGogASACKAIIKAIMEQIADAELIAJBADYCeAtBAyACQegAaiIDEE8CQAJ/IAMgAigCeCIBRwRAIAFFDQIgASgCAEEUagwBCyACQegAaiEBIAIoAmhBEGoLIQMgASADKAIAEQAACwJAAn8gAigCGCIBIAJBCGpGBEAgAkEIaiEBIAIoAghBEGoMAQsgAUUNASABKAIAQRRqCyEDIAEgAygCABEAAAsCQAJ/IAIoAkgiASACQThqRgRAIAJBOGohASACKAI4QRBqDAELIAFFDQEgASgCAEEUagshAyABIAMoAgARAAALAkACfyACKAJgIgEgAkHQAGpGBEAgAkHQAGohASACKAJQQRBqDAELIAFFDQEgASgCAEEUagshAyABIAMoAgARAAALIAJBgAFqJAAgACIBQgA3AmwgAEIANwKEASAAQZABaiIAQQA2AgQgAEEANgIAIABCADcCKCAAQgA3AgggAEEANgIQIABCADcCMCAAQgA3AjggAEFAa0GAgID7AzYCACAAQShqQQgQ9AEgAEIANwJUIABCADcCTCAAQgA3AkQgAEHgAGoiAkIANwIAIABBfzYCXCAAQgA3AmggAEIANwJwIABBgICA+wM2AngCQAJAQQhBCAJ/IAIoAhAgAigCDGtBGG2zIAIqAhiVIhNDAACAT10gE0MAAAAAYHEEQCATqQwBC0EACyIAIABBCEkbIgAgAEEITRsiAEEATgRA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KAKgAjYC6AEgASABKAKkAiIANgLsASAABEAgACAAKAIEQQFqNgIECyABQdS0AjYC0AEgAUEANgLIASABQgA3A8ABIAEoAoACIQIgASgChAIhAyABIAFB0AFqNgLgAQJAAkACQCACIANHBEAgAyACayIFQQBIDQEgASAFEAsiADYCwAEgASAANgLEASABIAAgBUF4cWo2AsgBA0AgACACKAIANgIAIAAgAigCBCIFNgIEIAUEQCAFIAUoAgRBAWo2AgQLIABBCGohACACQQhqIgIgA0cNAAsgASAANgLEAQsgASABKQPoATcDQCABQfABakGIvpcDIAFBQGsgAUHQAWogAUHAAWoQSAJAIAEoAvQBIgBFDQAgACAAKAIEIgNBAWs2AgQgAw0AIAAgACgCACgCCBEAACAAEAkLIAEoAsABIgMEQCABKALEASICIAMiAEcEQANAAkAgAkEIayICKAIEIgBFDQAgACAAKAIEIgVBAWs2AgQgBQ0AIAAgACgCACgCCBEAACAAEAkLIAIgA0cNAAsgASgCwAEhAAsgASADNgLEASAAEAoLAkACfyABKALgASICIAFB0AFqRgRAIAFB0AFqIQIgASgC0AFBEGoMAQsgAkUNASACKAIAQRRqCyEAIAIgACgCABEAAAsgARAtIAt9QsCEPX83AzBBhPYAIAFBMGoQNhAtIQsgASABKAKgAjYCsAEgASABKAKkAiIANgK0ASAABEAgACAAKAIEQQFqNgIECyABQdS0AjYCmAEgAUEANgKQASABQgA3A4gBIAEoAoACIQIgASgChAIhAyABIAFBmAFqNgKoASACIANHBEAgAyACayIFQQBIDQIgASAFEAsiADYCiAEgASAANgKMASABIAAgBUF4cWo2ApABA0AgACACKAIANgIAIAAgAigCBCIFNgIEIAUEQCAFIAUoAgRBAWo2AgQLIABBCGohACACQQhqIgIgA0cNAAsgASAANgKMAQsgASABKQOwATcDKCABQbgBakHQvpcDIAFBKGogAUGYAWogAUGIAWoQSAJAIAEoArwBIgBFDQAgACAAKAIEIgNBAWs2AgQgAw0AIAAgACgCACgCCBEAACAAEAkLIAEoAogBIgMEQCABKAKMASICIAMiAEcEQANAAkAgAkEIayICKAIEIgBFDQAgACAAKAIEIgVBAWs2AgQgBQ0AIAAgACgCACgCCBEAACAAEAkLIAIgA0cNAAsgASgCiAEhAAsgASADNgKMASAAEAoLAkACfyABKAKoASICIAFBmAFqRgRAIAFBmAFqIQIgASgCmAFBEGoMAQsgAkUNASACKAIAQRRqCyEAIAIgACgCABEAAAsgARAtIAt9QsCEPX83AyBBoPYAIAFBIGoQNhAtIQsgASABKAKgAjYCeCABIAEoAqQCIgA2AnwgAARAIAAgACgCBEEBajYCBAsgAUHUtAI2AmAgAUEANgJYIAFCADcDUCABKAKAAiECIAEoAoQCIQMgASABQeAAajYCcCACIANHBEAgAyACayIFQQBIDQMgASAFEAsiADYCUCABIAA2AlQgASAAIAVBeHFqNgJYA0AgACACKAIANgIAIAAgAigCBCIFNgIEIAUEQCAFIAUoAgRBAWo2AgQLIABBCGohACACQQhqIgIgA0cNAAsgASAANgJUCyABIAEpA3g3AxggAUGAAWpBmL+XAyABQRhqIAFB4ABqIAFB0ABqEEgCQCABKAKEASIARQ0AIAAgACgCBCIDQQFrNgIEIAMNACAAIAAoAgAoAggRAAAgABAJCyABKAJQIgMEQCABKAJUIgIgAyIARwRAA0ACQCACQQhrIgIoAgQiAEUNACAAIAAoAgQiBUEBazYCBCAFDQAgACAAKAIAKAIIEQAAIAAQCQsgAiADRw0ACyABKAJQIQALIAEgAzYCVCAAEAoLAkACfyABKAJwIgIgAUHgAGpGBEAgAUHgAGohAiABKAJgQRBqDAELIAJFDQEgAigCAEEUagshACACIAAoAgARAAALIAEQLSALfULAhD1/NwMQQbv2ACABQRBqEDZBsPIAEHwgASAENgJMIAEgBjYCSCAEIAQoAgRBAWo2AgQgASABKQNINwMIQQAhBiMAQSBrIggkACAIQQhqIgBEAAAAAAAAAAA5AxAgAEQAAAAAAAAAADkDCCAARAAAAAAAAAAAOQMAIAEoAgghA0FAIQUDQEEAIQcDQCAARAAAAAAAAAAAOQMQIAAgBbciCTkDCCAAIAe3Igo5AwAgBkGAypcDaiICIAMgABAiOgAAIABEAAAAAAAA8D85AxAgACAJOQMIIAAgCjkDACACIAMgABAiOgABIABEAAAAAAAAAEA5AxAgACAJOQMIIAAgCjkDACACIAMgABAiOgAC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KCIDIAFBCHZB/P//B3FqKAIAIQcCQCACQQp2IgYgACgCLCADa0ECdSIESQ0AIAVBADYCDCAAQShqIAYgBGtBAWogBUEMahAwIAQgACgCLCAAKAIoIgNrQQJ1IghPDQADQEGAgAIQCyEDIAAoAiggBEECdGogAzYCACAEQQFqIgQgCEcNAAsgACgCKCEDCyADIAZBAnRqKAIAIAJB/wdxQQV0aiIAIAcgAUH/B3FBBXRqIgEpAAA3AAAgACABKQAYNwAYIAAgASkAEDcAECAAIAEpAAg3AAggBUEQaiQAC0ABAn8gAEHAuwE2AgACQCAAKAIIIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLIAALtQEBA38jAEEQayICJAAgAkEQEAsiATYCACACQo2AgICAgoCAgH83AgQgAUGwNikAADcABSABQas2KQAANwAAIAFBADoADSACEBkgAiwAC0EASARAIAIoAgAQCgsgAEEQaiIBQYABahAOIAFBGGoQDgJAIAEoAhAiAEUNACAAIAAoAgQiA0EBazYCBCADDQAgACAAKAIAKAIIEQAAIAAQCQsgASgCBCIABEAgABAJCyACQRBqJAALDwAgAEHUugE2AgAgABAKCw0AIABB1LoBNgIAIAALDwAgAEHkuQE2AgAgABAKCw0AIABB5LkBNgIAIAALBgBB1LkBCxQAIABBBGpBACABKAIEQey4AUYbC7gBAQF/IAEoAgQhACAEKAIAIQQgAygCACEDIAIoAgAhAiABQQA2AgQgASgCACEFIAFBADYCACMAQRBrIgEkACABIAI2AgwgASADNgIIIAEgBDYCBCAFKAJwIgJFBEAQMgALIAIgAUEMaiABQQhqIAFBBGogAigCACgCGBEIACECIAFBEGokACACIQECQCAARQ0AIAAgACgCBCICQQFrNgIEIAINACAAIAAoAgAoAggRAAAgABAJCyABCwsAIAFBiLcBNgIAC8kBAQJ/IAAoAigiAyACQQh2Qfz//wdxaigCACEEIwBBIGsiAEEYaiADIAFBCHZB/P//B3FqKAIAIAFB/wdxQQV0aiIBQRhqKQAANwMAIAAgASkAEDcDECAAIAEpAAg3AwggACABKQAANwMAIAEgBCACQf8HcUEFdGoiAkEYaikAADcAGCABIAIpABA3ABAgASACKQAINwAIIAEgAikAADcAACACIAApAxg3ABggAiAAKQMQNwAQIAIgACkDCDcACCACIAApAwA3AAALEQBBCBALIgBBiLcBNgIAIAALDwAgAEGctgE2AgAgABAKCw0AIABBnLYBNgIAIAALBgBBjLYBCxQAIABBBGpBACABKAIEQdC1AUYbCwsARAAAAAAAAAAACwsAIAFBtLQBNgIACxEAQQgQCyIAQbS0ATYCACAACwYAQaS0AQsUACAAQQRqQQAgASgCBEGoswFGGwsgACAAKAIoIAFBCHZB/P//B3FqKAIAIAFB/wdxQQV0agveAwEGfyMAQSBrIgUkACAAKAIIIQcgACgCBCEAIAEoAgQhBiAEKAIAIQQgAygCACEDIAIoAgAhCSABQQA2AgQgASgCACEKIAFBADYCAAJAAkAgACAHRgRAQQAhAQwBCyAGRQRAA0AgBUEANgIMIAUgCjYCCCAFIAk2AhwgBSADNgIYIAUgBDYCFCAAKAIQIgFFDQMgASAFQQhqIAVBHGogBUEYaiAFQRRqIAEoAgAoAhgRCgAhAQJAIAUoAgwiAkUNACACIAIoAgQiCEEBazYCBCAIDQAgAiACKAIAKAIIEQAAIAIQCQsgAQ0CIABBGGoiACAHRw0AC0EAIQEMAQsDQCAGIAYoAgRBAWo2AgQgBSAGNgIMIAUgCjYCCCAFIAk2AhwgBSADNgIYIAUgBDYCFCAAKAIQIgFFDQIgASAFQQhqIAVBHGogBUEYaiAFQRRqIAEoAgAoAhgRCgAhAQJAIAUoAgwiAkUNACACIAIoAgQiCEEBazYCBCAIDQAgAiACKAIAKAIIEQAAIAIQCQsgAQ0BIABBGGoiACAHRw0AC0EAIQELAkAgBkUNACAGIAYoAgQiAEEBazYCBCAADQAgBiAGKAIAKAIIEQAAIAYQCQsgBUEgaiQAIAEPCxAyAAt6AQR/IAAoAgQiAwRAIAAoAggiAiADIgFHBEADQAJAAn8gAkEYayICKAIQIgEgAkYEQCACIgEoAgBBEGoMAQsgAUUNASABKAIAQRRqCyEEIAEgBCgCABEAAAsgAiADRw0ACyAAKAIEIQELIAAgAzYCCCABEAoLIAAQCgt2AQR/IAAoAgQiAwRAIAAoAggiAiADIgFHBEADQAJAAn8gAkEYayICKAIQIgEgAkYEQCACIgEoAgBBEGoMAQsgAUUNASABKAIAQRRqCyEEIAEgBCgCABEAAAsgAiADRw0ACyAAKAIEIQELIAAgAzYCCCABEAoLC+cBAQR/IAFCADcCBCABQYixATYCACABQQA2AgwgACgCCCICIAAoAgQiBGsiBUEYbSEDAkAgAiAERwRAIANBq9Wq1QBPDQEgASAFEAsiAjYCBCABIAI2AgggASACIANBGGxqNgIMIAAoAgQiAyAAKAIIIgRHBEADQAJAIAMoAhAiAEUEQCACQQA2AhAMAQsgACADRgRAIAIgAjYCECADKAIQIgAgAiAAKAIAKAIMEQIADAELIAIgACAAKAIAKAIIEQEANgIQCyACQRhqIQIgA0EYaiIDIARHDQALCyABIAI2AggLDwsQDwAL2wEBBH9BEBALIgJCADcCBCACQYixATYCACACQQA2AgwgACgCCCIEIAAoAgQiAGsiAUEYbSEDAkAgACAERwRAIANBq9Wq1QBPDQEgAiABEAsiATYCBCACIAE2AgggAiABIANBGGxqNgIMA0ACQCAAKAIQIgNFBEAgAUEANgIQDAELIAAgA0YEQCABIAE2AhAgACgCECIDIAEgAygCACgCDBECAAwBCyABIAMgAygCACgCCBEBADYCEAsgAUEYaiEBIABBGGoiACAERw0ACyACIAE2AggLIAIPCxAPAAuDAQEEfyAAQYixATYCACAAKAIEIgMEQCAAKAIIIgIgAyIBRwRAA0ACQAJ/IAJBGGsiAigCECIBIAJGBEAgAiIBKAIAQRBqDAELIAFFDQEgASgCAEEUagshBCABIAQoAgARAAALIAIgA0cNAAsgACgCBCEBCyAAIAM2AgggARAKCyAAEAoLgQEBBH8gAEGIsQE2AgAgACgCBCIDBEAgACgCCCICIAMiAUcEQANAAkACfyACQRhrIgIoAhAiASACRgRAIAIiASgCAEEQagwBCyABRQ0BIAEoAgBBFGoLIQQgASAEKAIAEQAACyACIANHDQALIAAoAgQhAQsgACADNgIIIAEQCgsgAAsGAEH4sAELFAAgAEEEakEAIAEoAgRBrLABRhsL1gEBAn8gAygCACEDIAIoAgAhAiABKAIAIQQgACgCCBAVIQECQCAAKAIEKAKYKiIFIAQgAiADIAUoAgAoAgQRCAAiAkUEQEEAIQMMAQtBEBALIgMgAjYCDCADQcScATYCACADQgA3AgQLIAAoAhAiAiACKAIAKAIAEQkAGiAAKAIMIQACQCADRQ0AIAMgAygCBCICQQFrNgIEIAINACADIAMoAgAoAggRAAAgAxAJCyABIAEoAgQiAkEBazYCBCACRQRAIAEgASgCACgCCBEAACABEAkLIAALDgAgAEEEahDzASAAEAoLCgAgAEEEahDzAQu3AQEBfyABQfiuATYCACABIAAoAgQ2AgQgASAAKAIIIgI2AgggAgRAIAIgAigCCEEBajYCCAsgASAAKAIMNgIMIAEgACgCEDYCECABIAAoAhQiAjYCFCACBEAgAiACKAIEQQFqNgIECyABIAAoAhg2AhggASAAKAIcIgI2AhwgAgRAIAIgAigCBEEBajYCBAsgASAAKAIgNgIgIAEgACgCJCIANgIkIAAEQCAAIAAoAgRBAWo2AgQLC70BAQJ/QSgQCyICQfiuATYCACACIAAoAgQ2AgQgAiAAKAIIIgE2AgggAQRAIAEgASgCCEEBajYCCAsgAiAAKAIMNgIMIAIgACgCEDYCECACIAAoAhQiATYCFCABBEAgASABKAIEQQFqNgIECyACIAAoAhg2AhggAiAAKAIcIgE2AhwgAQRAIAEgASgCBEEBajYCBAsgAiAAKAIgNgIgIAIgACgCJCIANgIkIAAEQCAAIAAoAgRBAWo2AgQLIAILsgEBAn8gAEH4rgE2AgACQCAAKAIkIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLAkAgACgCHCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAAoAhQiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsgACgCCCIBBEAgARAJCyAAEAoLsAEBAn8gAEH4rgE2AgACQCAAKAIkIgFFDQAgASABKAIEIgJBAWs2AgQgAg0AIAEgASgCACgCCBEAACABEAkLAkAgACgCHCIBRQ0AIAEgASgCBCICQQFrNgIEIAINACABIAEoAgAoAggRAAAgARAJCwJAIAAoAhQiAUUNACABIAEoAgQiAkEBazYCBCACDQAgASABKAIAKAIIEQAAIAEQCQsgACgCCCIBBEAgARAJCyAACwYAQeiuAQsUACAAQQRqQQAgASgCBEGcrgFGGwsEAEEACwsAIAFB6KwBNgIACxEAQQgQCyIAQeisATYCACAACwYAQdisAQsUACAAQQhqQQAgASgCBEHwqwFGGwurGQMKfBV/BH4jAEEQayIRJAAgAygCACEVIAIoAgAhDyABKAIAIRZEAAAAAAAA8L8gACgCKCIBIAEoAgAoAgARCQAiBkR7FK5H4XrkP6IiBEQAAAAAAADwP6QgBEQAAAAAAADwv2MbIgREAAAAAAAA4D+iIAQgBCAEoqJEAAAAAAAAOMCjoCEEIAAoAjAiASABKAIAKAIAEQkARAAAAAAAAAAAZgRAAnxEmpmZmZmZqT8gACgCOCIBIAEoAgAoAgARCQBEAAAAAAAA8D+gRAAAAAAAAOA/oiIFRAAAAAAAAAAAYw0AGkSamZmZmZm5PyAFRAAAAAAAAPA/ZA0AGiAFRJqZmZmZmak/okSamZmZmZmpP6ALIQUgAEFAaygCACIBIAEoAgAoAgARCQAhByAAKAJIIgEgASgCACgCABEJAEQAAAAAAAD4P6KZIAWhIgggB0QAAAAAAAD4P6KZIAWhIgUgBSAIYxsiBSAEIAQgBWQbIQQLIBEgFjYCACARIA82AgwgESAVNgIIIAAoAiAiAQRAIAEgESARQQxqIBFBCGogASgCACgCGBESACEFIAAoAgwQFSEXIBEgACgCCCIAKAJYNgIAIBEgACgCXCIANgIEIAAEQCAAIAAoAgRBAWo2AgQLIBEoAgAhDiAEIAWgIQxBACEDIwBBIGsiECQAAkAgBkQAAAAAAABQwGUEQEEBIA4oAiwiAEEEQQxBSiAAKAIAIgAgAEFKThsgD0obaikCACIkQiCIpyAkpyAPTBshAQwBC0QAAAAAAAAAACEEAkAgDEQAAAAAAAAAAGVFDQACfwJAIA4oAiwiAEEEQQxBSiAAKAIAIgAgAEFKThsgD0obaikCACIkpyAPTA0AICRCgICAgHCDQoCAgIDAA1INAEEcIQFBAAwBCyAPQQFqIgBBDG0iASABQQxsIABHIA9Bf0hxayEeIBZBBWsiAEEQbSIBIAFBBHQgAEcgFkEFSHFrIR8gFUEFayIAQRBtIgEgAUEEdCAARyAVQQVIcWsiGEEEdCEgIBhBAWoiG0EEdCEhQf////8HIQFB/////wchAEH/////ByECQgAhJEEBIRMDQCADIB9qIhRBBHQhHEF/IRkDQCAZIB5qIhJBDGwhHSAUIA4oAjhrIA4oAkQgGCAOKAJAayAOKAJIIBIgDigCPGtsamxqQQN0IhogDigCKGopAwAiI0L///////////8AUQRAIA4oAhwiAyAUIBIgGCADKAIAKAIEEQgAIgNBCiADKAIAKAIQEQQAIBxqISIgA0EJIAMoAgAoAhARBAAgHWpB/x9xrSAirUImhoQgA0EKIAMoAgAoAhARBAAgIGpB////H3GtQgyGhCEjIA4oAiggGmogIzcDACADIAMoAgAoAjQRAAALAkAgI6dBFHRBFHUgD2siAyADbCAjQiaHpyAWayIDIANsaiAjQhqGQiaHpyAVayIDIANsaiIDIAFMBEAgJCElICYhJCAjISYgACECIAEhACADIQEMAQsgACADTgRAICQhJSAjISQgACECIAMhAAwBCyACIAMgAiADSCIDGyECICUgIyADGyElCyAUIA4oAjhrIA4oAkQgGyAOKAJAayAOKAJIIBIgDigCPGtsamxqQQN0IhogDigCKGopAwAiI0L///////////8AUQRAIA4oAhwiAyAUIBIgGyADKAIAKAIEEQgAIgNBCiADKAIAKAIQEQQAIBxqIRIgA0EJIAMoAgAoAhARBAAgHWpB/x9xrSASrUImhoQgA0EKIAMoAgAoAhARBAAgIWpB////H3GtQgyGhCEjIA4oAiggGmogIzcDACADIAMoAgAoAjQRAAALAkAgI6dBFHRBFHUgD2siAyADbCAjQiaHpyAWayIDIANsaiAjQhqGQiaHpyAVayIDIANsaiIDIAFMBEAgJCElICYhJCAjISYgACECIAEhACADIQEMAQsgACADTgRAICQhJSAjISQgACECIAMhAAwBCyACIAMgAiADSCIDGyECICUgIyADGyElCyAZQQFqIhlBAkcNAAtBASEDIBMhFEEAIRMgFA0ACyAQQRhqIA4gJhCkASAQQRBqIA4gJBCkASAQQQhqIA4gJRCkAUQAAAAAAADwPyEERAAAAAAAAPA/IAAgAWsiAyADQR91IgNzIANrt0QAAAAAAAA5QKOhIQgCQAJAQQEgECgCHCITIBAoAhgiAyAPTBsiFEEbRw0AIA4oAiwiEkEMQQRBSiASKAIAIhIgEkFKThsgD0gbaikCACIkpyAPSA0AICRCgICAgHCDQoCA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CwJAIAJFDQAgAiACKAIEIgBBAWs2AgQgAA0AIAIgAigCACgCCBEAACACEAkLIA0LJAEBfyAAKAIQIgEEQCABEAkLIAAoAggiAQRAIAEQCQsgABAKCyABAX8gACgCECIBBEAgARAJCyAAKAIIIgAEQCAAEAkLC10BAX8gAUG4oAE2AgAgASAAKAIENgIEIAEgACgCCCICNgIIIAIEQCACIAIoAghBAWo2AggLIAEgACgCDDYCDCABIAAoAhAiADYCECAABEAgACAAKAIIQQFqNgIICwtjAQJ/QRQQCyIBQbigATYCACABIAAoAgQ2AgQgASAAKAIIIgI2AgggAgRAIAIgAigCCEEBajYCCAsgASAAKAIMNgIMIAEgACgCECIANgIQIAAEQCAAIAAoAghBAWo2AggLIAELLQEBfyAAQbigATYCACAAKAIQIgEEQCABEAkLIAAoAggiAQRAIAEQCQsgABAKCysBAX8gAEG4oAE2AgAgACgCECIBBEAgARAJCyAAKAIIIgEEQCABEAkLIAALBgBBuKQBCxQAIABBBGpBACABKAIEQeCjAUYbC6wCAQR/IwBBIGsiBCQAIAIoAgQhAyACKAIAIQUgAkIANwIAIAMEQCADIAMoAghBAWo2AggLIAEoAgQhBiABKAIIIgIEQCACIAIoAghBAWo2AggLIAMEQCADIAMoAghBAWo2AggLQRQQCyIBIAY2AgQgAUG4oAE2AgAgASADNgIQIAEgBTYCDCABIAI2AgggBCABNgIQIARBGGogBSAEEOQBIAAgBCgCGDYCACAAIAQoAhw2AgQgBEIANwMYAkACfyAEIAQoAhAiAkYEQCAEIQIgBCgCAEEQagwBCyACRQ0BIAIoAgBBFGoLIQEgAiABKAIAEQAACwJAIANFDQAgAxAJIAMgAygCBCIAQQFrNgIEIAANACADIAMoAgAoAggRAAAgAxAJCyAEQSBqJAALEAAgACgCCCIABEAgABAJCws5AQF/IAAoAgQhAiABIAAoAggiADYCCCABIAI2AgQgAUH0nQE2AgAgAARAIAAgACgCCEEBajYCCAsLQQECf0EMEAshASAAKAIEIQIgASAAKAIIIgA2AgggASACNgIEIAFB9J0BNgIAIAAEQCAAIAAoAghBAWo2AggLIAELHwEBfyAAQfSdATYCACAAKAIIIgEEQCABEAkL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IABBEGogAhEDAAsgAEFAayQADAELQcbyAEHiLEGp8ABBuQsQAAALCyAFDQALIAQoAuABBSAACyAHQQJ0aiAEKALsAUH//z9xIAZB/x9GIAZqQRR0cjYCACAEIANBgIBAcjYC7AEMAQtBt/IAQeIsQaXDAUHyCBAAAAsLCw8AIABB8IEBNgIAIAAQCgsNACAAQfCBATYCACAACwgAIAAQWRAKCyAAIAQEQCAAIAEgAiADIAQQqQEPCyAAIAEgAiADEKgBCwYAQeCyFwsLyaMXtAEAQYAIC6F/c21vb3RoX3F1YXJ0egBlbXB0eQBzcGFnaGV0dGlfM2RfcmFyaXR5AHBvdHRlZF9veGV5ZV9kYWlzeQBQb3NpdGlvbmFsUmFuZG9tRmFjdG9yeQBzdXJmYWNlX3NlY29uZGFyeQBwb3R0ZWRfcG9wcHkAZGVzdHJveQBwZW9ueQBwb3R0ZWRfbGlseV9vZl90aGVfdmFsbGV5AGVuZF9nYXRld2F5AGNsYXkAanVrZWJveABsaWdodF9ncmF5X3NodWxrZXJfYm94AHllbGxvd19zaHVsa2VyX2JveABicm93bl9zaHVsa2VyX2JveABncmVlbl9zaHVsa2VyX2JveABjeWFuX3NodWxrZXJfYm94AHBpbmtfc2h1bGtlcl9ib3gAYmxhY2tfc2h1bGtlcl9ib3gAbGlnaHRfYmx1ZV9zaHVsa2VyX2JveAB3aGl0ZV9zaHVsa2VyX2JveABsaW1lX3NodWxrZXJfYm94AHB1cnBsZV9zaHVsa2VyX2JveABvcmFuZ2Vfc2h1bGtlcl9ib3gAcmVkX3NodWxrZXJfYm94AG1hZ2VudGFfc2h1bGtlcl9ib3gAaW5kZXgALSsgICAwWDB4AHBvd2Rlcl9zbm93AGppZ3NhdwBDb250ZXh0AGJ1ZGRpbmdfYW1ldGh5c3QAYmVlX25lc3QAZW5kZXJfY2hlc3QAdHJhcHBlZF9jaGVzdABhc3N1cmVfYXRfbGVhc3QAY29hcnNlX2RpcnQAcm9vdGVkX2RpcnQAbmV0aGVyX3dhcnQAZmxvd2VyX3BvdAB0bnQAY2hvcnVzX3BsYW50AHR3aXN0aW5nX3ZpbmVzX3BsYW50AHdlZXBpbmdfdmluZXNfcGxhbnQAY2F2ZV92aW5lc19wbGFudABrZWxwX3BsYW50AHNtb290aF9iYXNhbHQAcG9saXNoZWRfYmFzYWx0AGNvbmR1aXQAc2hyb29tbGlnaHQAbWluZWNyYWZ0AHBvdHRlZF9henVyZV9ibHVldABjbGF5X2JhbmRzX29mZnNldABsaWdodF9ncmF5X2NhcnBldAB5ZWxsb3dfY2FycGV0AG1vc3NfY2FycGV0AGJyb3duX2NhcnBldABncmVlbl9jYXJwZXQAY3lhbl9jYXJwZXQAcGlua19jYXJwZXQAYmxhY2tfY2FycGV0AGxpZ2h0X2JsdWVfY2FycGV0AHdoaXRlX2NhcnBldABsaW1lX2NhcnBldABwdXJwbGVfY2FycGV0AG9yYW5nZV9jYXJwZXQAcmVkX2NhcnBldABtYWdlbnRhX2NhcnBldAB0YXJnZXQAd2hlYXQAcG90dGVkX2NhY3R1cwBwb3R0ZWRfY3JpbXNvbl9mdW5ndXMAcG90dGVkX3dhcnBlZF9mdW5ndXMAbmV0aGVyX3Nwcm91dHMAc3RydWN0dXJlX3N0YXJ0cwBjYXJyb3RzAGJlZXRyb290cwBwb3R0ZWRfY3JpbXNvbl9yb290cwBoYW5naW5nX3Jvb3RzAHBvdHRlZF93YXJwZWRfcm9vdHMAY29udGluZW50YWxuZXNzAHBpbGxhcl90aGlja25lc3MAbm9vZGxlX3RoaWNrbmVzcwBzcGFnaGV0dGlfM2RfdGhpY2tuZXNzAHNwYWdoZXR0aV8yZF90aGlja25lc3MAb3JlX3ZlaW5pbmVzcwBzcGFnaGV0dGlfcm91Z2huZXNzAHBpbGxhcl9yYXJlbmVzcwBhcXVpZmVyX2ZsdWlkX2xldmVsX2Zsb29kZWRuZXNzAENodW5rQWNjZXNzAHRhbGxfc2VhZ3Jhc3MAdGFsbF9ncmFzcwB0aW50ZWRfZ2xhc3MAbGlnaHRfZ3JheV9zdGFpbmVkX2dsYXNzAHllbGxvd19zdGFpbmVkX2dsYXNzAGJyb3duX3N0YWluZWRfZ2xhc3MAZ3JlZW5fc3RhaW5lZF9nbGFzcwBjeWFuX3N0YWluZWRfZ2xhc3MAcGlua19zdGFpbmVkX2dsYXNzAGJsYWNrX3N0YWluZWRfZ2xhc3MAbGlnaHRfYmx1ZV9zdGFpbmVkX2dsYXNzAHdoaXRlX3N0YWluZWRfZ2xhc3MAbGltZV9zdGFpbmVkX2dsYXNzAHB1cnBsZV9zdGFpbmVkX2dsYXNzAG9yYW5nZV9zdGFpbmVkX2dsYXNzAHJlZF9zdGFpbmVkX2dsYXNzAG1hZ2VudGFfc3RhaW5lZF9nbGFzcwBzbW9vdGhfcXVhcnR6X3N0YWlycwBwdXJwdXJfc3RhaXJzAHdheGVkX294aWRpemVkX2N1dF9jb3BwZXJfc3RhaXJzAHdheGVkX2N1dF9jb3BwZXJfc3RhaXJzAHdheGVkX2V4cG9zZWRfY3V0X2NvcHBlcl9zdGFpcnMAd2F4ZWRfd2VhdGhlcmVkX2N1dF9jb3BwZXJfc3RhaXJzAGNyaW1zb25fc3RhaXJzAHJlZF9uZXRoZXJfYnJpY2tfc3RhaXJzAGRlZXBzbGF0ZV9icmlja19zdGFpcnMAcG9saXNoZWRfYmxhY2tzdG9uZV9icmlja19zdGFpcnMAbW9zc3lfc3RvbmVfYnJpY2tfc3RhaXJzAGVuZF9zdG9uZV9icmlja19zdGFpcnMAcHJpc21hcmluZV9icmlja19zdGFpcnMAZGFya19vYWtfc3RhaXJzAGJpcmNoX3N0YWlycwBwb2xpc2hlZF9hbmRlc2l0ZV9zdGFpcnMAcG9saXNoZWRfZGlvcml0ZV9zdGFpcnMAcG9saXNoZWRfZ3Jhbml0ZV9zdGFpcnMAY29iYmxlZF9kZWVwc2xhdGVfc3RhaXJzAHBvbGlzaGVkX2RlZXBzbGF0ZV9zdGFpcnMAcG9saXNoZWRfYmxhY2tzdG9uZV9zdGFpcnMAbW9zc3lfY29iYmxlc3RvbmVfc3RhaXJzAHNtb290aF9zYW5kc3RvbmVfc3RhaXJzAHNtb290aF9yZWRfc2FuZHN0b25lX3N0YWlycwBkYXJrX3ByaXNtYXJpbmVfc3RhaXJzAGRlZXBzbGF0ZV90aWxlX3N0YWlycwBqdW5nbGVfc3RhaXJzAHNwcnVjZV9zdGFpcnMAd2FycGVkX3N0YWlycwBhY2FjaWFfc3RhaXJzAGlyb25fYmFycwBjcmltc29uX3BsYW5rcwBkYXJrX29ha19wbGFua3MAYmlyY2hfcGxhbmtzAGp1bmdsZV9wbGFua3MAc3BydWNlX3BsYW5rcwB3YXJwZWRfcGxhbmtzAGFjYWNpYV9wbGFua3MAcXVhcnR6X2JyaWNrcwByZWRfbmV0aGVyX2JyaWNrcwBjaGlzZWxlZF9uZXRoZXJfYnJpY2tzAGNyYWNrZWRfbmV0aGVyX2JyaWNrcwBjcmFja2VkX2RlZXBzbGF0ZV9icmlja3MAY3JhY2tlZF9wb2xpc2hlZF9ibGFja3N0b25lX2JyaWNrcwBpbmZlc3RlZF9tb3NzeV9zdG9uZV9icmlja3MAZW5kX3N0b25lX2JyaWNrcwBpbmZlc3RlZF9zdG9uZV9icmlja3MAaW5mZXN0ZWRfY2hpc2VsZWRfc3RvbmVfYnJpY2tzAGluZmVzdGVkX2NyYWNrZWRfc3RvbmVfYnJpY2tzAHByaXNtYXJpbmVfYnJpY2tzAGFuY2llbnRfZGVicmlzAGRhcmtfb2FrX2xlYXZlcwBiaXJjaF9sZWF2ZXMAanVuZ2xlX2xlYXZlcwBzcHJ1Y2VfbGVhdmVzAGFjYWNpYV9sZWF2ZXMAZmxvd2VyaW5nX2F6YWxlYV9sZWF2ZXMAcG90YXRvZXMAdHdpc3RpbmdfdmluZXMAd2VlcGluZ192aW5lcwBjYXZlX3ZpbmVzAGJpb21lcwBjcmFja2VkX2RlZXBzbGF0ZV90aWxlcwBzdHJ1Y3R1cmVfcmVmZXJlbmNlcwBvd25lciAhPSBudWxscHRyAGJhZF93ZWFrX3B0cgB2ZWN0b3IAZGF5bGlnaHRfZGV0ZWN0b3IAbmV0aGVyX3N0YXRlX3NlbGVjdG9yAGNvbXBhcmF0b3IAc3BhZ2hldHRpX3JvdWdobmVzc19tb2R1bGF0b3IAc3BhZ2hldHRpXzJkX21vZHVsYXRvcgBzY3Vsa19zZW5zb3IAY3JpbXNvbl90cmFwZG9vcgBpcm9uX3RyYXBkb29yAGRhcmtfb2FrX3RyYXBkb29yAGJpcmNoX3RyYXBkb29yAGp1bmdsZV90cmFwZG9vcgBzcHJ1Y2VfdHJhcGRvb3IAd2FycGVkX3RyYXBkb29yAGFjYWNpYV90cmFwZG9vcgBjcmltc29uX2Rvb3IAaXJvbl9kb29yAGRhcmtfb2FrX2Rvb3IAYmlyY2hfZG9vcgBqdW5nbGVfZG9vcgBzcHJ1Y2VfZG9vcgB3YXJwZWRfZG9vcgBhY2FjaWFfZG9vcgByZXNwYXduX2FuY2hvcgBjYXZlX2FpcgB2b2lkX2FpcgBncmF2ZWxfbGF5ZXIAY2F2ZV9sYXllcgBzb3VsX3NhbmRfbGF5ZXIAZGVwdGhfYmFzZWRfbGF5ZXIAc3VuZmxvd2VyAHBvdHRlZF9jb3JuZmxvd2VyAGNob3J1c19mbG93ZXIAb2JzZXJ2ZXIAbGV2ZXIAc3RvbmVjdXR0ZXIAYW1ldGh5c3RfY2x1c3RlcgBjb21wb3N0ZXIAd2F0ZXIAcmVwZWF0ZXIAZGlzcGVuc2VyAGRyb3BwZXIAaG9wcGVyAHdheGVkX294aWRpemVkX2N1dF9jb3BwZXIAd2F4ZWRfY3V0X2NvcHBlcgB3YXhlZF9leHBvc2VkX2N1dF9jb3BwZXIAd2F4ZWRfd2VhdGhlcmVkX2N1dF9jb3BwZXIAd2F4ZWRfb3hpZGl6ZWRfY29wcGVyAHdheGVkX2V4cG9zZWRfY29wcGVyAHdheGVkX3dlYXRoZXJlZF9jb3BwZXIAc3Bhd25lcgBsaWdodF9ncmF5X2Jhbm5lcgB5ZWxsb3dfYmFubmVyAGJyb3duX2Jhbm5lcgBncmVlbl9iYW5uZXIAY3lhbl9iYW5uZXIAbGlnaHRfZ3JheV93YWxsX2Jhbm5lcgB5ZWxsb3dfd2FsbF9iYW5uZXIAYnJvd25fd2FsbF9iYW5uZXIAZ3JlZW5fd2FsbF9iYW5uZXIAY3lhbl93YWxsX2Jhbm5lcgBwaW5rX3dhbGxfYmFubmVyAGJsYWNrX3dhbGxfYmFubmVyAGxpZ2h0X2JsdWVfd2FsbF9iYW5uZXIAd2hpdGVfd2FsbF9iYW5uZXIAbGltZV93YWxsX2Jhbm5lcgBwdXJwbGVfd2FsbF9iYW5uZXIAb3JhbmdlX3dhbGxfYmFubmVyAHJlZF93YWxsX2Jhbm5lcgBtYWdlbnRhX3dhbGxfYmFubmVyAHBpbmtfYmFubmVyAGJsYWNrX2Jhbm5lcgBsaWdodF9ibHVlX2Jhbm5lcgB3aGl0ZV9iYW5uZXIAbGltZV9iYW5uZXIAcHVycGxlX2Jhbm5lcgBvcmFuZ2VfYmFubmVyAHJlZF9iYW5uZXIAbWFnZW50YV9iYW5uZXIATm9pc2VDbGltYXRlU2FtcGxlcgBDbGltYXRlOjpTYW1wbGVyAHNtb2tlcgBGbHVpZFBpY2tlcgBhcXVpZmVyX2JhcnJpZXIAZ2VuZXJhdGVfaWRlbnRpZmllcgBuZXRoZXIAQmlvbWVNYW5hZ2VyAGFxdWlmZXIAQXF1aWZlcgBsaWdodF9ncmF5X2NvbmNyZXRlX3Bvd2RlcgB5ZWxsb3dfY29uY3JldGVfcG93ZGVyAGJyb3duX2NvbmNyZXRlX3Bvd2RlcgBncmVlbl9jb25jcmV0ZV9wb3dkZXIAY3lhbl9jb25jcmV0ZV9wb3dkZXIAcGlua19jb25jcmV0ZV9wb3dkZXIAYmxhY2tfY29uY3JldGVfcG93ZGVyAGxpZ2h0X2JsdWVfY29uY3JldGVfcG93ZGVyAHdoaXRlX2NvbmNyZXRlX3Bvd2RlcgBsaW1lX2NvbmNyZXRlX3Bvd2RlcgBwdXJwbGVfY29uY3JldGVfcG93ZGVyAG9yYW5nZV9jb25jcmV0ZV9wb3dkZXIAcmVkX2NvbmNyZXRlX3Bvd2RlcgBtYWdlbnRhX2NvbmNyZXRlX3Bvd2RlcgBsYWRkZXIAcXVhcnR6X3BpbGxhcgBiYWRsYW5kc19waWxsYXIAcHVycHVyX3BpbGxhcgBpY2ViZXJnX3BpbGxhcgBDOi9Qcm9qZWN0cy9hbmltYXRpb24tZW5naW5lL3RoaXJkcGFydHkvZW50dC9zaW5nbGVfaW5jbHVkZVxlbnR0L2VudHQuaHBwAHN1cmZhY2Vfc3dhbXAAcmVkc3RvbmVfbGFtcABrZWxwAHBvdHRlZF9waW5rX3R1bGlwAHBvdHRlZF93aGl0ZV90dWxpcABwb3R0ZWRfb3JhbmdlX3R1bGlwAHBvdHRlZF9yZWRfdHVsaXAAb3JlX2dhcABuZXh0X3Bvd2VyX29mX3R3bwBwb3R0ZWRfYmFtYm9vAGphY2tfb19sYW50ZXJuAHNvdWxfbGFudGVybgBzZWFfbGFudGVybgBsZWN0ZXJuAGxhcmdlX2Zlcm4AcG90dGVkX2Zlcm4AY3JpbXNvbl9idXR0b24AZGFya19vYWtfYnV0dG9uAGJpcmNoX2J1dHRvbgBwb2xpc2hlZF9ibGFja3N0b25lX2J1dHRvbgBqdW5nbGVfYnV0dG9uAHNwcnVjZV9idXR0b24Ad2FycGVkX2J1dHRvbgBhY2FjaWFfYnV0dG9uAHN0aWNreV9waXN0b24AbW92aW5nX3Bpc3RvbgBwb3dkZXJfc25vd19jYXVsZHJvbgB3YXRlcl9jYXVsZHJvbgBsYXZhX2NhdWxkcm9uAG1lbG9uAHN0ZDo6ZXhjZXB0aW9uAG5vdGlmeV9kZXN0cnVjdGlvbgBzcGFnaGV0dGlfMmRfZWxldmF0aW9uAHZlZ2V0YXRpb24AZXJvc2lvbgBwb3R0ZWRfZGFuZGVsaW9uAGJlYWNvbgBidWJibGVfY29sdW1uAGNhcnZlZF9wdW1wa2luAHRlcnJhaW4AY2hhaW4AY3JpbXNvbl9zaWduAGNyaW1zb25fd2FsbF9zaWduAGRhcmtfb2FrX3dhbGxfc2lnbgBiaXJjaF93YWxsX3NpZ24AanVuZ2xlX3dhbGxfc2lnbgBzcHJ1Y2Vfd2FsbF9zaWduAHdhcnBlZF93YWxsX3NpZ24AYWNhY2lhX3dhbGxfc2lnbgBkYXJrX29ha19zaWduAGJpcmNoX3NpZ24AanVuZ2xlX3NpZ24Ac3BydWNlX3NpZ24Ad2FycGVkX3NpZ24AYWNhY2lhX3NpZ24AZ2xvd19saWNoZW4AY3J5aW5nX29ic2lkaWFuAGRlYWRfaG9ybl9jb3JhbF93YWxsX2ZhbgBkZWFkX2JyYWluX2NvcmFsX3dhbGxfZmFuAGRlYWRfZmlyZV9jb3JhbF93YWxsX2ZhbgBkZWFkX2J1YmJsZV9jb3JhbF93YWxsX2ZhbgBkZWFkX3R1YmVfY29yYWxfd2FsbF9mYW4AZGVhZF9ob3JuX2NvcmFsX2ZhbgBkZWFkX2JyYWluX2NvcmFsX2ZhbgBkZWFkX2ZpcmVfY29yYWxfZmFuAGRlYWRfYnViYmxlX2NvcmFsX2ZhbgBkZWFkX3R1YmVfY29yYWxfZmFuAGNyaW1zb25fbnlsaXVtAHdhcnBlZF9ueWxpdW0AcG90dGVkX2FsbGl1bQBteWNlbGl1bQBzcG9yZV9ibG9zc29tAHBvdHRlZF9icm93bl9tdXNocm9vbQBwb3R0ZWRfcmVkX211c2hyb29tAGxvb20AU3VyZmFjZVN5c3RlbQBzdHJpcHBlZF9jcmltc29uX3N0ZW0AYXR0YWNoZWRfbWVsb25fc3RlbQBhdHRhY2hlZF9wdW1wa2luX3N0ZW0AbXVzaHJvb21fc3RlbQBiaWdfZHJpcGxlYWZfc3RlbQBzdHJpcHBlZF93YXJwZWRfc3RlbQBwb2R6b2wAbGlnaHRfZ3JheV93b29sAHllbGxvd193b29sAGJyb3duX3dvb2wAZ3JlZW5fd29vbABjeWFuX3dvb2wAcGlua193b29sAGJsYWNrX3dvb2wAbGlnaHRfYmx1ZV93b29sAHdoaXRlX3dvb2wAbGltZV93b29sAHB1cnBsZV93b29sAG9yYW5nZV93b29sAHJlZF93b29sAG1hZ2VudGFfd29vbAB3aXRoZXJfc2tlbGV0b25fc2t1bGwAd2l0aGVyX3NrZWxldG9uX3dhbGxfc2t1bGwAYmVsbAByZWRfbmV0aGVyX2JyaWNrX3dhbGwAZGVlcHNsYXRlX2JyaWNrX3dhbGwAcG9saXNoZWRfYmxhY2tzdG9uZV9icmlja193YWxsAG1vc3N5X3N0b25lX2JyaWNrX3dhbGwAZW5kX3N0b25lX2JyaWNrX3dhbGwAYW5kZXNpdGVfd2FsbABkaW9yaXRlX3dhbGwAZ3Jhbml0ZV93YWxsAGNvYmJsZWRfZGVlcHNsYXRlX3dhbGwAcG9saXNoZWRfZGVlcHNsYXRlX3dhbGwAcG9saXNoZWRfYmxhY2tzdG9uZV93YWxsAG1vc3N5X2NvYmJsZXN0b25lX3dhbGwAcmVkX3NhbmRzdG9uZV93YWxsAHByaXNtYXJpbmVfd2FsbABkZWVwc2xhdGVfdGlsZV93YWxsAHN0ZDo6YmFkX2Z1bmN0aW9uX2NhbGwAY2hpcHBlZF9hbnZpbABkYW1hZ2VkX2FudmlsAHNvdWxfc29pbABkZXRlY3Rvcl9yYWlsAGFjdGl2YXRvcl9yYWlsAHBvd2VyZWRfcmFpbABncmF2ZWwAYmFycmVsAG5ldGhlcl9wb3J0YWwAZW5kX3BvcnRhbABkZWFkX2hvcm5fY29yYWwAZGVhZF9icmFpbl9jb3JhbABkZWFkX2ZpcmVfY29yYWwAZGVhZF9idWJibGVfY29yYWwAZGVhZF90dWJlX2NvcmFsAHRyaXB3aXJlX2hvb2sATm9pc2VDaHVuawBiZWRyb2NrAGNoaXNlbGVkX3F1YXJ0el9ibG9jawBob25leV9ibG9jawBoYXlfYmxvY2sAc25vd19ibG9jawBhbWV0aHlzdF9ibG9jawBuZXRoZXJfd2FydF9ibG9jawB3YXJwZWRfd2FydF9ibG9jawBtb3NzX2Jsb2NrAGdyYXNzX2Jsb2NrAGxhcGlzX2Jsb2NrAHB1cnB1cl9ibG9jawByYXdfY29wcGVyX2Jsb2NrAHdheGVkX2NvcHBlcl9ibG9jawBkcmllZF9rZWxwX2Jsb2NrAHJhd19pcm9uX2Jsb2NrAGJyb3duX211c2hyb29tX2Jsb2NrAHJlZF9tdXNocm9vbV9ibG9jawBkZWFkX2hvcm5fY29yYWxfYmxvY2sAZGVhZF9icmFpbl9jb3JhbF9ibG9jawBkZWFkX2ZpcmVfY29yYWxfYmxvY2sAZGVhZF9idWJibGVfY29yYWxfYmxvY2sAZGVhZF90dWJlX2NvcmFsX2Jsb2NrAGNvYWxfYmxvY2sAbm90ZV9ibG9jawBuZXRoZXJpdGVfYmxvY2sAc3RydWN0dXJlX2Jsb2NrAGRyaXBzdG9uZV9ibG9jawByZWRzdG9uZV9ibG9jawBib25lX2Jsb2NrAHNsaW1lX2Jsb2NrAGRpYW1vbmRfYmxvY2sAY2hhaW5fY29tbWFuZF9ibG9jawByZXBlYXRpbmdfY29tbWFuZF9ibG9jawByYXdfZ29sZF9ibG9jawBlbWVyYWxkX2Jsb2NrAGhvbmV5Y29tYl9ibG9jawBtYWdtYV9ibG9jawBuZXRoZXJyYWNrAGJhZF9hcnJheV9uZXdfbGVuZ3RoAGRpcnRfcGF0aABzd2VldF9iZXJyeV9idXNoAHJvc2VfYnVzaABwb3R0ZWRfZGVhZF9idXNoAHBvdHRlZF9mbG93ZXJpbmdfYXphbGVhX2J1c2gAcG90dGVkX2F6YWxlYV9idXNoAHBhdGNoAHNvdWxfdG9yY2gAc291bF93YWxsX3RvcmNoAHJlZHN0b25lX3dhbGxfdG9yY2gAcmVkc3RvbmVfdG9yY2gAc3RyaXBwZWRfZGFya19vYWtfbG9nAHN0cmlwcGVkX29ha19sb2cAc3RyaXBwZWRfYmlyY2hfbG9nAHN0cmlwcGVkX2p1bmdsZV9sb2cAc3RyaXBwZWRfc3BydWNlX2xvZwBzdHJpcHBlZF9hY2FjaWFfbG9nAG1pbmVjcmFmdC1hdGxhcy5wbmcAYmFzaWNfc3RyaW5nAGJhbWJvb19zYXBsaW5nAHBvdHRlZF9kYXJrX29ha19zYXBsaW5nAHBvdHRlZF9vYWtfc2FwbGluZwBwb3R0ZWRfYmlyY2hfc2FwbGluZwBwb3R0ZWRfanVuZ2xlX3NhcGxpbmcAcG90dGVkX3NwcnVjZV9zYXBsaW5nAHBvdHRlZF9hY2FjaWFfc2FwbGluZwBzY2FmZm9sZGluZwBkcmFnb25fZWdnAHR1cnRsZV9lZ2cAYmFkbGFuZHNfcGlsbGFyX3Jvb2YAaWNlYmVyZ19waWxsYXJfcm9vZgBib29rc2hlbGYAdHVmZgBzcGFyc2VfcmVmAHNtYWxsX2RyaXBsZWFmAGJpZ19kcmlwbGVhZgBiZWVoaXZlAHBvbGlzaGVkX2FuZGVzaXRlAHBvbGlzaGVkX2Rpb3JpdGUAcG9saXNoZWRfZ3Jhbml0ZQBjYWxjaXRlAGxpZ2h0X2dyYXlfY29uY3JldGUAeWVsbG93X2NvbmNyZXRlAGJyb3duX2NvbmNyZXRlAGdyZWVuX2NvbmNyZXRlAGN5YW5fY29uY3JldGUAcGlua19jb25jcmV0ZQBibGFja19jb25jcmV0ZQBsaWdodF9ibHVlX2NvbmNyZXRlAHdoaXRlX2NvbmNyZXRlAGxpbWVfY29uY3JldGUAcHVycGxlX2NvbmNyZXRlAG9yYW5nZV9jb25jcmV0ZQByZWRfY29uY3JldGUAbWFnZW50YV9jb25jcmV0ZQBpbmZlc3RlZF9kZWVwc2xhdGUAY2hpc2VsZWRfZGVlcHNsYXRlAGNvYmJsZWRfZGVlcHNsYXRlAHBvbGlzaGVkX2RlZXBzbGF0ZQBjcmltc29uX3ByZXNzdXJlX3BsYXRlAGRhcmtfb2FrX3ByZXNzdXJlX3BsYXRlAGJpcmNoX3ByZXNzdXJlX3BsYXRlAHBvbGlzaGVkX2JsYWNrc3RvbmVfcHJlc3N1cmVfcGxhdGUAanVuZ2xlX3ByZXNzdXJlX3BsYXRlAHNwcnVjZV9wcmVzc3VyZV9wbGF0ZQBoZWF2eV93ZWlnaHRlZF9wcmVzc3VyZV9wbGF0ZQBsaWdodF93ZWlnaHRlZF9wcmVzc3VyZV9wbGF0ZQB3YXJwZWRfcHJlc3N1cmVfcGxhdGUAYWNhY2lhX3ByZXNzdXJlX3BsYXRlAGNyaW1zb25fZmVuY2VfZ2F0ZQBkYXJrX29ha19mZW5jZV9nYXRlAGJpcmNoX2ZlbmNlX2dhdGUAanVuZ2xlX2ZlbmNlX2dhdGUAc3BydWNlX2ZlbmNlX2dhdGUAd2FycGVkX2ZlbmNlX2dhdGUAYWNhY2lhX2ZlbmNlX2dhdGUAcG90dGVkX3dpdGhlcl9yb3NlAG5vaXNlAFNpbXBsZXhOb2lzZQBJbXByb3ZlZE5vaXNlAGNhdmVfY2hlZXNlAHRlbXBlcmF0dXJlAGFzc3VyZQBuZXRoZXJfcXVhcnR6X29yZQBkZWVwc2xhdGVfbGFwaXNfb3JlAGRlZXBzbGF0ZV9jb3BwZXJfb3JlAGRlZXBzbGF0ZV9pcm9uX29yZQBkZWVwc2xhdGVfY29hbF9vcmUAZGVlcHNsYXRlX3JlZHN0b25lX29yZQBkZWVwc2xhdGVfZGlhbW9uZF9vcmUAbmV0aGVyX2dvbGRfb3JlAGRlZXBzbGF0ZV9nb2xkX29yZQBkZWVwc2xhdGVfZW1lcmFsZF9vcmUAdHJpcHdpcmUAcmVkc3RvbmVfd2lyZQBzb3VsX2NhbXBmaXJlAHNvdWxfZmlyZQBnbG93c3RvbmUAcG9pbnRlZF9kcmlwc3RvbmUAY2hpc2VsZWRfcG9saXNoZWRfYmxhY2tzdG9uZQBnaWxkZWRfYmxhY2tzdG9uZQBtb3NzeV9jb2JibGVzdG9uZQBpbmZlc3RlZF9jb2JibGVzdG9uZQBsb2Rlc3RvbmUAZ3JpbmRzdG9uZQBjdXRfc2FuZHN0b25lAHNtb290aF9zYW5kc3RvbmUAY3V0X3JlZF9zYW5kc3RvbmUAc21vb3RoX3JlZF9zYW5kc3RvbmUAY2hpc2VsZWRfcmVkX3NhbmRzdG9uZQBjaGlzZWxlZF9zYW5kc3RvbmUAc21vb3RoX3N0b25lAGVuZF9zdG9uZQBpbmZlc3RlZF9zdG9uZQB2aW5lAGRhcmtfcHJpc21hcmluZQBDdWJpY1NwbGluZQBsaWdodF9ncmF5X3N0YWluZWRfZ2xhc3NfcGFuZQB5ZWxsb3dfc3RhaW5lZF9nbGFzc19wYW5lAGJyb3duX3N0YWluZWRfZ2xhc3NfcGFuZQBncmVlbl9zdGFpbmVkX2dsYXNzX3BhbmUAY3lhbl9zdGFpbmVkX2dsYXNzX3BhbmUAcGlua19zdGFpbmVkX2dsYXNzX3BhbmUAYmxhY2tfc3RhaW5lZF9nbGFzc19wYW5lAGxpZ2h0X2JsdWVfc3RhaW5lZF9nbGFzc19wYW5lAHdoaXRlX3N0YWluZWRfZ2xhc3NfcGFuZQBsaW1lX3N0YWluZWRfZ2xhc3NfcGFuZQBwdXJwbGVfc3RhaW5lZF9nbGFzc19wYW5lAG9yYW5nZV9zdGFpbmVkX2dsYXNzX3BhbmUAcmVkX3N0YWluZWRfZ2xhc3NfcGFuZQBtYWdlbnRhX3N0YWluZWRfZ2xhc3NfcGFuZQBzdWdhcl9jYW5lAGVuZF9wb3J0YWxfZnJhbWUAc2VhX3BpY2tsZQBub29kbGUAbGlnaHRfZ3JheV9jYW5kbGUAeWVsbG93X2NhbmRsZQBicm93bl9jYW5kbGUAZ3JlZW5fY2FuZGxlAGN5YW5fY2FuZGxlAHBpbmtfY2FuZGxlAGJsYWNrX2NhbmRsZQBsaWdodF9ibHVlX2NhbmRsZQB3aGl0ZV9jYW5kbGUAbGltZV9jYW5kbGUAcHVycGxlX2NhbmRsZQBvcmFuZ2VfY2FuZGxlAHJlZF9jYW5kbGUAbWFnZW50YV9jYW5kbGUAY2FydG9ncmFwaHlfdGFibGUAZW5jaGFudGluZ190YWJsZQBjcmFmdGluZ190YWJsZQBzbWl0aGluZ190YWJsZQBmbGV0Y2hpbmdfdGFibGUAbGlnaHRfZ3JheV9jYW5kbGVfY2FrZQB5ZWxsb3dfY2FuZGxlX2Nha2UAYnJvd25fY2FuZGxlX2Nha2UAZ3JlZW5fY2FuZGxlX2Nha2UAY3lhbl9jYW5kbGVfY2FrZQBwaW5rX2NhbmRsZV9jYWtlAGJsYWNrX2NhbmRsZV9jYWtlAGxpZ2h0X2JsdWVfY2FuZGxlX2Nha2UAd2hpdGVfY2FuZGxlX2Nha2UAbGltZV9jYW5kbGVfY2FrZQBwdXJwbGVfY2FuZGxlX2Nha2UAb3JhbmdlX2NhbmRsZV9jYWtlAHJlZF9jYW5kbGVfY2FrZQBtYWdlbnRhX2NhbmRsZV9jYWtlAGNvbnRpbmVudGFsbmVzc19sYXJnZQB2ZWdldGF0aW9uX2xhcmdlAGVyb3Npb25fbGFyZ2UAdGVtcGVyYXR1cmVfbGFyZ2UAd2V0X3Nwb25nZQByaWRnZQBOZWVkIGF0IGxlYXN0IG9uZSBjaGlsZCB0byBidWlsZCBhIG5vZGUAUmFuZG9tU291cmNlAE5vaXNlQmlvbWVTb3VyY2UATmVlZCBhdCBsZWFzdCAxIHJ1bGUgZm9yIGEgc2VxdWVuY2UAY3JpbXNvbl9mZW5jZQBuZXRoZXJfYnJpY2tfZmVuY2UAZGFya19vYWtfZmVuY2UAYmlyY2hfZmVuY2UAanVuZ2xlX2ZlbmNlAHNwcnVjZV9mZW5jZQB3YXJwZWRfZmVuY2UAYWNhY2lhX2ZlbmNlAGNhdmVfZW50cmFuY2UAYmx1ZV9pY2UAZnJvc3RlZF9pY2UAcGFja2VkX2ljZQBibGFzdF9mdXJuYWNlAHRyeV9lbXBsYWNlAGJhZGxhbmRzX3N1cmZhY2UAaWNlYmVyZ19zdXJmYWNlAHN0cmlwcGVkX2NyaW1zb25faHlwaGFlAHN0cmlwcGVkX3dhcnBlZF9oeXBoYWUAbWVkaXVtX2FtZXRoeXN0X2J1ZABzbWFsbF9hbWV0aHlzdF9idWQAbGFyZ2VfYW1ldGh5c3RfYnVkAGxpZ2h0bmluZ19yb2QAZW5kX3JvZABzdHJpcHBlZF9kYXJrX29ha193b29kAHN0cmlwcGVkX29ha193b29kAHN0cmlwcGVkX2JpcmNoX3dvb2QAc3RyaXBwZWRfanVuZ2xlX3dvb2QAc3RyaXBwZWRfc3BydWNlX3dvb2QAc3RyaXBwZWRfYWNhY2lhX3dvb2QAZmFzdF9tb2QAbWFwOjphdDogIGtleSBub3QgZm91bmQAYnJld2luZ19zdGFuZABzb3VsX3NhbmQAcmVkX3NhbmQAZmFybWxhbmQAb3ZlcndvcmxkAFN1YlRyZWUgbmVlZHMgYXQgbGVhc3Qgb25lIGNoaWxkAHN0cnVjdHVyZV92b2lkAHBvdHRlZF9ibHVlX29yY2hpZABjbG9ja19nZXR0aW1lKENMT0NLX01PTk9UT05JQykgZmFpbGVkAGphZ2dlZABsaWdodF9ncmF5X2JlZAB5ZWxsb3dfYmVkAGJyb3duX2JlZABncmVlbl9iZWQAY3lhbl9iZWQAcGlua19iZWQAYmxhY2tfYmVkAGxpZ2h0X2JsdWVfYmVkAHdoaXRlX2JlZABsaW1lX2JlZABwdXJwbGVfYmVkAG9yYW5nZV9iZWQAcmVkX2JlZABtYWdlbnRhX2JlZABsaWx5X3BhZABhcXVpZmVyX2ZsdWlkX2xldmVsX3NwcmVhZABwbGF5ZXJfaGVhZABjcmVlcGVyX2hlYWQAcGlzdG9uX2hlYWQAZHJhZ29uX2hlYWQAcGxheWVyX3dhbGxfaGVhZABjcmVlcGVyX3dhbGxfaGVhZABkcmFnb25fd2FsbF9oZWFkAHpvbWJpZV93YWxsX2hlYWQAem9tYmllX2hlYWQAc3RkOjpiYWRfYWxsb2MAbGlsYWMAY29id2ViAHNtb290aF9xdWFydHpfc2xhYgBwdXJwdXJfc2xhYgB3YXhlZF9veGlkaXplZF9jdXRfY29wcGVyX3NsYWIAd2F4ZWRfY3V0X2NvcHBlcl9zbGFiAHdheGVkX2V4cG9zZWRfY3V0X2NvcHBlcl9zbGFiAHdheGVkX3dlYXRoZXJlZF9jdXRfY29wcGVyX3NsYWIAY3JpbXNvbl9zbGFiAHJlZF9uZXRoZXJfYnJpY2tfc2xhYgBkZWVwc2xhdGVfYnJpY2tfc2xhYgBwb2xpc2hlZF9ibGFja3N0b25lX2JyaWNrX3NsYWIAbW9zc3lfc3RvbmVfYnJpY2tfc2xhYgBlbmRfc3RvbmVfYnJpY2tfc2xhYgBwcmlzbWFyaW5lX2JyaWNrX3NsYWIAZGFya19vYWtfc2xhYgBwZXRyaWZpZWRfb2FrX3NsYWIAYmlyY2hfc2xhYgBwb2xpc2hlZF9hbmRlc2l0ZV9zbGFiAHBvbGlzaGVkX2Rpb3JpdGVfc2xhYgBwb2xpc2hlZF9ncmFuaXRlX3NsYWIAY29iYmxlZF9kZWVwc2xhdGVfc2xhYgBwb2xpc2hlZF9kZWVwc2xhdGVfc2xhYgBwb2xpc2hlZF9ibGFja3N0b25lX3NsYWIAbW9zc3lfY29iYmxlc3RvbmVfc2xhYgBjdXRfc2FuZHN0b25lX3NsYWIAc21vb3RoX3NhbmRzdG9uZV9zbGFiAGN1dF9yZWRfc2FuZHN0b25lX3NsYWIAc21vb3RoX3JlZF9zYW5kc3RvbmVfc2xhYgBzbW9vdGhfc3RvbmVfc2xhYgBkYXJrX3ByaXNtYXJpbmVfc2xhYgBkZWVwc2xhdGVfdGlsZV9zbGFiAGp1bmdsZV9zbGFiAHNwcnVjZV9zbGFiAHdhcnBlZF9zbGFiAGFjYWNpYV9zbGFiAG9yZV92ZWluX2IAbm9vZGxlX3JpZGdlX2IAYXF1aWZlcl9sYXZhAGxpZ2h0X2dyYXlfdGVycmFjb3R0YQB5ZWxsb3dfdGVycmFjb3R0YQBicm93bl90ZXJyYWNvdHRhAGdyZWVuX3RlcnJhY290dGEAY3lhbl90ZXJyYWNvdHRhAHBpbmtfdGVycmFjb3R0YQBibGFja190ZXJyYWNvdHRhAGxpZ2h0X2JsdWVfdGVycmFjb3R0YQB3aGl0ZV90ZXJyYWNvdHRhAGxpbWVfdGVycmFjb3R0YQBwdXJwbGVfdGVycmFjb3R0YQBvcmFuZ2VfdGVycmFjb3R0YQBsaWdodF9ncmF5X2dsYXplZF90ZXJyYWNvdHRhAHllbGxvd19nbGF6ZWRfdGVycmFjb3R0YQBicm93bl9nbGF6ZWRfdGVycmFjb3R0YQBncmVlbl9nbGF6ZWRfdGVycmFjb3R0YQBjeWFuX2dsYXplZF90ZXJyYWNvdHRhAHBpbmtfZ2xhemVkX3RlcnJhY290dGEAYmxhY2tfZ2xhemVkX3RlcnJhY290dGEAbGlnaHRfYmx1ZV9nbGF6ZWRfdGVycmFjb3R0YQB3aGl0ZV9nbGF6ZWRfdGVycmFjb3R0YQBsaW1lX2dsYXplZF90ZXJyYWNvdHRhAHB1cnBsZV9nbGF6ZWRfdGVycmFjb3R0YQBvcmFuZ2VfZ2xhemVkX3RlcnJhY290dGEAcmVkX2dsYXplZF90ZXJyYWNvdHRhAG1hZ2VudGFfZ2xhemVkX3RlcnJhY290dGEAcmVkX3RlcnJhY290dGEAbWFnZW50YV90ZXJyYWNvdHRhAGNvY29hAGZsb3dlcmluZ19hemFsZWEAb3JlX3ZlaW5fYQBub29kbGVfcmlkZ2VfYQBvY3RhdmVfAGF1dG8gZW50dDo6aW50ZXJuYWw6OnN0cmlwcGVkX3R5cGVfbmFtZSgpIFtUeXBlID0gR3JhcGhpY3NDb21wb25lbnRdAGF1dG8gZW50dDo6aW50ZXJuYWw6OnN0cmlwcGVkX3R5cGVfbmFtZSgpIFtUeXBlID0gVHJhbnNmb3JtQ29tcG9uZW50XQBhdXRvIGVudHQ6OmludGVybmFsOjpzdHJpcHBlZF90eXBlX25hbWUoKSBbVHlwZSA9IHZvaWRdAGF1dG8gZW50dDo6aW50ZXJuYWw6OnN0cmlwcGVkX3R5cGVfbmFtZSgpIFtUeXBlID0gZW50dDo6YmFzaWNfcmVnaXN0cnk8ZW50dDo6ZW50aXR5Pl0ATU9USU9OX0JMT0NLSU5HX05PX0xFQVZFUwBPQ0VBTl9GTE9PUgBPQ0VBTl9GTE9PUl9XRwBXT1JMRF9TVVJGQUNFX1dHAE1PVElPTl9CTE9DS0lORwBXT1JMRF9TVVJGQUNFADoAc3BhZ2hldHRpXzIAc3BhZ2hldHRpXzNkXzIAc3BhZ2hldHRpXzNkXzEAT3V0cHV0IHF1ZXVlIGJ1ZmZlciBvdmVyZmxvdy4ATWVzc2FnZSBoYXZlIG5vIGhhbmRsZXIuAEtleSBpcyBvdXQgb2YgcmFuZ2UuAEJ1dHRvbiBpcyBvdXQgb2YgcmFuZ2UuAE5lZWQgYXQgbGVhc3Qgb25lIHZhbHVlIHRvIGJ1aWxkIHRoZSBzZWFyY2ggdHJlZS4ASGFuZGxlciBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgZm9yIGlkLgAtLS0tLS0AdmFsaWQoZW50aXR5KQAhY29udGFpbnMoZW50dCkAc3BhcnNlX3B0cihlbnR0KQBzdGF0aWNfY2FzdDxib29sPigqdGhpcykAcG9zIDwgZW50aXR5X3RyYWl0czo6dG9faW50ZWdyYWwobnVsbCkAZW50aXR5X3RyYWl0czo6dG9fdmVyc2lvbihlbGVtKSA9PSBlbnRpdHlfdHJhaXRzOjp0b192ZXJzaW9uKHRvbWJzdG9uZSkAaXNfcG93ZXJfb2ZfdHdvKG1vZCkAdmFsdWUgPCAoc3RkOjpzaXplX3R7MXV9IDw8IChzdGQ6Om51bWVyaWNfbGltaXRzPHN0ZDo6c2l6ZV90Pjo6ZGlnaXRzIC0gMSkpAG9wZXJhdG9yKCkAY3Bvb2wtPnR5cGUoKSA9PSB0eXBlX2lkPENvbXBvbmVudD4oKQBQdXJlIHZpcnR1YWwgZnVuY3Rpb24gY2FsbGVkIQAlZCBjaHVua3MgaGFzIGJlZW4gZ2VuZXJhdGVkIGluICVsbGRtcwoAJWQgY2h1bmtzIGhhcyBiZWVuIG1lc2hlZCBpbiAlbGxkbXMKACVzIGlzIG5lZ2F0aXZlCgAlcyA9ICVkCgBiaW9tZXMgdG9vayAlbGxkbXMgdG8gcnVuLgoAbm9pc2UgdG9vayAlbGxkbXMgdG8gcnVuLgoAc3VyZmFjZSB0b29rICVsbGRtcyB0byBydW4uCgBjaHVuayAlZCAlZCBoYXMgYmVlbiBnZW5lcmF0ZWQgKHRvb2sgJWxsZG1zKQoAAAAAAAAAzDwAAAkAAAAKAAAACwAAAAwAAAANAAAADgAAAA8AAAAQAAAAEQAAABIAAAATAAAAFAAAAE40ZW50dDE4c2lnaF9zdG9yYWdlX21peGluSU5TXzEzYmFzaWNfc3RvcmFnZUlOU182ZW50aXR5RTE4VHJhbnNmb3JtQ29tcG9uZW50TlN0M19fMjlhbGxvY2F0b3JJUzNfRUV2RUVFRQBONGVudHQxM2Jhc2ljX3N0b3JhZ2VJTlNfNmVudGl0eUUxOFRyYW5zZm9ybUNvbXBvbmVudE5TdDNfXzI5YWxsb2NhdG9ySVMyX0VFdkVFAE40ZW50dDE2YmFzaWNfc3BhcnNlX3NldElOU182ZW50aXR5RU5TdDNfXzI5YWxsb2NhdG9ySVMxX0VFRUUAyNQAAHo8AADw1AAAKjwAALg8AADw1AAAwDsAAMA8AAAAAAAAwDwAAAkAAAAKAAAACwAAABUAAAAWAAAAFwAAABgAAAAZAAAAEQAAABIAAAATAAAAGgAAAAAAAAC4PAAAGwAAABwAAAAdAAAAHgAAAB8AAAAgAAAAIQAAACIAAAAjAAAAJAAAACUAAAAaAAAAwDcAACIAAACINwAABAAAAEI3AAASAAAAAAAAAEw+AAAmAAAAJwAAACgAAAApAAAAKgAAACsAAAAsAAAALQAAAC4AAABOU3QzX18yMTBfX2Z1bmN0aW9uNl9fZnVuY0laTjEySW5wdXRNYW5hZ2VyQzFFdkUzJF8wTlNfOWFsbG9jYXRvcklTM19FRUZ2MTRJbnB1dE1lc3NhZ2VJZHlSSzE1S2V5Ym9hcmRNZXNzYWdlRUVFAE5TdDNfXzIxMF9fZnVuY3Rpb242X19iYXNlSUZ2MTRJbnB1dE1lc3NhZ2VJZHlSSzE1S2V5Ym9hcmRNZXNzYWdlRUVFAAAAyNQAAP09AADw1AAAjD0AAEQ+AABaTjEySW5wdXRNYW5hZ2VyQzFFdkUzJF8wAAAAyNQAAFg+AAAAAAAAYD8AAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAAE5TdDNfXzIxMF9fZnVuY3Rpb242X19mdW5jSVpOMTJJbnB1dE1hbmFnZXJDMUV2RTMkXzFOU185YWxsb2NhdG9ySVMzX0VFRnYxNElucHV0TWVzc2FnZUlkeVJLMTJNb3VzZU1lc3NhZ2VFRUUATlN0M19fMjEwX19mdW5jdGlvbjZfX2Jhc2VJRnYxNElucHV0TWVzc2FnZUlkeVJLMTJNb3VzZU1lc3NhZ2VFRUUAyNQAABY/AADw1AAAqD4AAFg/AABaTjEySW5wdXRNYW5hZ2VyQzFFdkUzJF8xAAAAyNQAAGw/AADANwAAIgAAAIg3AAAEAAAAAAAAAJxAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAEEAAABCAAAAQwAAAEQAAABONGVudHQxOHNpZ2hfc3RvcmFnZV9taXhpbklOU18xM2Jhc2ljX3N0b3JhZ2VJTlNfNmVudGl0eUUxN0dyYXBoaWNzQ29tcG9uZW50TlN0M19fMjlhbGxvY2F0b3JJUzNfRUV2RUVFRQBONGVudHQxM2Jhc2ljX3N0b3JhZ2VJTlNfNmVudGl0eUUxN0dyYXBoaWNzQ29tcG9uZW50TlN0M19fMjlhbGxvY2F0b3JJUzJfRUV2RUUA8NQAAEFAAAC4PAAA8NQAANg/AACQQAAAAAAAAJBAAAA5AAAAOgAAADsAAABFAAAARgAAAEcAAABIAAAASQAAAEEAAABCAAAAQwAAABoAAAD9NgAAEQAAAAAAAABAQQAASgAAAEsAAABMAAAATQAAAE4AAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUk2RW50aXR5TlNfOWFsbG9jYXRvcklTMV9FRUVFAADw1AAABEEAAODRAAAAAAAAqEEAAE8AAABQAAAAUQAAAE0AAABSAAAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJOEdyYXBoaWNzTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAAAPDUAABoQQAA4NEAAAAAAAAUQgAAUwAAAFQAAABVAAAATQAAAFYAAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUkxMUNodW5rQWNjZXNzTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAAAPDUAADQQQAA4NEAAAAAAACAQgAAVwAAAFgAAABZAAAATQAAAFoAAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUkxNFdvcmxkR2VuUmVnaW9uTlNfOWFsbG9jYXRvcklTMV9FRUVFAPDUAAA8QgAA4NEAAAAAAABsQwAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAATlN0M19fMjEwX19mdW5jdGlvbjZfX2Z1bmNJTjExQ2h1bmtTdGF0dXMzJF8wRU5TXzlhbGxvY2F0b3JJUzNfRUVGTlNfMTBzaGFyZWRfcHRySTExQ2h1bmtBY2Nlc3NFRVM4X0VFRQBOU3QzX18yMTBfX2Z1bmN0aW9uNl9fYmFzZUlGTlNfMTBzaGFyZWRfcHRySTExQ2h1bmtBY2Nlc3NFRVM0X0VFRQAAAMjUAAAgQwAA8NQAALhCAABkQwAATjExQ2h1bmtTdGF0dXMzJF8wRQDI1AAAeEMAAAAAAAAkRAAAZAAAAGUAQbCHAQs0/v///////////////////wAAAAD/////AQAAAP/////9////AAAAAP7///8AAAAA/////wBB8IcBC50FAQAAAAAAAAD+////AQAAAP////8BAAAAAAAAAAEAAAABAAAAAQAAADdBcXVpZmVyAAAAAMjUAAAYRAAAAAAAAJxEAABrAAAAbAAAAG0AAABrAAAAAAAAAOxEAABuAAAAbwAAAHAAAABxAAAAMjFNdWx0aU5vaXNlQmlvbWVTb3VyY2UAMTFCaW9tZVNvdXJjZQAxM0Jpb21lUmVzb2x2ZXIAAADI1AAAgkQAAPDUAAB0RAAAlEQAAE5TdDNfXzIyM2VuYWJsZV9zaGFyZWRfZnJvbV90aGlzSTIxTXVsdGlOb2lzZUJpb21lU291cmNlRUUAAMjUAACoRAAATNUAAFxEAAAAAAAAAgAAAJxEAAACAAAA5EQAAAIcAAAAAAAA7EUAAHIAAABzAAAAdAAAAHUAAAB2AAAAdwAAAHgAAAB5AAAAegAAAE5TdDNfXzIxMF9fZnVuY3Rpb242X19mdW5jSU4yMU11bHRpTm9pc2VCaW9tZVNvdXJjZTZQcmVzZXQzJF8wRU5TXzlhbGxvY2F0b3JJUzRfRUVGTjdDbGltYXRlMTNQYXJhbWV0ZXJMaXN0RXZFRUUATlN0M19fMjEwX19mdW5jdGlvbjZfX2Jhc2VJRk43Q2xpbWF0ZTEzUGFyYW1ldGVyTGlzdEV2RUVFAADI1AAAqUUAAPDUAAA4RQAA5EUAADAAAAAuAAAA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ALYAAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQMjNQb3NpdGlvbmFsUmFuZG9tRmFjdG9yeU5TXzE0ZGVmYXVsdF9kZWxldGVJUzFfRUVOU185YWxsb2NhdG9ySVMxX0VFRUUAAPDUAACUTQAA4NEAAE5TdDNfXzIxNGRlZmF1bHRfZGVsZXRlSTIzUG9zaXRpb25hbFJhbmRvbUZhY3RvcnlFRQAAAAAAtE4AALIAAAC3AAAAuAAAALkAAAC6AAAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDEyUmFuZG9tU291cmNlTlNfMTRkZWZhdWx0X2RlbGV0ZUlTMV9FRU5TXzlhbGxvY2F0b3JJUzFfRUVFRQDw1AAAWE4AAODRAABOU3QzX18yMTRkZWZhdWx0X2RlbGV0ZUkxMlJhbmRvbVNvdXJjZUVFAAAAAAAAAAAkUAAAuwAAALwAAAC9AAAAvgAAAL8AAADAAAAAwQAAAMIAAADDAAAATlN0M19fMjEwX19mdW5jdGlvbjZfX2Z1bmNJWk4xMk5vaXNlU2FtcGxlcjE2YWZ0ZXJDb25zdHJ1Y3RvckVSSzEzTm9pc2VTZXR0aW5nc2J4TjE0V29ybGRnZW5SYW5kb205QWxnb3JpdGhtRUUzJF8wTlNfOWFsbG9jYXRvcklTOF9FRUZOU18xMHNoYXJlZF9wdHJJN1NhbXBsZXJFRU5TQl9JMTBOb2lzZUNodW5rRUVFRUUATlN0M19fMjEwX19mdW5jdGlvbjZfX2Jhc2VJRk5TXzEwc2hhcmVkX3B0ckk3U2FtcGxlckVFTlMyX0kxME5vaXNlQ2h1bmtFRUVFRQDI1AAAz08AAPDUAAAYTwAAHFAAAAAAAABEUQAAxAAAAMUAAADGAAAAxwAAAMgAAADJAAAAygAAAMsAAADMAAAATlN0M19fMjEwX19mdW5jdGlvbjZfX2Z1bmNJWlpOMTJOb2lzZVNhbXBsZXIxNmFmdGVyQ29uc3RydWN0b3JFUksxM05vaXNlU2V0dGluZ3NieE4xNFdvcmxkZ2VuUmFuZG9tOUFsZ29yaXRobUVFTkszJF8wY2xFTlNfMTBzaGFyZWRfcHRySTEwTm9pc2VDaHVua0VFRVVsaWlpRV9OU185YWxsb2NhdG9ySVNDX0VFRmRpaWlFRUUATlN0M19fMjEwX19mdW5jdGlvbjZfX2Jhc2VJRmRpaWlFRUUAAADI1AAAFlEAAPDUAABcUAAAPFEAAFpaTjEyTm9pc2VTYW1wbGVyMTZhZnRlckNvbnN0cnVjdG9yRVJLMTNOb2lzZVNldHRpbmdzYnhOMTRXb3JsZGdlblJhbmRvbTlBbGdvcml0aG1FRU5LMyRfMGNsRU5TdDNfXzIxMHNoYXJlZF9wdHJJMTBOb2lzZUNodW5rRUVFVWxpaWlFXwDI1AAAUFEAAFpOMTJOb2lzZVNhbXBsZXIxNmFmdGVyQ29uc3RydWN0b3JFUksxM05vaXNlU2V0dGluZ3NieE4xNFdvcmxkZ2VuUmFuZG9tOUFsZ29yaXRobUVFMyRfMADI1AAA4FEAAAAAAADsUgAAzQAAAM4AAADPAAAA0AAAANEAAADSAAAA0wAAANQAAADVAAAATlN0M19fMjEwX19mdW5jdGlvbjZfX2Z1bmNJWk4xMk5vaXNlU2FtcGxlcjI3eUxpbWl0ZWRJbnRlcnBvbGF0YWJsZU5vaXNlRVJLMTFOb3JtYWxOb2lzZWlpaWRFMyRfMU5TXzlhbGxvY2F0b3JJUzZfRUVGZGlpaUVFRQAAAADw1AAAbFIAADxRAABaTjEyTm9pc2VTYW1wbGVyMjd5TGltaXRlZEludGVycG9sYXRhYmxlTm9pc2VFUksxMU5vcm1hbE5vaXNlaWlpZEUzJF8xAADI1AAA+FIAAAAAAAAcVAAA1gAAANcAAADYAAAA2QAAANoAAADbAAAA3AAAAN0AAADeAAAATlN0M19fMjEwX19mdW5jdGlvbjZfX2Z1bmNJWk4xMk5vaXNlU2FtcGxlcjI3eUxpbWl0ZWRJbnRlcnBvbGF0YWJsZU5vaXNlRVJLMTFOb3JtYWxOb2lzZWlpaWRFMyRfMk5TXzlhbGxvY2F0b3JJUzZfRUVGTlNfMTBzaGFyZWRfcHRySTdTYW1wbGVyRUVOUzlfSTEwTm9pc2VDaHVua0VFRUVFAAAA8NQAAHRTAAAcUAAAWk4xMk5vaXNlU2FtcGxlcjI3eUxpbWl0ZWRJbnRlcnBvbGF0YWJsZU5vaXNlRVJLMTFOb3JtYWxOb2lzZWlpaWRFMyRfMgAAyNQAAChUAAAAAAAA3FQAAN8AAADgAAAA4QAAAE0AAADiAAAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJMTVDb25zdGFudFNhbXBsZXJOU185YWxsb2NhdG9ySVMxX0VFRUUAAAAA8NQAAJRUAADg0QAAAAAAAORVAADjAAAA5AAAAOUAAADmAAAA5wAAAOgAAADpAAAA6gAAAOsAAABOU3QzX18yMTBfX2Z1bmN0aW9uNl9fZnVuY0laTjEyTm9pc2VTYW1wbGVyMTltYWtlQmFzZU5vaXNlRmlsbGVyRU5TXzEwc2hhcmVkX3B0ckkxME5vaXNlQ2h1bmtFRU5TXzhmdW5jdGlvbklGZGlpaUVFRWJFMyRfM05TXzlhbGxvY2F0b3JJUzlfRUVGNkJsb2Nrc2lpaUVFRQBOU3QzX18yMTBfX2Z1bmN0aW9uNl9fYmFzZUlGNkJsb2Nrc2lpaUVFRQAAAMjUAACwVQAA8NQAABRVAADcVQAAWk4xMk5vaXNlU2FtcGxlcjE5bWFrZUJhc2VOb2lzZUZpbGxlckVOU3QzX18yMTBzaGFyZWRfcHRySTEwTm9pc2VDaHVua0VFTlMwXzhmdW5jdGlvbklGZGlpaUVFRWJFMyRfMwAAAADI1AAA8FUAAAAAAAAQVwAA7AAAAO0AAADuAAAA7wAAAPAAAADxAAAA8gAAAPMAAAD0AAAATlN0M19fMjEwX19mdW5jdGlvbjZfX2Z1bmNJWk4xMk5vaXNlU2FtcGxlcjE2bWFrZU9yZVZlaW5pZmllckVOU18xMHNoYXJlZF9wdHJJMTBOb2lzZUNodW5rRUViRTMkXzROU185YWxsb2NhdG9ySVM2X0VFRjZCbG9ja3NpaWlFRUUA8NQAAIxWAADcVQAAWk4xMk5vaXNlU2FtcGxlcjE2bWFrZU9yZVZlaW5pZmllckVOU3QzX18yMTBzaGFyZWRfcHRySTEwTm9pc2VDaHVua0VFYkUzJF80AMjUAAAcVwAAAAAAACBYAAD1AAAA9gAAAPcAAAD4AAAA+QAAAPoAAAD7AAAA/AAAAP0AAABOU3QzX18yMTBfX2Z1bmN0aW9uNl9fZnVuY0laTjEyTm9pc2VTYW1wbGVyMTZtYWtlT3JlVmVpbmlmaWVyRU5TXzEwc2hhcmVkX3B0ckkxME5vaXNlQ2h1bmtFRWJFMyRfNU5TXzlhbGxvY2F0b3JJUzZfRUVGNkJsb2Nrc2lpaUVFRQDw1AAAnFcAANxVAABaTjEyTm9pc2VTYW1wbGVyMTZtYWtlT3JlVmVpbmlmaWVyRU5TdDNfXzIxMHNoYXJlZF9wdHJJMTBOb2lzZUNodW5rRUViRTMkXzUAyNQAACxYAAAAAAAAnFkAAP4AAAD/AAAAAAEAAAEBAAACAQAAAwEAAAQBAAAFAQAABgEAAE5TdDNfXzIxMF9fZnVuY3Rpb242X19mdW5jSVoyMG1ha2VNYXRlcmlhbFJ1bGVMaXN0TlNfNnZlY3RvcklOU184ZnVuY3Rpb25JRjZCbG9ja3NOU18xMHNoYXJlZF9wdHJJMTBOb2lzZUNodW5rRUVpaWlFRUVOU185YWxsb2NhdG9ySVM5X0VFRUVFMyRfNk5TQV9JU0RfRUVTOF9FRQBOU3QzX18yMTBfX2Z1bmN0aW9uNl9fYmFzZUlGNkJsb2Nrc05TXzEwc2hhcmVkX3B0ckkxME5vaXNlQ2h1bmtFRWlpaUVFRQDI1AAATFkAAPDUAACsWAAAlFkAAFoyMG1ha2VNYXRlcmlhbFJ1bGVMaXN0TlN0M19fMjZ2ZWN0b3JJTlNfOGZ1bmN0aW9uSUY2QmxvY2tzTlNfMTBzaGFyZWRfcHRySTEwTm9pc2VDaHVua0VFaWlpRUVFTlNfOWFsbG9jYXRvcklTN19FRUVFRTMkXzYAAADI1AAAqFkAAAAAAADEWgAABwEAAAgBAAAJAQAACgEAAAsBAAAMAQAADQEAAA4BAAAPAQAATlN0M19fMjEwX19mdW5jdGlvbjZfX2Z1bmNJWjE0bWFrZUJlYXJkaWZpZXJOU18xMHNoYXJlZF9wdHJJMTFDaHVua0FjY2Vzc0VFRTMkXzdOU185YWxsb2NhdG9ySVM1X0VFRmRpaWlFRUUA8NQAAFhaAAA8UQAAWjE0bWFrZUJlYXJkaWZpZXJOU3QzX18yMTBzaGFyZWRfcHRySTExQ2h1bmtBY2Nlc3NFRUUzJF83AAAAyNQAANBaAAAAAAAAdFsAABABAAARAQAAEgEAAE0AAAATAQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJMTJOb2lzZVNhbXBsZXJOU185YWxsb2NhdG9ySVMxX0VFRUUAAADw1AAAMFsAAODRAAAAAAAAYFwAABQBAAAVAQAAFgEAABcBAAAYAQAAGQEAABoBAAAbAQAAHAEAAE5TdDNfXzIxMF9fZnVuY3Rpb242X19mdW5jSVpOMjROb2lzZUJhc2VkQ2h1bmtHZW5lcmF0b3JDMUVOU18xMHNoYXJlZF9wdHJJMTFCaW9tZVNvdXJjZUVFUzVfeFJLMjJOb2lzZUdlbmVyYXRvclNldHRpbmdzRTMkXzhOU185YWxsb2NhdG9ySVM5X0VFRjZCbG9ja3NOUzNfSTEwTm9pc2VDaHVua0VFaWlpRUVFAAAAAPDUAACsWwAAlFkAAFpOMjROb2lzZUJhc2VkQ2h1bmtHZW5lcmF0b3JDMUVOU3QzX18yMTBzaGFyZWRfcHRySTExQmlvbWVTb3VyY2VFRVMzX3hSSzIyTm9pc2VHZW5lcmF0b3JTZXR0aW5nc0UzJF84AAAAyNQAAGxcAAAAAAAAQF0AAB0BAAAeAQAAHwEAAE0AAAAgAQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJMTdTaW1wbGVGbHVpZFBpY2tlck5TXzlhbGxvY2F0b3JJUzFfRUVFRQAA8NQAAPhcAADg0QAAAAAAAKxdAAAhAQAAIgEAACMBAABNAAAAJAEAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTEzU3VyZmFjZVN5c3RlbU5TXzlhbGxvY2F0b3JJUzFfRUVFRQAA8NQAAGhdAADg0QAAAAAAAMheAAAlAQAAJgEAACcBAAAoAQAAKQEAACoBAAArAQAALAEAAC0BAABOU3QzX18yMTBfX2Z1bmN0aW9uNl9fZnVuY0laTjI0Tm9pc2VCYXNlZENodW5rR2VuZXJhdG9yMTRkb0NyZWF0ZUJpb21lc0VSSzdCbGVuZGVyTlNfMTBzaGFyZWRfcHRySTExQ2h1bmtBY2Nlc3NFRUUzJF85TlNfOWFsbG9jYXRvcklTOV9FRUZOU184ZnVuY3Rpb25JRmRpaWlFRUV2RUVFAE5TdDNfXzIxMF9fZnVuY3Rpb242X19iYXNlSUZOU184ZnVuY3Rpb25JRmRpaWlFRUV2RUVFAAAAyNQAAIheAADw1AAA5F0AAMBeAABaTjI0Tm9pc2VCYXNlZENodW5rR2VuZXJhdG9yMTRkb0NyZWF0ZUJpb21lc0VSSzdCbGVuZGVyTlN0M19fMjEwc2hhcmVkX3B0ckkxMUNodW5rQWNjZXNzRUVFMyRfOQDI1AAA1F4AAAAAAACkXwAALgEAAC8BAAAwAQAATQAAADEBAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUkxOU5vaXNlQ2xpbWF0ZVNhbXBsZXJOU185YWxsb2NhdG9ySVMxX0VFRUUAAAAA8NQAAFhfAADg0QAAAAAAABxgAAAyAQAAMwEAADQBAABNAAAANQEAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTI0Tm9pc2VCYXNlZENodW5rR2VuZXJhdG9yTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAA8NQAAMxfAADg0QAAAAAAAPBgAAA2AQAANwEAADgBAAA5AQAAOgEAADsBAAA8AQAAPQEAAD4BAABOU3QzX18yMTBfX2Z1bmN0aW9uNl9fZnVuY0laTjI0Tm9pc2VCYXNlZENodW5rR2VuZXJhdG9yMTJidWlsZFN1cmZhY2VFTlNfMTBzaGFyZWRfcHRySTExQ2h1bmtBY2Nlc3NFRUU0JF8xME5TXzlhbGxvY2F0b3JJUzZfRUVGTlNfOGZ1bmN0aW9uSUZkaWlpRUVFdkVFRQAAAADw1AAAVGAAAMBeAABaTjI0Tm9pc2VCYXNlZENodW5rR2VuZXJhdG9yMTJidWlsZFN1cmZhY2VFTlN0M19fMjEwc2hhcmVkX3B0ckkxMUNodW5rQWNjZXNzRUVFNCRfMTAAAAAAyNQAAPxgAAAAAAAAKGIAAD8BAABAAQAAQQEAAEIBAABDAQAARAEAAEUBAABGAQAARwEAAE5TdDNfXzIxMF9fZnVuY3Rpb242X19mdW5jSVpOMjROb2lzZUJhc2VkQ2h1bmtHZW5lcmF0b3I2ZG9GaWxsRVJLN0JsZW5kZXJOU18xMHNoYXJlZF9wdHJJMTFDaHVua0FjY2Vzc0VFaWlFNCRfMTFOU185YWxsb2NhdG9ySVM5X0VFRk5TXzhmdW5jdGlvbklGZGlpaUVFRXZFRUUAAADw1AAAiGEAAMBeAABaTjI0Tm9pc2VCYXNlZENodW5rR2VuZXJhdG9yNmRvRmlsbEVSSzdCbGVuZGVyTlN0M19fMjEwc2hhcmVkX3B0ckkxMUNodW5rQWNjZXNzRUVpaUU0JF8xMQAAAMjUAAA0YgAAAAAAAFBkAABSAQAAUwEAAFQBAABVAQAAVgEAAFcBAABYAQAAWQEAAFoBAABOU3QzX18yMTBfX2Z1bmN0aW9uNl9fZnVuY0laTjExQ2h1bmtTdGF0dXMxOG1ha2VHZW5lcmF0aW9uVGFza0VOU184ZnVuY3Rpb25JRnZSS1MyX05TXzEwc2hhcmVkX3B0ckkxNENodW5rR2VuZXJhdG9yRUVOU182dmVjdG9ySU5TNl9JMTFDaHVua0FjY2Vzc0VFTlNfOWFsbG9jYXRvcklTQl9FRUVFU0JfRUVFRTMkXzBOU0NfSVNIX0VFRlNCX1M1X1M4X05TM19JRlNCX1NCX0VFRVNFX1NCX0VFRQBOU3QzX18yMTBfX2Z1bmN0aW9uNl9fYmFzZUlGTlNfMTBzaGFyZWRfcHRySTExQ2h1bmtBY2Nlc3NFRVJLMTFDaHVua1N0YXR1c05TMl9JMTRDaHVua0dlbmVyYXRvckVFTlNfOGZ1bmN0aW9uSUZTNF9TNF9FRUVOU182dmVjdG9ySVM0X05TXzlhbGxvY2F0b3JJUzRfRUVFRVM0X0VFRQAAyNQAAKVjAADw1AAAxGIAAEhkAABaTjExQ2h1bmtTdGF0dXMxOG1ha2VHZW5lcmF0aW9uVGFza0VOU3QzX18yOGZ1bmN0aW9uSUZ2UktTX05TMF8xMHNoYXJlZF9wdHJJMTRDaHVua0dlbmVyYXRvckVFTlMwXzZ2ZWN0b3JJTlM0X0kxMUNodW5rQWNjZXNzRUVOUzBfOWFsbG9jYXRvcklTOV9FRUVFUzlfRUVFRTMkXzAAyNQAAFxkAAAAAAAAbGYAAFsBAABcAQAAXQEAAF4BAABfAQAAYAEAAGEBAABiAQAAYwEAAE5TdDNfXzIxMF9fZnVuY3Rpb242X19mdW5jSVpOMTFDaHVua1N0YXR1czEwaW5pdGlhbGl6ZUV2RTMkXzJOU185YWxsb2NhdG9ySVMzX0VFRnZSS1MyX05TXzEwc2hhcmVkX3B0ckkxNENodW5rR2VuZXJhdG9yRUVOU182dmVjdG9ySU5TOF9JMTFDaHVua0FjY2Vzc0VFTlM0X0lTRF9FRUVFU0RfRUVFAE5TdDNfXzIxMF9fZnVuY3Rpb242X19iYXNlSUZ2UksxMUNodW5rU3RhdHVzTlNfMTBzaGFyZWRfcHRySTE0Q2h1bmtHZW5lcmF0b3JFRU5TXzZ2ZWN0b3JJTlM1X0kxMUNodW5rQWNjZXNzRUVOU185YWxsb2NhdG9ySVNBX0VFRUVTQV9FRUUAyNQAANtlAADw1AAAMGUAAGRmAABaTjExQ2h1bmtTdGF0dXMxMGluaXRpYWxpemVFdkUzJF8yAADI1AAAeGYAAAAAAACUZwAAZAEAAGUBAABmAQAAZwEAAGgBAABpAQAAagEAAGsBAABsAQAATlN0M19fMjEwX19mdW5jdGlvbjZfX2Z1bmNJWk4xMUNodW5rU3RhdHVzMTBpbml0aWFsaXplRXZFMyRfM05TXzlhbGxvY2F0b3JJUzNfRUVGTlNfMTBzaGFyZWRfcHRySTExQ2h1bmtBY2Nlc3NFRVJLUzJfTlM2X0kxNENodW5rR2VuZXJhdG9yRUVOU184ZnVuY3Rpb25JRlM4X1M4X0VFRU5TXzZ2ZWN0b3JJUzhfTlM0X0lTOF9FRUVFUzhfRUVFAPDUAADQZgAASGQAAFpOMTFDaHVua1N0YXR1czEwaW5pdGlhbGl6ZUV2RTMkXzMAAMjUAACgZwAAAAAAAKRoAABbAQAAbQEAAG4BAABvAQAAcAEAAHEBAAByAQAAcwEAAHQBAABOU3QzX18yMTBfX2Z1bmN0aW9uNl9fZnVuY0laTjExQ2h1bmtTdGF0dXMxMGluaXRpYWxpemVFdkUzJF80TlNfOWFsbG9jYXRvcklTM19FRUZ2UktTMl9OU18xMHNoYXJlZF9wdHJJMTRDaHVua0dlbmVyYXRvckVFTlNfNnZlY3RvcklOUzhfSTExQ2h1bmtBY2Nlc3NFRU5TNF9JU0RfRUVFRVNEX0VFRQAA8NQAAPhnAABkZgAAWk4xMUNodW5rU3RhdHVzMTBpbml0aWFsaXplRXZFMyRfNAAAyNQAALBoAAAAAAAAzGkAAGQBAAB1AQAAdgEAAHcBAAB4AQAAeQEAAHoBAAB7AQAAfAEAAE5TdDNfXzIxMF9fZnVuY3Rpb242X19mdW5jSVpOMTFDaHVua1N0YXR1czEwaW5pdGlhbGl6ZUV2RTMkXzVOU185YWxsb2NhdG9ySVMzX0VFRk5TXzEwc2hhcmVkX3B0ckkxMUNodW5rQWNjZXNzRUVSS1MyX05TNl9JMTRDaHVua0dlbmVyYXRvckVFTlNfOGZ1bmN0aW9uSUZTOF9TOF9FRUVOU182dmVjdG9ySVM4X05TNF9JUzhfRUVFRVM4X0VFRQDw1AAACGkAAEhkAABaTjExQ2h1bmtTdGF0dXMxMGluaXRpYWxpemVFdkUzJF81AADI1AAA2GkAAAAAAAD0agAAZAEAAH0BAAB+AQAAfwEAAIABAACBAQAAggEAAIMBAACEAQAATlN0M19fMjEwX19mdW5jdGlvbjZfX2Z1bmNJWk4xMUNodW5rU3RhdHVzMTBpbml0aWFsaXplRXZFMyRfNk5TXzlhbGxvY2F0b3JJUzNfRUVGTlNfMTBzaGFyZWRfcHRySTExQ2h1bmtBY2Nlc3NFRVJLUzJfTlM2X0kxNENodW5rR2VuZXJhdG9yRUVOU184ZnVuY3Rpb25JRlM4X1M4X0VFRU5TXzZ2ZWN0b3JJUzhfTlM0X0lTOF9FRUVFUzhfRUVFAPDUAAAwagAASGQAAFpOMTFDaHVua1N0YXR1czEwaW5pdGlhbGl6ZUV2RTMkXzYAAMjUAAAAawAAAAAAABxsAABkAQAAhQEAAIYBAACHAQAAiAEAAIkBAACKAQAAiwEAAIwBAABOU3QzX18yMTBfX2Z1bmN0aW9uNl9fZnVuY0laTjExQ2h1bmtTdGF0dXMxMGluaXRpYWxpemVFdkUzJF83TlNfOWFsbG9jYXRvcklTM19FRUZOU18xMHNoYXJlZF9wdHJJMTFDaHVua0FjY2Vzc0VFUktTMl9OUzZfSTE0Q2h1bmtHZW5lcmF0b3JFRU5TXzhmdW5jdGlvbklGUzhfUzhfRUVFTlNfNnZlY3RvcklTOF9OUzRfSVM4X0VFRUVTOF9FRUUA8NQAAFhrAABIZAAAWk4xMUNodW5rU3RhdHVzMTBpbml0aWFsaXplRXZFMyRfNwAAyNQAAChsAAAAAAAARG0AAGQBAACNAQAAjgEAAI8BAACQAQAAkQEAAJIBAACTAQAAlAEAAE5TdDNfXzIxMF9fZnVuY3Rpb242X19mdW5jSVpOMTFDaHVua1N0YXR1czEwaW5pdGlhbGl6ZUV2RTMkXzhOU185YWxsb2NhdG9ySVMzX0VFRk5TXzEwc2hhcmVkX3B0ckkxMUNodW5rQWNjZXNzRUVSS1MyX05TNl9JMTRDaHVua0dlbmVyYXRvckVFTlNfOGZ1bmN0aW9uSUZTOF9TOF9FRUVOU182dmVjdG9ySVM4X05T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Y2F0b3JJUzJfRUVFRQAAAADw1AAAOHgAAODRAAAAAAAA+HgAAA0CAAAOAgAADwIAAE4xMlN1cmZhY2VSdWxlczE1QmxvY2tSdWxlU291cmNlRQBOMTJTdXJmYWNlUnVsZXMxMFJ1bGVTb3VyY2VFAADI1AAA0ngAAPDUAACweAAA8HgAAAAAAABweQAAEAIAABECAAASAgAATQAAABMCAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUlOMTJTdXJmYWNlUnVsZXM5U3RhdGVSdWxlRU5TXzlhbGxvY2F0b3JJUzJfRUVFRQAAAPDUAAAgeQAA4NEAAAAAAADUeQAAFAIAABUCAAAWAgAATjEyU3VyZmFjZVJ1bGVzOVN0YXRlUnVsZUUATjEyU3VyZmFjZVJ1bGVzMTFTdXJmYWNlUnVsZUUAAAAAyNQAAKt5AADw1AAAkHkAAMx5AAAAAAAAVHoAABcCAAAYAgAAGQIAAE0AAAAaAgAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJTjEyU3VyZmFjZVJ1bGVzMTVTdG9uZURlcHRoQ2hlY2tFTlNfOWFsbG9jYXRvcklTMl9FRUVFAAAAAPDUAAD8eQAA4NEAAAAAAAAQewAAGwIAABwCAAAdAgAATjEyU3VyZmFjZVJ1bGVzMTVTdG9uZURlcHRoQ2hlY2tFAE4xMlN1cmZhY2VSdWxlczE1Q29uZGl0aW9uU291cmNlRQDI1AAAlnoAAE5TdDNfXzIyM2VuYWJsZV9zaGFyZWRfZnJvbV90aGlzSU4xMlN1cmZhY2VSdWxlczE1U3RvbmVEZXB0aENoZWNrRUVFAAAAAMjUAADAegAATNUAAHR6AAAAAAAAAgAAALh6AAACAAAACHsAAAIEAAAAAAAAqHsAAB4CAAAfAgAAIAIAAE0AAAAhAgAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJTjEyU3VyZmFjZVJ1bGVzMTlTdG9uZURlcHRoQ29uZGl0aW9uRU5TXzlhbGxvY2F0b3JJUzJfRUVFRQAAAADw1AAATHsAAODRAAAAAAAAdHwAACICAAAjAgAAJAIAACUCAAAmAgAATjEyU3VyZmFjZVJ1bGVzMTlTdG9uZURlcHRoQ29uZGl0aW9uRQBOMTJTdXJmYWNlUnVsZXMxNExhenlZQ29uZGl0aW9uRQBOMTJTdXJmYWNlUnVsZXMxM0xhenlDb25kaXRpb25FAE4xMlN1cmZhY2VSdWxlczlDb25kaXRpb25FAAAAyNQAADd8AADw1AAAF3wAAFR8AADw1AAA9nsAAFx8AADw1AAA0HsAAGh8AAAAAAAAaHwAACICAAAnAgAAKAIAACUCAABrAAAAAAAAAFx8AAAiAgAAJwIAACkCAABrAAAAawAAAAAAAAAwfQAAKgIAACsCAAAsAgAATQAAAC0CAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUlOMTJTdXJmYWNlUnVsZXMyMFdhdGVyQ29uZGl0aW9uU291cmNlRU5TXzlhbGxvY2F0b3JJUzJfRUVFRQAAAPDUAADUfAAA4NEAAAAAAADMfQAALgIAAC8CAAAwAgAATjEyU3VyZmFjZVJ1bGVzMjBXYXRlckNvbmRpdGlvblNvdXJjZUUATlN0M19fMjIzZW5hYmxlX3NoYXJlZF9mcm9tX3RoaXNJTjEyU3VyZmFjZVJ1bGVzMjBXYXRlckNvbmRpdGlvblNvdXJjZUVFRQAAAADI1AAAd30AAEzVAABQfQAAAAAAAAIAAAC4egAAAgAAAMR9AAACBAAAAAAAAFx+AAAxAgAAMgIAADMCAABNAAAANAIAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSU4xMlN1cmZhY2VSdWxlczE0V2F0ZXJDb25kaXRpb25FTlNfOWFsbG9jYXRvcklTMl9FRUVFAPDUAAAIfgAA4NEAAAAAAACofgAAIgIAADUCAAA2AgAAJQIAADcCAABOMTJTdXJmYWNlUnVsZXMxNFdhdGVyQ29uZGl0aW9uRQAAAADw1AAAhH4AAGh8AAAAAAAAKH8AADgCAAA5AgAAOgIAAE0AAAA7AgAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJTjEyU3VyZmFjZVJ1bGVzMThTZXF1ZW5jZVJ1bGVTb3VyY2VFTlNfOWFsbG9jYXRvcklTMl9FRUVFAPDUAADQfgAA4NEAAAAAAABwfwAAPAIAAD0CAAA+AgAATjEyU3VyZmFjZVJ1bGVzMThTZXF1ZW5jZVJ1bGVTb3VyY2VFAAAAAPDUAABIfwAA8HgAAAAAAADsfwAAPwIAAEACAABBAgAATQAAAEICAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUlOMTJTdXJmYWNlUnVsZXMxMlNlcXVlbmNlUnVsZUVOU185YWxsb2NhdG9ySVMyX0VFRUUAAADw1AAAmH8AAODRAAAAAAAALIAAAEMCAABEAgAARQIAAE4xMlN1cmZhY2VSdWxlczEyU2VxdWVuY2VSdWxlRQAA8NQAAAyAAADMeQAAAAAAAKiAAABGAgAARwIAAEgCAABNAAAASQIAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSU4xMlN1cmZhY2VSdWxlczE0VGVzdFJ1bGVTb3VyY2VFTlNfOWFsbG9jYXRvcklTMl9FRUVFAPDUAABUgAAA4NEAAAAAAADsgAAASgIAAEsCAABMAgAATjEyU3VyZmFjZVJ1bGVzMTRUZXN0UnVsZVNvdXJjZUUAAAAA8NQAAMiAAADweAAAAAAAAGSBAABNAgAATgIAAE8CAABNAAAAUAIAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSU4xMlN1cmZhY2VSdWxlczhUZXN0UnVsZUVOU185YWxsb2NhdG9ySVMyX0VFRUUAAAAA8NQAABSBAADg0QAAAAAAAKCBAABRAgAAUgIAAFMCAABOMTJTdXJmYWNlUnVsZXM4VGVzdFJ1bGVFAAAA8NQAAISBAADMeQAAAAAAACSCAABUAgAAVQIAAFYCAABNAAAAVwIAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSU4xMlN1cmZhY2VSdWxlczIwQmlvbWVDb25kaXRpb25Tb3VyY2VFTlNfOWFsbG9jYXRvcklTMl9FRUVFAAAA8NQAAMiBAADg0QAAAAAAAMCCAABYAgAAWQIAAFoCAABOMTJTdXJmYWNlUnVsZXMyMEJpb21lQ29uZGl0aW9uU291cmNlRQBOU3QzX18yMjNlbmFibGVfc2hhcmVkX2Zyb21fdGhpc0lOMTJTdXJmYWNlUnVsZXMyMEJpb21lQ29uZGl0aW9uU291cmNlRUVFAAAAAMjUAABrggAATNUAAESCAAAAAAAAAgAAALh6AAACAAAAuIIAAAIEAAAAAAAAUIMAAFsCAABcAgAAXQIAAE0AAABeAgAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJTjEyU3VyZmFjZVJ1bGVzMTRCaW9tZUNvbmRpdGlvbkVOU185YWxsb2NhdG9ySVMyX0VFRUUA8NQAAPyCAADg0QAAAAAAAJyDAAAiAgAAXwIAAGACAAAlAgAAYQIAAE4xMlN1cmZhY2VSdWxlczE0QmlvbWVDb25kaXRpb25FAAAAAPDUAAB4gwAAaHwAADE0VmVydGljYWxBbmNob3IAAAAAyNQAAKiDAAAAAAAAMIQAAGICAABjAgAAZAIAAE0AAABlAgAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJMjVBYm92ZUJvdHRvbVZlcnRpY2FsQW5jaG9yTlNfOWFsbG9jYXRvcklTMV9FRUVFAADw1AAA4IMAAODRAAAAAAAAbIQAAGYCAABnAgAAaAIAADI1QWJvdmVCb3R0b21WZXJ0aWNhbEFuY2hvcgDw1AAAUIQAALyDAAAAAAAA4IQAAGkCAABqAgAAawIAAE0AAABsAgAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJMjJCZWxvd1RvcFZlcnRpY2FsQW5jaG9yTlNfOWFsbG9jYXRvcklTMV9FRUVFAPDUAACUhAAA4NEAAAAAAAAchQAAbQIAAG4CAABvAgAAMjJCZWxvd1RvcFZlcnRpY2FsQW5jaG9yAAAAAPDUAAAAhQAAvIMAAAAAAACkhQAAcAIAAHECAAByAgAATQAAAHMCAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUlOMTJTdXJmYWNlUnVsZXMyM0Fib3ZlUHJlbGltaW5hcnlTdXJmYWNlRU5TXzlhbGxvY2F0b3JJUzJfRUVFRQAAAADw1AAARIUAAODRAAAAAAAA8IUAAHQCAAB1AgAAdgIAAE4xMlN1cmZhY2VSdWxlczIzQWJvdmVQcmVsaW1pbmFyeVN1cmZhY2VFAAAA8NQAAMSFAAC4egAAAAAAAICGAAB3AgAAeAIAAHkCAABNAAAAegIAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSU4xMlN1cmZhY2VSdWxlczMyQWJvdmVQcmVsaW1pbmFyeVN1cmZhY2VDb25kaXRpb25FTlNfOWFsbG9jYXRvcklTMl9FRUVFAAAA8NQAABiGAADg0QAAAAAAANSGAAB7AgAAfAIAAH0CAABOMTJTdXJmYWNlUnVsZXMzMkFib3ZlUHJlbGltaW5hcnlTdXJmYWNlQ29uZGl0aW9uRQAA8NQAAKCGAABUfAAAAAAAAEiHAAB+AgAAfwIAAIACAABNAAAAgQIAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSU4xMlN1cmZhY2VSdWxlczdDb250ZXh0RU5TXzlhbGxvY2F0b3JJUzJfRUVFRQDw1AAA/IYAAODRAAAAAAAA2IcAAIoCAACLAgAAjAIAAE0AAACNAgAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJTjExQ3ViaWNTcGxpbmVJTjEzVGVycmFpblNoYXBlcjVQb2ludEVFOENvbnN0YW50RU5TXzlhbGxvY2F0b3JJUzVfRUVFRQAAAADw1AAAcIcAAODRAAAAAAAAXIgAAI4CAACPAgAAkAIAAE4xMUN1YmljU3BsaW5lSU4xM1RlcnJhaW5TaGFwZXI1UG9pbnRFRThDb25zdGFudEUAMTFDdWJpY1NwbGluZUlOMTNUZXJyYWluU2hhcGVyNVBvaW50RUUAAAAAyNQAACqIAADw1AAA+IcAAFSIAAAAAAAAVIgAAI4CAACRAgAAawAAAAAAAAAAiQAAkgIAAJMCAACUAgAATQAAAJUCAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUlOMTFDdWJpY1NwbGluZUlOMTNUZXJyYWluU2hhcGVyNVBvaW50RUUxME11bHRpcG9pbnRFTlNfOWFsbG9jYXRvcklTNV9FRUVFAPDUAACYiAAA4NEAAAAAAABYiQAAlgIAAJcCAACYAgAATjExQ3ViaWNTcGxpbmVJTjEzVGVycmFpblNoYXBlcjVQb2ludEVFMTBNdWx0aXBvaW50RQAAAADw1AAAIIkAAFSIAAAAAAAAyIkAAJkCAACaAgAAmwIAADE0V29ybGRHZW5SZWdpb24ATlN0M19fMjIzZW5hYmxlX3NoYXJlZF9mcm9tX3RoaXNJMTRXb3JsZEdlblJlZ2lvbkVFAAAAAMjUAACJiQAATNUAAHiJAAAAAAAAAgAAAJBMAAACAAAAwIkAAAIEAAAAAAAACIoAAJwCAACdAgAAMTFoYXNoX3NoYTI1NgAAAMjUAAD4iQAAmC+KQpFEN3HP+8C1pdu16VvCVjnxEfFZpII/ktVeHKuYqgfYAVuDEr6FMSTDfQxVdF2+cv6x3oCnBtybdPGbwcFpm+SGR77vxp3BD8yhDCRvLOktqoR0StypsFzaiPl2UlE+mG3GMajIJwOwx39Zv/ML4MZHkafVUWPKBmcpKRSFCrcnOCEbLvxtLE0TDThTVHMKZbsKanYuycKBhSxykqHov6JLZhqocItLwqNRbMcZ6JLRJAaZ1oU1DvRwoGoQFsGkGQhsNx5Md0gntbywNLMMHDlKqthOT8qcW/NvLmjugo90b2OleBR4yIQIAseM+v++kOtsUKT3o/m+8nhxxgAAAABwiwAAngIAAJ8CAACgAgAATQAAAKECAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUkxMkJpb21lTWFuYWdlck5TXzlhbGxvY2F0b3JJUzFfRUVFRQAAAPDUAAAsiwAA4NEAAAAAAAAAjAAAsgAAAKICAACjAgAApAIAAKUCAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQMjFNdWx0aU5vaXNlQmlvbWVTb3VyY2VOU18xNGRlZmF1bHRfZGVsZXRlSVMxX0VFTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAAAPDUAACYiwAA4NEAAE5TdDNfXzIxNGRlZmF1bHRfZGVsZXRlSTIxTXVsdGlOb2lzZUJpb21lU291cmNlRUUAAAAAAAAALREAANQoAADCIwAAuSMAALEjAACoIwAAnyMAAJYjAAA6HwAAOwYAACgGAACuGwAAIygAAFgNAAB+DQAAYw0AAHANAACaDQAAUw0AAKoiAADoIgAAvSIAANIiAAD+IgAAkiIAAL0eAADLEQAAOzQAAHsvAAB3LwAAKh4AAG8nAABlJwAADCcAAAInAAAfJwAAFScAAFUnAAAEIgAAPCIAABUiAAAoIgAAUCIAAO4hAAAzIgAADCIAAB8iAABHIgAA5SEAAPshAADiLgAAHS8AAPQuAAAILwAAMi8AAMsuAADZLgAAFC8AAOsuAAD/LgAAKS8AAMIuAADXDgAA/Q4AAOIOAADvDgAACw8AANIOAAAjDwAAGQ8AAPMsAADvLAAAiQoAAOMmAADZJgAARh8AANoRAACqKAAAoSgAAEQoAABHIAAAXDAAAHowAACNMAAATTAAABIwAABmMAAAOjAAAAkwAAADMAAAMTAAAG8wAABTMAAAHTAAACcwAACFMAAAQzAAAB0eAAAAHgAABRgAAFQxAABaCQAAgRcAAGchAABMCQAARwkAABoYAADWMAAAFhwAADccAABMHAAABhwAAMUbAAAhHAAA8RsAALsbAAC1GwAA5xsAACscAAAMHAAA0RsAANwbAABDHAAA+xsAABMYAACsGAAAbAQAAMovAADeGgAA8AYAAA0XAAD5FgAA5hYAANQWAAAvBAAAfBEAAHsmAACHBAAAAxsAABkbAADmIAAAmB8AALwOAABXBgAAWCMAAAgoAADKGQAA3yEAAMshAAC4JwAAsycAAJQSAADZCwAAEgYAAJcnAABJJwAAPycAAKggAAB0KwAA4QcAAIAvAAAOLgAAcxkAAJMZAAB8GQAAqxkAAIcZAABuGQAAzBAAACAWAAAlHgAAjgwAAAwZAAA7GQAAGhkAAF0ZAAAqGQAABxkAAJ4RAABLJQAAvRAAABUlAAB2JQAAKCUAAGAlAADeJQAAECUAADInAAAoJwAA1iEAAMIhAADAFwAA0AUAAAQuAADxHgAA7gcAAKYEAABjKgAAqwQAAJAtAADSGAAAGyEAAG0vAAD2HQAAxAYAALsGAACnIQAAsiEAAL0nAAA4HgAAyxgAAD8XAACjLAAA0REAABYKAABSCgAAeQoAAP0JAACGCQAAKgoAANYJAABzCQAAbQkAAMMJAAA9CgAAAwoAAJsJAACvCQAAZwoAAOkJAABUEAAAgBAAAGEQAABwEAAAoBAAAE8QAACkDgAAOg4AAJwOAAB9DgAAyygAABooAABeDgAAMQ4AAJMOAAB0DgAAox8AALgfAAB5GwAAOg0AAOIYAABYKgAAUxgAAGMbAABPGwAAbBsAAFgbAADaKAAAtxkAAAwmAADHCwAAqQsAAOUaAACZMAAA5w0AAHgtAABACwAAQAYAAGMrAABfLwAAShgAADYYAABFGAAAIRgAAEYeAABuKgAAwSgAABkjAAC6FgAAkjYAAMQMAACCJwAAeCcAAP4FAACkHgAAjicAAPEgAAAQDQAA5AsAAAINAADUIAAAthgAAHsdAAB1HQAATAYAAKMiAADhIgAAtiIAAMsiAAD3IgAAiyIAAHoXAAClGAAAZQQAAMMvAADXGgAA6QYAAAYXAADyFgAA3xYAAM0WAAAoBAAAdREAAIAEAAB0JgAAEhsAAPwaAABgIQAA5wcAAEAIAAAxDwAAmhcAANsXAAClFwAAzRcAAPcXAACVFwAAYBwAAHYcAABZHAAAbxwAADMxAAAiMQAAvTAAAO4wAADJMAAA/zAAAOIwAAARMQAA8B0AANodAADoHQAACgYAAKolAACMJQAA4w8AALsPAACCIAAAxyYAAOwRAADOHgAAxR4AACcWAACWCgAADh4AAOQRAADRNAAABDUAAH82AAC7NAAAVjQAAOI0AACaNAAARjQAAEA0AACKNAAA8jQAAME0AABoNAAAeTQAAHA2AACqNAAAzCkAABcqAABIKgAArikAABkpAADlKQAAfSkAAAEpAAD7KAAAZSkAAP0pAAC0KQAAMykAAEwpAAAxKgAAlSkAACwNAADUCwAAnCAAAKIUAADZBgAAQRAAAOQoAACxDgAA3ygAANoMAAC8CwAA1QwAAMUzAABwMgAAwDMAAFsXAADnHgAAiwcAALIHAADLBwAAeQcAACAHAACYBwAAYAcAABQHAAAOBwAAVAcAAKQHAAB/BwAAOgcAAEcHAADABwAAbAcAAIc2AAA8IAAA/S0AAGsRAABOMQAAViEAAHoEAABVCQAAbxcAABMUAAA6FAAAUxQAAAEUAACuEgAAIBQAAOgTAACiEgAAnBIAANYSAAAsFAAABxQAALwSAADJEgAASBQAAPQTAAB7EwAAsRMAANQTAABkEwAA+RIAAI0TAABBEwAA6BIAAOISAAAwEwAAnhMAAGoTAAAMEwAAHhMAAMQTAABSEwAAkygAAIooAABjKAAAwAwAAJ4yAAD1MwAApzIAAOkzAAANNAAAhjIAALUzAACuMwAAnzMAAFQzAACUMgAAQzMAAHsyAABfMgAA/jEAAGIxAACbMwAAfTMAAG4xAAC0KAAAUigAAAAEAAB1KAAAPiYAABsmAAAsJgAAYiYAAAcmAACzLQAAmi0AAKYtAADNLQAAiy0AAOwQAADVEAAA4BAAAAQRAADHEAAAui4AAFsGAACHEQAAUh8AAEUWAACkCgAATQ4AAEgIAAA7IQAAmgQAAMogAAC2IAAA8S0AAA8hAAALHwAAtg0AAJEgAAC0LwAAlREAAK0FAABMBQAAggUAAKUFAAA1BQAAygQAAF4FAAASBQAAuQQAALMEAAABBQAAbwUAADsFAADdBAAA7wQAAJUFAAAjBQAA3zUAACc2AABWNgAAwjUAADM1AAD3NQAAkzUAABw1AAAWNQAAfDUAAA42AADINQAATDUAAGQ1AABANgAAqjUAAFMkAACAJAAAnSQAAD8kAADmIwAAYiQAACIkAADYIwAA0iMAABQkAABwJAAARSQAAPYjAAAFJAAAkCQAADAkAACbFQAA3RUAAAgWAACAFQAA/RQAALEVAABVFQAA6BQAAOIUAABAFQAAxhUAAIYVAAAUFQAAKhUAAPQVAABqFQAAyBYAAKIGAACDHwAAJCMAACYgAADhHwAADiAAAPgfAADLHwAAKyAAAOYfAAATIAAA/R8AANAfAACUHgAAYR4AAIIeAAByHgAAUR4AAJkeAABmHgAAhx4AAHceAABWHgAAphoAAGcaAACQGgAAfBoAAFMaAACrGgAAbBoAAJUaAACBGgAAWBoAADoaAADsGQAAHxoAAAYaAADTGQAAPxoAAPEZAAAkGgAACxoAANgZAAB/KgAA6C0AAMsGAAB8IgAAOBcAADEXAAAoEQAAHxEAAL0YAAAiDAAAuQwAAIwLAAAKDAAAiAwAAKULAADIDAAAoQwAAI8KAAArDAAA+gsAADwLAADxCwAAEwwAAN8yAACUMwAARDIAAMkyAAA9MwAAWzIAAGczAABbMQAA6DIAALsyAAD6MQAAsjIAANIyAAD6HAAAnx0AAIwdAADZHAAAIB0AAPQcAACTHAAABR0AAI8cAACQHQAA8BwAABMdAAANIwAAJhsAADEeAACHFAAACC4AAFErAACSKwAAOSgAAGcXAACDKwAApBEAAIocAABfFwAAThcAAKonAAClJwAARSEAAKIbAACZGwAAZC4AAFsuAADJGgAAEggAAB0fAAB8CAAAIAgAAEIbAAA5GwAATC4AAEMuAAC6GgAA/AcAANMGAABJDwAAfQYAADoPAABoBgAAWQgAAEQNAACMDQAA7TEAAAE0AAD5JAAAyCUAAGotAADALQAAMBAAAJAQAAD0JQAAUCYAAC0LAAAeDQAAhhcAAOkXAACwEAAA+BAAAOgYAACfGQAA9RgAAEwZAABiIAAA1QUAAMERAADaBwAA9QUAAI4jAADbHgAA/yAAAFIgAADDDgAAwxkAABARAAD1BwAACwgAAFIIAAB1CAAALygAAP0nAAB2DAAAZR0AAC0zAADiJwAAFg4AAA4OAADZJwAAJTIAAGsLAAC6HAAA9icAAG0MAAAkMwAAPSUAALIXAABcHQAAyA0AAN8NAACoDQAASisAAAIrAAApKwAAQisAAPAqAACjKgAADysAANcqAACXKgAAkSoAAMsqAAAbKwAA9ioAALEqAAC+KgAANysAAOMqAACcLAAAOywAAHEsAACULAAAJCwAALkrAABNLAAAASwAAKgrAACiKwAA8CsAAF4sAAAqLAAAzCsAAN4rAACELAAAEiwAAPweAADkBQAAsBEAAJkuAAByLgAAhi4AAGIjAADKIwAAYAkAAMkFAAAjEAAAWBIAAIMSAABuEgAAdh8AAPcmAADtJgAA+REAAD0SAAAkEgAARxIAALgKAAARCwAA8QoAABsLAACAMQAA0zEAALUxAADdMQAAcB8AAH0SAABoEgAAUhIAAPMRAAA3EgAAHhIAAA0SAACyCgAACwsAAOsKAADTCgAAejEAAM0xAACvMQAAmTEAAKwuAADHJwAAciAAAFcPAACRBgAA7hoAAKI2AACYNgAALgcAAC8fAACBIwAAhxsAAHIjAABnCAAANAYAAO8kAADUJAAAOgwAAPUyAAAtHQAA5iQAAFMMAAAMMwAARB0AAHEPAADsDAAA1TMAAK8dAAD9DQAAVAsAABAyAAClHAAAwSQAAPUNAABpDwAAriQAAK0GAACUHwAAXx8AAOIgAACOIQAAcSEAAAAAAADgmgAAWwAAAKYCAACnAgAAqAIAAKkCAACqAgAAqwIAAKwCAACtAgAATlN0M19fMjEwX19mdW5jdGlvbjZfX2Z1bmNJTjExQ2h1bmtTdGF0dXMzJF8wRU5TXzlhbGxvY2F0b3JJUzNfRUVGTlNfMTBzaGFyZWRfcHRySTExQ2h1bmtBY2Nlc3NFRVM4X0VFRQDw1AAAeJoAAGRDAABOMTFDaHVua1N0YXR1czMkXzBFAMjUAADsmgBBkLYCC9cVAwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGAAEHzywILvSJA+yH5PwAAAAAtRHQ+AAAAgJhG+DwAAABgUcx4OwAAAICDG/A5AAAAQCAlejgAAACAIoLjNgAAAAAd82k1ADj6/kIu5j8wZ8eTV/MuPQEAAAAAAOC/WzBRVVVV1T+QRev////PvxEB8SSzmck/n8gG5XVVxb8AAAAAAADgv3dVVVVVVdU/y/3/////z78M3ZWZmZnJP6dFZ1VVVcW/MN5EoyRJwj9lPUKk//+/v8rWKiiEcbw//2iwQ+uZub+F0K/3goG3P81F0XUTUrW/n97gw/A09z8AkOZ5f8zXvx/pLGp4E/c/AAANwu5v17+gtfoIYPL2PwDgURPjE9e/fYwTH6bR9j8AeCg4W7jWv9G0xQtJsfY/AHiAkFVd1r+6DC8zR5H2PwAAGHbQAta/I0IiGJ9x9j8AkJCGyqjVv9kepZlPUvY/AFADVkNP1b/EJI+qVjP2PwBAa8M39tS/FNyda7MU9j8AUKj9p53Uv0xcxlJk9vU/AKiJOZJF1L9PLJG1Z9j1PwC4sDn07dO/3pBby7y69T8AcI9EzpbTv3ga2fJhnfU/AKC9Fx5A07+HVkYSVoD1PwCARu/i6dK/02vnzpdj9T8A4DA4G5TSv5N/p+IlR/U/AIjajMU+0r+DRQZC/yr1PwCQJynh6dG/372y2yIP9T8A+EgrbZXRv9feNEeP8/Q/APi5mmdB0b9AKN7PQ9j0PwCY75TQ7dC/yKN4wD699D8AENsYpZrQv4ol4MN/ovQ/ALhjUuZH0L80hNQkBYj0PwDwhkUi68+/Cy0ZG85t9D8AsBd1SkfPv1QYOdPZU/Q/ADAQPUSkzr9ahLREJzr0PwCw6UQNAs6/+/gVQbUg9D8A8HcpomDNv7H0PtqCB/Q/AJCVBAHAzL+P/lddj+7zPwAQiVYpIMy/6UwLoNnV8z8AEIGNF4HLvyvBEMBgvfM/ANDTzMniyr+42nUrJKXzPwCQEi5ARcq/AtCfzSKN8z8A8B1od6jJvxx6hMVbdfM/ADBIaW0Myb/iNq1Jzl3zPwDARaYgcci/QNRNmHlG8z8AMBS0j9bHvyTL/85cL/M/AHBiPLg8x79JDaF1dxjzPwBgN5uao8a/kDk+N8gB8z8AoLdUMQvGv0H4lbtO6/I/ADAkdn1zxb/RqRkCCtXyPwAwwo973MS/Kv23qPm+8j8AANJRLEbEv6sbDHocqfI/AACDvIqww78wtRRgcpPyPwAASWuZG8O/9aFXV/p98j8AQKSQVIfCv787HZuzaPI/AKB5+Lnzwb+99Y+DnVPyPwCgLCXIYMG/OwjJqrc+8j8AIPdXf87Av7ZAqSsBKvI/AKD+Sdw8wL8yQcyWeRXyPwCAS7y9V7+/m/zSHSAB8j8AQECWCDe+vwtITUn07PE/AED5PpgXvb9pZY9S9djxPwCg2E5n+bu/fH5XESPF8T8AYC8gedy6v+kmy3R8sfE/AIAo58PAub+2GiwMAZ7xPwDAcrNGpri/vXC2e7CK8T8AAKyzAY23v7a87yWKd/E/AAA4RfF0tr/aMUw1jWTxPwCAh20OXrW/3V8nkLlR8T8A4KHeXEi0v0zSMqQOP/E/AKBqTdkzs7/a+RByiyzxPwBgxfh5ILK/MbXsKDAa8T8AIGKYRg6xv680hNr7B/E/AADSamz6r7+za04P7vXwPwBAd0qN2q2/zp8qXQbk8D8AAIXk7LyrvyGlLGNE0vA/AMASQImhqb8amOJ8p8DwPwDAAjNYiKe/0TbGgy+v8D8AgNZnXnGlvzkToJjbnfA/AIBlSYpco7/f51Kvq4zwPwBAFWTjSaG/+yhOL5978D8AgOuCwHKevxmPNYy1avA/AIBSUvFVmr8s+eyl7lnwPwCAgc9iPZa/kCzRzUlJ8D8AAKqM+yiSv6mt8MbGOPA/AAD5IHsxjL+pMnkTZSjwPwAAql01GYS/SHPqJyQY8D8AAOzCAxJ4v5WxFAYECPA/AAAkeQkEYL8a+ib3H+DvPwAAkITz728/dOphwhyh7z8AAD01QdyHPy6ZgbAQY+8/AIDCxKPOkz/Nre489iXvPwAAiRTBn5s/5xORA8jp7j8AABHO2LChP6uxy3iAru4/AMAB0FuKpT+bDJ2iGnTuPwCA2ECDXKk/tZkKg5E67j8AgFfvaietP1aaYAngAe4/AMCY5Zh1sD+Yu3flAcrtPwAgDeP1U7I/A5F8C/KS7T8AADiL3S60P85c+2asXO0/AMBXh1kGtj+d3l6qLCftPwAAajV22rc/zSxrPm7y7D8AYBxOQ6u5PwJ5p6Jtvuw/AGANu8d4uz9tCDdtJovsPwAg5zITQ70/BFhdvZRY7D8AYN5xMQq/P4yfuzO1Juw/AECRKxVnwD8/5+zug/XrPwCwkoKFR8E/wZbbdf3E6z8AMMrNbibCPyhKhgweles/AFDFptcDwz8sPu/F4mXrPwAQMzzD38M/i4jJZ0g36z8AgHprNrrEP0owHSFLCes/APDRKDmTxT9+7/KF6NvqPwDwGCTNasY/oj1gMR2v6j8AkGbs+EDHP6dY0z/mguo/APAa9cAVyD+LcwnvQFfqPwCA9lQp6cg/J0urkCos6j8AQPgCNrvJP9HykxOgAeo/AAAsHO2Lyj8bPNskn9fpPwDQAVxRW8s/kLHHBSWu6T8AwLzMZynMPy/Ol/Iuhek/AGBI1TX2zD91S6TuulzpPwDARjS9wc0/OEjnncY06T8A4M+4AYzOP+ZSZy9PDek/AJAXwAlVzz+d1/+OUuboPwC4HxJsDtA/fADMn86/6D8A0JMOuHHQPw7DvtrAmeg/AHCGnmvU0D/7FyOqJ3ToPwDQSzOHNtE/CJqzrABP6D8ASCNnDZjRP1U+ZehJKug/AIDM4P/40T9gAvSVAQboPwBoY9dfWdI/KaPgYyXi5z8AqBQJMLnSP6213Hezvuc/AGBDEHIY0z/CJZdnqpvnPwAY7G0md9M/VwYX8gd55z8AMK/7T9XTPwwT1tvKVuc/AOAv4+4y1D9rtk8BABDmPzxbQpFsAn48lbRNAwAw5j9BXQBI6r+NPHjUlA0AUOY/t6XWhqd/jjytb04HAHDmP0wlVGvq/GE8rg/f/v+P5j/9DllMJ358vLzFYwcAsOY/AdrcSGjBirz2wVweANDmPxGTSZ0cP4M8PvYF6//v5j9TLeIaBIB+vICXhg4AEOc/UnkJcWb/ezwS6Wf8/y/nPySHvSbiAIw8ahGB3/9P5z/SAfFukQJuvJCcZw8AcOc/dJxUzXH8Z7w1yH76/4/nP4ME9Z7BvoE85sIg/v+v5z9lZMwpF35wvADJP+3/z+c/HIt7CHKAgLx2Gibp/+/nP675nW0owI086KOcBAAQ6D8zTOVR0n+JPI8skxcAMOg/gfMwtun+irycczMGAFDoP7w1ZWu/v4k8xolCIABw6D91exHzZb+LvAR59ev/j+g/V8s9om4AibzfBLwiALDoPwpL4DjfAH28ihsM5f/P6D8Fn/9GcQCIvEOOkfz/7+g/OHB60HuBgzzHX/oeABDpPwO033aRPok8uXtGEwAw6T92AphLToB/PG8H7ub/T+k/LmL/2fB+j7zREjze/2/pP7o4JpaqgnC8DYpF9P+P6T/vqGSRG4CHvD4umN3/r+k/N5NaiuBAh7xm+0nt/8/pPwDgm8EIzj88UZzxIADw6T8KW4gnqj+KvAawRREAEOo/VtpYmUj/dDz69rsHADDqPxhtK4qrvow8eR2XEABQ6j8weXjdyv6IPEgu9R0AcOo/26vYPXZBj7xSM1kcAJDqPxJ2woQCv468Sz5PKgCw6j9fP/88BP1pvNEertf/z+o/tHCQEuc+grx4BFHu/+/qP6PeDuA+Bmo8Ww1l2/8P6z+5Ch84yAZaPFfKqv7/L+s/HTwjdB4BebzcupXZ/0/rP58qhmgQ/3m8nGWeJABw6z8+T4bQRf+KPEAWh/n/j+s/+cPClnf+fDxPywTS/6/rP8Qr8u4n/2O8RVxB0v/P6z8h6jvut/9svN8JY/j/7+s/XAsulwNBgbxTdrXh/w/sPxlqt5RkwYs841f68f8v7D/txjCN7/5kvCTkv9z/T+w/dUfsvGg/hLz3uVTt/2/sP+zgU/CjfoQ81Y+Z6/+P7D/xkvmNBoNzPJohJSEAsOw/BA4YZI79aLycRpTd/8/sP3Lqxxy+fo48dsT96v/v7D/+iJ+tOb6OPCv4mhYAEO0/cVq5qJF9dTwd9w8NADDtP9rHcGmQwYk8xA956v9P7T8M/ljFNw5YvOWH3C4AcO0/RA/BTdaAf7yqgtwhAJDtP1xc/ZSPfHS8gwJr2P+v7T9+YSHFHX+MPDlHbCkA0O0/U7H/sp4BiDz1kETl/+/tP4nMUsbSAG48lParzf8P7j/SaS0gQIN/vN3IUtv/L+4/ZAgbysEAezzvFkLy/0/uP1GrlLCo/3I8EV6K6P9v7j9Zvu+xc/ZXvA3/nhEAkO4/AcgLXo2AhLxEF6Xf/6/uP7UgQ9UGAHg8oX8SGgDQ7j+SXFZg+AJQvMS8ugcA8O4/EeY1XURAhbwCjXr1/w/vPwWR7zkx+0+8x4rlHgAw7z9VEXPyrIGKPJQ0gvX/T+8/Q8fX1EE/ijxrTKn8/2/vP3V4mBz0AmK8QcT54f+P7z9L53f00X13PH7j4NL/r+8/MaN8mhkBb7ye5HccANDvP7GszkvugXE8McPg9//v7z9ah3ABNwVuvG5gZfT/D/A/2gocSa1+irxYeobz/y/wP+Cy/MNpf5e8Fw38/f9P8D9blMs0/r+XPIJNzQMAcPA/y1bkwIMAgjzoy/L5/4/wPxp1N77f/228ZdoMAQCw8D/rJuaufz+RvDjTpAEA0PA/959Iefp9gDz9/dr6/+/wP8Br1nAFBHe8lv26CwAQ8T9iC22E1ICOPF305fr/L/E/7zb9ZPq/nTzZmtUNAFDxP65QEnB3AJo8mlUhDwBw8T/u3uPi+f2NPCZUJ/z/j/E/c3I73DAAkTxZPD0SALDxP4gBA4B5f5k8t54p+P/P8T9njJ+rMvllvADUivT/7/E/61unnb9/kzykhosMABDyPyJb/ZFrgJ88A0OFAwAw8j8zv5/rwv+TPIT2vP//T/I/ci4ufucBdjzZISn1/2/yP2EMf3a7/H88PDqTFACQ8j8rQQI8ygJyvBNjVRQAsPI/Ah/yM4KAkrw7Uv7r/8/yP/LcTzh+/4i8lq24CwDw8j/FQTBQUf+FvK/ievv/D/M/nSheiHEAgbx/X6z+/y/zPxW3tz9d/5G8VmemDABQ8z+9gosign+VPCH3+xEAcPM/zNUNxLoAgDy5L1n5/4/zP1Gnsi2dP5S8QtLdBACw8z/hOHZwa3+FPFfJsvX/z/M/MRK/EDoCejwYtLDq/+/zP7BSsWZtf5g89K8yFQAQ9D8khRlfN/hnPCmLRxcAMPQ/Q1HccuYBgzxjtJXn/0/0P1qJsrhp/4k84HUE6P9v9D9U8sKbscCVvOfBb+//j/Q/cio68glAmzwEp77l/6/0P0V9Db+3/5S83icQFwDQ9D89atxxZMCZvOI+8A8A8PQ/HFOFC4l/lzzRS9wSABD1PzakZnFlBGA8eicFFgAw9T8JMiPOzr+WvExw2+z/T/U/16EFBXICibypVF/v/2/1PxJkyQ7mv5s8EhDmFwCQ9T+Q76+BxX6IPJI+yQMAsPU/wAy/CghBn7y8GUkdAND1PylHJfsqgZi8iXq45//v9T8Eae2At36UvP6CK2VHFWdAAAAAAAAAOEMAAPr+Qi52vzo7nrya9wy9vf3/////3z88VFVVVVXFP5ErF89VVaU/F9CkZxERgT8AAAAAAADIQu85+v5CLuY/JMSC/72/zj+19AzXCGusP8xQRtKrsoM/hDpOm+DXVT8AQb7uAgvCEPA/br+IGk87mzw1M/upPfbvP13c2JwTYHG8YYB3Pprs7z/RZocQel6QvIV/bugV4+8/E/ZnNVLSjDx0hRXTsNnvP/qO+SOAzou83vbdKWvQ7z9hyOZhTvdgPMibdRhFx+8/mdMzW+SjkDyD88bKPr7vP217g12mmpc8D4n5bFi17z/87/2SGrWOPPdHciuSrO8/0ZwvcD2+Pjyi0dMy7KPvPwtukIk0A2q8G9P+r2ab7z8OvS8qUlaVvFFbEtABk+8/VepOjO+AULzMMWzAvYrvPxb01bkjyZG84C2prpqC7z+vVVzp49OAPFGOpciYeu8/SJOl6hUbgLx7UX08uHLvPz0y3lXwH4+86o2MOPlq7z+/UxM/jImLPHXLb+tbY+8/JusRdpzZlrzUXASE4FvvP2AvOj737Jo8qrloMYdU7z+dOIbLguePvB3Z/CJQTe8/jcOmREFvijzWjGKIO0bvP30E5LAFeoA8ltx9kUk/7z+UqKjj/Y6WPDhidW56OO8/fUh08hhehzw/prJPzjHvP/LnH5grR4A83XziZUUr7z9eCHE/e7iWvIFj9eHfJO8/MasJbeH3gjzh3h/1nR7vP/q/bxqbIT28kNna0H8Y7z+0CgxygjeLPAsD5KaFEu8/j8vOiZIUbjxWLz6prwzvP7arsE11TYM8FbcxCv4G7z9MdKziAUKGPDHYTPxwAe8/SvjTXTndjzz/FmSyCPzuPwRbjjuAo4a88Z+SX8X27j9oUEvM7UqSvMupOjen8e4/ji1RG/gHmbxm2AVtruzuP9I2lD7o0XG895/lNNvn7j8VG86zGRmZvOWoE8Mt4+4/bUwqp0ifhTwiNBJMpt7uP4ppKHpgEpO8HICsBEXa7j9biRdIj6dYvCou9yEK1u4/G5pJZ5ssfLyXqFDZ9dHuPxGswmDtY0M8LYlhYAjO7j/vZAY7CWaWPFcAHe1Byu4/eQOh2uHMbjzQPMG1osbuPzASDz+O/5M83tPX8CrD7j+wr3q7zpB2PCcqNtXav+4/d+BU670dkzwN3f2ZsrzuP46jcQA0lI+8pyyddrK57j9Jo5PczN6HvEJmz6Latu4/XzgPvcbeeLyCT51WK7TuP/Zce+xGEoa8D5JdyqSx7j+O1/0YBTWTPNontTZHr+4/BZuKL7eYezz9x5fUEq3uPwlUHOLhY5A8KVRI3Qer7j/qxhlQhcc0PLdGWYomqe4/NcBkK+YylDxIIa0Vb6fuP592mWFK5Iy8Cdx2ueGl7j+oTe87xTOMvIVVOrB+pO4/rukriXhThLwgw8w0RqPuP1hYVnjdzpO8JSJVgjii7j9kGX6AqhBXPHOpTNRVoe4/KCJev++zk7zNO39mnqDuP4K5NIetEmq8v9oLdRKg7j/uqW2472djvC8aZTyyn+4/UYjgVD3cgLyElFH5fZ/uP88+Wn5kH3i8dF/s6HWf7j+wfYvASu6GvHSBpUian+4/iuZVHjIZhrzJZ0JW65/uP9PUCV7LnJA8P13eT2mg7j8dpU253DJ7vIcB63MUoe4/a8BnVP3slDwywTAB7aHuP1Vs1qvh62U8Yk7PNvOi7j9Cz7MvxaGIvBIaPlQnpO4/NDc78bZpk7wTzkyZiaXuPx7/GTqEXoC8rccjRhqn7j9uV3LYUNSUvO2SRJvZqO4/AIoOW2etkDyZZorZx6ruP7Tq8MEvt40826AqQuWs7j//58WcYLZlvIxEtRYyr+4/RF/zWYP2ezw2dxWZrrHuP4M9HqcfCZO8xv+RC1u07j8pHmyLuKldvOXFzbA3t+4/WbmQfPkjbLwPUsjLRLruP6r59CJDQ5K8UE7en4K97j9LjmbXbMqFvLoHynDxwO4/J86RK/yvcTyQ8KOCkcTuP7tzCuE10m08IyPjGWPI7j9jImIiBMWHvGXlXXtmzO4/1THi44YcizwzLUrsm9DuPxW7vNPRu5G8XSU+sgPV7j/SMe6cMcyQPFizMBOe2e4/s1pzboRphDy//XlVa97uP7SdjpfN34K8evPTv2vj7j+HM8uSdxqMPK3TWpmf6O4/+tnRSo97kLxmto0pB+7uP7qu3FbZw1W8+xVPuKLz7j9A9qY9DqSQvDpZ5Y1y+e4/NJOtOPTWaLxHXvvydv/uPzWKWGvi7pG8SgahMLAF7z/N3V8K1/90PNLBS5AeDO8/rJiS+vu9kbwJHtdbwhLvP7MMrzCubnM8nFKF3ZsZ7z+U/Z9cMuOOPHrQ/1+rIO8/rFkJ0Y/ghDxL0Vcu8SfvP2caTjivzWM8tecGlG0v7z9oGZJsLGtnPGmQ79wgN+8/0rXMgxiKgLz6w11VCz/vP2/6/z9drY+8fIkHSi1H7z9JqXU4rg2QvPKJDQiHT+8/pwc9poWjdDyHpPvcGFjvPw8iQCCekYK8mIPJFuNg7z+sksHVUFqOPIUy2wPmae8/S2sBrFk6hDxgtAHzIXPvPx8+tAch1YK8X5t7M5d87z/JDUc7uSqJvCmh9RRGhu8/04g6YAS2dDz2P4vnLpDvP3FynVHsxYM8g0zH+1Ga7z/wkdOPEvePvNqQpKKvpO8/fXQj4piujbzxZ44tSK/vPwggqkG8w448J1ph7hu67z8y66nDlCuEPJe6azcrxe8/7oXRMalkijxARW5bdtDvP+3jO+S6N468FL6crf3b7z+dzZFNO4l3PNiQnoHB5+8/icxgQcEFUzzxcY8rwvPvPwA4+v5CLuY/MGfHk1fzLj0AAAAAAADgv2BVVVVVVeW/BgAAAAAA4D9OVVmZmZnpP3qkKVVVVeW/6UVIm1tJ8r/DPyaLKwDwPwAAAAAAoPY/AEGJ/wILF8i58oIs1r+AVjcoJLT6PAAAAAAAgPY/AEGp/wILFwhYv73R1b8g9+DYCKUcvQAAAAAAYPY/AEHJ/wILF1hFF3d21b9tULbVpGIjvQAAAAAAQPY/AEHp/wILF/gth60a1b/VZ7Ce5ITmvAAAAAAAIPY/AEGJgAMLF3h3lV++1L/gPimTaRsEvQAAAAAAAPY/AEGpgAMLF2Acwoth1L/MhExIL9gTPQAAAAAA4PU/AEHJgAMLF6iGhjAE1L86C4Lt80LcPAAAAAAAwPU/AEHpgAMLF0hpVUym079glFGGxrEgPQAAAAAAoPU/AEGJgQMLF4CYmt1H07+SgMXUTVklPQAAAAAAgPU/AEGpgQMLFyDhuuLo0r/YK7eZHnsmPQAAAAAAYPU/AEHJgQMLF4jeE1qJ0r8/sM+2FMoVPQAAAAAAYPU/AEHpgQMLF4jeE1qJ0r8/sM+2FMoVPQAAAAAAQPU/AEGJggMLF3jP+0Ep0r922lMoJFoWvQAAAAAAIPU/AEGpggMLF5hpwZjI0b8EVOdovK8fvQAAAAAAAPU/AEHJggMLF6irq1xn0b/wqIIzxh8fPQAAAAAA4PQ/AEHpggMLF0iu+YsF0b9mWgX9xKgmvQAAAAAAwPQ/AEGJgwMLF5Bz4iSj0L8OA/R+7msMvQAAAAAAoPQ/AEGpgwMLF9C0lCVA0L9/LfSeuDbwvAAAAAAAoPQ/AEHJgwMLF9C0lCVA0L9/LfSeuDbwvAAAAAAAgPQ/AEHpgwMLF0BebRi5z7+HPJmrKlcNPQAAAAAAYPQ/AEGJhAMLF2Dcy63wzr8kr4actyYrPQAAAAAAQPQ/AEGphAMLF/Aqbgcnzr8Q/z9UTy8XvQAAAAAAIPQ/AEHJhAMLF8BPayFczb8baMq7kbohPQAAAAAAAPQ/AEHphAMLF6Cax/ePzL80hJ9oT3knPQAAAAAAAPQ/AEGJhQMLF6Cax/ePzL80hJ9oT3knPQAAAAAA4PM/AEGphQMLF5AtdIbCy7+Pt4sxsE4ZPQAAAAAAwPM/AEHJhQMLF8CATsnzyr9mkM0/Y066PAAAAAAAoPM/AEHphQMLF7DiH7wjyr/qwUbcZIwlvQAAAAAAoPM/AEGJhgMLF7DiH7wjyr/qwUbcZIwlvQAAAAAAgPM/AEGphgMLF1D0nFpSyb/j1MEE2dEqvQAAAAAAYPM/AEHJhgMLF9AgZaB/yL8J+tt/v70rPQAAAAAAQPM/AEHphgMLF+AQAomrx79YSlNykNsrPQAAAAAAQPM/AEGJhwMLF+AQAomrx79YSlNykNsrPQAAAAAAIPM/AEGphwMLF9AZ5w/Wxr9m4rKjauQQvQAAAAAAAPM/AEHJhwMLF5CncDD/xb85UBCfQ54evQAAAAAAAPM/AEHphwMLF5CncDD/xb85UBCfQ54evQAAAAAA4PI/AEGJiAMLF7Ch4+Umxb+PWweQi94gvQAAAAAAwPI/AEGpiAMLF4DLbCtNxL88eDVhwQwXPQAAAAAAwPI/AEHJiAMLF4DLbCtNxL88eDVhwQwXPQAAAAAAoPI/AEHpiAMLF5AeIPxxw786VCdNhnjxPAAAAAAAgPI/AEGJiQMLF/Af+FKVwr8IxHEXMI0kvQAAAAAAYPI/AEGpiQMLF2Av1Sq3wb+WoxEYpIAuvQAAAAAAYPI/AEHJiQMLF2Av1Sq3wb+WoxEYpIAuvQAAAAAAQPI/AEHpiQMLF5DQfH7XwL/0W+iIlmkKPQAAAAAAQPI/AEGJigMLF5DQfH7XwL/0W+iIlmkKPQAAAAAAIPI/AEGpigMLF+DbMZHsv7/yM6NcVHUlvQAAAAAAAPI/AEHKigMLFituBye+vzwA8CosNCo9AAAAAAAA8j8AQeqKAwsWK24HJ76/PADwKiw0Kj0AAAAAAODxPwBBiYsDCxfAW49UXry/Br5fWFcMHb0AAAAAAMDxPwBBqYsDCxfgSjptkrq/yKpb6DU5JT0AAAAAAMDxPwBByYsDCxfgSjptkrq/yKpb6DU5JT0AAAAAAKDxPwBB6YsDCxegMdZFw7i/aFYvTSl8Ez0AAAAAAKDxPwBBiYwDCxegMdZFw7i/aFYvTSl8Ez0AAAAAAIDxPwBBqYwDCxdg5YrS8La/2nMzyTeXJr0AAAAAAGDxPwBByYwDCxcgBj8HG7W/V17GYVsCHz0AAAAAAGDxPwBB6YwDCxcgBj8HG7W/V17GYVsCHz0AAAAAAEDxPwBBiY0DCxfgG5bXQbO/3xP5zNpeLD0AAAAAAEDxPwBBqY0DCxfgG5bXQbO/3xP5zNpeLD0AAAAAACDxPwBByY0DCxeAo+42ZbG/CaOPdl58FD0AAAAAAADxPwBB6Y0DCxeAEcAwCq+/kY42g55ZLT0AAAAAAADxPwBBiY4DCxeAEcAwCq+/kY42g55ZLT0AAAAAAODwPwBBqY4DCxeAGXHdQqu/THDW5XqCHD0AAAAAAODwPwBByY4DCxeAGXHdQqu/THDW5XqCHD0AAAAAAMDwPwBB6Y4DCxfAMvZYdKe/7qHyNEb8LL0AAAAAAMDwPwBBiY8DCxfAMvZYdKe/7qHyNEb8LL0AAAAAAKDwPwBBqY8DCxfA/rmHnqO/qv4m9bcC9TwAAAAAAKDwPwBByY8DCxfA/rmHnqO/qv4m9bcC9TwAAAAAAIDwPwBB6o8DCxZ4DpuCn7/kCX58JoApvQAAAAAAgPA/AEGKkAMLFngOm4Kfv+QJfnwmgCm9AAAAAABg8D8AQamQAwsXgNUHG7mXvzmm+pNUjSi9AAAAAABA8D8AQcqQAwsW/LCowI+/nKbT9nwe37wAAAAAAEDwPwBB6pADCxb8sKjAj7+cptP2fB7fvAAAAAAAIPA/AEGKkQMLFhBrKuB/v+RA2g0/4hm9AAAAAAAg8D8AQaqRAwsWEGsq4H+/5EDaDT/iGb0AAAAAAADwPwBB3pEDCwLwPwBB/ZEDCwPA7z8AQYqSAwsWiXUVEIA/6CudmWvHEL0AAAAAAIDvPwBBqZIDCxeAk1hWIJA/0vfiBlvcI70AAAAAAEDvPwBBypIDCxbJKCVJmD80DFoyuqAqvQAAAAAAAO8/AEHpkgMLF0DniV1BoD9T1/FcwBEBPQAAAAAAwO4/AEGKkwMLFi7UrmakPyj9vXVzFiy9AAAAAACA7j8AQamTAwsXwJ8UqpSoP30mWtCVeRm9AAAAAABA7j8AQcmTAwsXwN3Nc8usPwco2EfyaBq9AAAAAAAg7j8AQemTAwsXwAbAMequP3s7yU8+EQ69AAAAAADg7T8AQYmUAwsXYEbRO5exP5ueDVZdMiW9AAAAAACg7T8AQamUAwsX4NGn9b2zP9dO26VeyCw9AAAAAABg7T8AQcmUAwsXoJdNWum1Px4dXTwGaSy9AAAAAABA7T8AQemUAwsXwOoK0wC3PzLtnamNHuw8AAAAAAAA7T8AQYmVAwsXQFldXjO5P9pHvTpcESM9AAAAAADA7D8AQamVAwsXYK2NyGq7P+Vo9yuAkBO9AAAAAACg7D8AQcmVAwsXQLwBWIi8P9OsWsbRRiY9AAAAAABg7D8AQemVAwsXIAqDOce+P+BF5q9owC29AAAAAABA7D8AQYmWAwsX4Ns5kei/P/0KoU/WNCW9AAAAAAAA7D8AQamWAwsX4CeCjhfBP/IHLc547yE9AAAAAADg6z8AQcmWAwsX8CN+K6rBPzSZOESOpyw9AAAAAACg6z8AQemWAwsXgIYMYdHCP6G0gctsnQM9AAAAAACA6z8AQYmXAwsXkBWw/GXDP4lySyOoL8Y8AAAAAABA6z8AQamXAwsXsDODPZHEP3i2/VR5gyU9AAAAAAAg6z8AQcmXAwsXsKHk5SfFP8d9aeXoMyY9AAAAAADg6j8AQemXAwsXEIy+TlfGP3guPCyLzxk9AAAAAADA6j8AQYmYAwsXcHWLEvDGP+EhnOWNESW9AAAAAACg6j8AQamYAwsXUESFjYnHPwVDkXAQZhy9AAAAAABg6j8AQcqYAwsWOeuvvsg/0SzpqlQ9B70AAAAAAEDqPwBB6pgDCxb33FpayT9v/6BYKPIHPQAAAAAAAOo/AEGJmQMLF+CKPO2Tyj9pIVZQQ3IovQAAAAAA4Ok/AEGpmQMLF9BbV9gxyz+q4axOjTUMvQAAAAAAwOk/AEHJmQMLF+A7OIfQyz+2ElRZxEstvQAAAAAAoOk/AEHpmQMLFxDwxvtvzD/SK5bFcuzxvAAAAAAAYOk/AEGJmgMLF5DUsD2xzT81sBX3Kv8qvQAAAAAAQOk/AEGpmgMLFxDn/w5Tzj8w9EFgJxLCPAAAAAAAIOk/AEHKmgMLFt3krfXOPxGOu2UVIcq8AAAAAAAA6T8AQemaAwsXsLNsHJnPPzDfDMrsyxs9AAAAAADA6D8AQYmbAwsXWE1gOHHQP5FO7RbbnPg8AAAAAACg6D8AQambAwsXYGFnLcTQP+nqPBaLGCc9AAAAAACA6D8AQcmbAwsX6CeCjhfRPxzwpWMOISy9AAAAAABg6D8AQembAwsX+KzLXGvRP4EWpffNmis9AAAAAABA6D8AQYmcAwsXaFpjmb/RP7e9R1Htpiw9AAAAAAAg6D8AQamcAwsXuA5tRRTSP+q6Rrrehwo9AAAAAADg5z8AQcmcAwsXkNx88L7SP/QEUEr6nCo9AAAAAADA5z8AQemcAwsXYNPh8RTTP7g8IdN64ii9AAAAAACg5z8AQYmdAwsXEL52Z2vTP8h38bDNbhE9AAAAAACA5z8AQamdAwsXMDN3UsLTP1y9BrZUOxg9AAAAAABg5z8AQcmdAwsX6NUjtBnUP53gkOw25Ag9AAAAAABA5z8AQemdAwsXyHHCjXHUP3XWZwnOJy+9AAAAAAAg5z8AQYmeAwsXMBee4MnUP6TYChuJIC69AAAAAAAA5z8AQameAwsXoDgHriLVP1nHZIFwvi49AAAAAADg5j8AQcmeAwsX0MhT93vVP+9AXe7trR89AAAAAADA5j8AQemeAwtYYFnfvdXVP9xlpAgqCwq9AAAAAAAAAAAZAAoAGRkZAAAAAAUAAAAAAAAJAAAAAAsAAAAAAAAAABkAEQoZGRkDCgcAAQAJCxgAAAkGCwAACwAGGQAAABkZGQBB0Z8DCyEOAAAAAAAAAAAZAAoNGRkZAA0AAAIACQ4AAAAJAA4AAA4AQYugAwsBDABBl6ADCxUTAAAAABMAAAAACQwAAAAAAAwAAAwAQcWgAwsBEABB0aADCxUPAAAABA8AAAAACRAAAAAAABAAABAAQf+gAwsBEgBBi6EDCx4RAAAAABEAAAAACRIAAAAAABIAABIAABoAAAAaGhoAQcKhAwsOGgAAABoaGgAAAAAAAAkAQfOhAwsBFABB/6EDCxUXAAAAABcAAAAACRQAAAAAABQAABQAQa2iAwsBFgBBuaIDC7kBFQAAAAAVAAAAAAkWAAAAAAAWAAAWAAAwMTIzNDU2Nzg5QUJDREVGAAAAAJDRAABmAAAAsgIAALMCAABOU3QzX18yMTdiYWRfZnVuY3Rpb25fY2FsbEUA8NQAAHTRAAAI1gAATlN0M19fMjE0X19zaGFyZWRfY291bnRFAAAAAMjUAACc0QAATlN0M19fMjE5X19zaGFyZWRfd2Vha19jb3VudEUAAABM1QAAwNEAAAAAAAABAAAAuNEAQfyjAwv8ASTSAABnAAAAtAIAALUCAABOU3QzX18yMTJiYWRfd2Vha19wdHJFAADw1AAADNIAAAjWAAAwMDAxMDIwMzA0MDUwNjA3MDgwOTEwMTExMjEzMTQxNTE2MTcxODE5MjAyMTIyMjMyNDI1MjYyNzI4MjkzMDMxMzIzMzM0MzUzNjM3MzgzOTQwNDE0MjQzNDQ0NTQ2NDc0ODQ5NTA1MTUyNTM1NDU1NTY1NzU4NTk2MDYxNjI2MzY0NjU2NjY3Njg2OTcwNzE3MjczNzQ3NTc2Nzc3ODc5ODA4MTgyODM4NDg1ODY4Nzg4ODk5MDkxOTI5Mzk0OTU5Njk3OTg5OQBBhKYDC54JCgAAAGQAAADoAwAAECcAAKCGAQBAQg8AgJaYAADh9QUAypo7TjEwX19jeHhhYml2MTE2X19zaGltX3R5cGVfaW5mb0UAAAAA8NQAACjTAACc1wAATjEwX19jeHhhYml2MTE3X19jbGFzc190eXBlX2luZm9FAAAA8NQAAFjTAABM0wAATjEwX19jeHhhYml2MTE3X19wYmFzZV90eXBlX2luZm9FAAAA8NQAAIjTAABM0wAATjEwX19jeHhhYml2MTE5X19wb2ludGVyX3R5cGVfaW5mb0UA8NQAALjTAACs0wAATjEwX19jeHhhYml2MTIwX19mdW5jdGlvbl90eXBlX2luZm9FAAAAAPDUAADo0wAATNMAAE4xMF9fY3h4YWJpdjEyOV9fcG9pbnRlcl90b19tZW1iZXJfdHlwZV9pbmZvRQAAAPDUAAAc1AAArNMAAAAAAACc1AAAtgIAALcCAAC4AgAAuQIAALoCAABOMTBfX2N4eGFiaXYxMjNfX2Z1bmRhbWVudGFsX3R5cGVfaW5mb0UA8NQAAHTUAABM0wAAdgAAAGDUAACo1AAARG4AAGDUAAC01AAAAAAAAHzTAAC2AgAAuwIAALgCAAC5AgAAvAIAAL0CAAC+AgAAvwIAAAAAAAA41QAAtgIAAMACAAC4AgAAuQIAALwCAADBAgAAwgIAAMMCAABOMTBfX2N4eGFiaXYxMjBfX3NpX2NsYXNzX3R5cGVfaW5mb0UAAAAA8NQAABDVAAB80wAAAAAAAJTVAAC2AgAAxAIAALgCAAC5AgAAvAIAAMUCAADGAgAAxwIAAE4xMF9fY3h4YWJpdjEyMV9fdm1pX2NsYXNzX3R5cGVfaW5mb0UAAADw1AAAbNUAAHzTAAAAAAAA3NMAALYCAADIAgAAuAIAALkCAADJAgAAAAAAACDWAAABAAAAygIAAMsCAAAAAAAASNYAAAEAAADMAgAAzQIAAAAAAAAI1gAAAQAAAM4CAADPAgAAU3Q5ZXhjZXB0aW9uAAAAAMjUAAD41QAAU3Q5YmFkX2FsbG9jAAAAAPDUAAAQ1gAACNYAAFN0MjBiYWRfYXJyYXlfbmV3X2xlbmd0aAAAAADw1AAALNYAACDWAAAAAAAAjNYAAAIAAADQAgAA0QIAAAAAAABM1wAAAwAAANICAADTAgAAU3QxMWxvZ2ljX2Vycm9yAPDUAAB81gAACNYAAAAAAADE1gAAAgAAANQCAADRAgAAU3QxNmludmFsaWRfYXJndW1lbnQAAAAA8NQAAKzWAACM1gAAAAAAAPjWAAACAAAA1QIAANECAABTdDEybGVuZ3RoX2Vycm9yAAAAAPDUAADk1gAAjNYAAAAAAAAs1wAAAgAAANYCAADRAgAAU3QxMm91dF9vZl9yYW5nZQAAAADw1AAAGNcAAIzWAABTdDEzcnVudGltZV9lcnJvcgAAAPDUAAA41wAACNYAAAAAAACA1wAAAwAAANcCAADTAgAAU3QxNG92ZXJmbG93X2Vycm9yAADw1AAAbNcAAEzXAABTdDl0eXBlX2luZm8AAAAAyNQAAIzXAEGwrwMLCQEAAAAAAAAABQBBxK8DC+4BtCYAAJIYAACJCAAAnRgAAN0sAAC+LAAAqCwAAM8sAAD6LAAABwcAAJoUAAAbCQAAMzQAAKIwAABbFgAACwkAAJkIAABKOAAAexgAAAwQAADSCAAAZTgAAFY4AAAUBAAAuwgAAPcIAADuDwAA2i0AAD4RAACoJgAA6QgAAKk2AAAZNAAAFxcAAIoqAACqCAAAtDYAACQ0AAD8LwAAOy4AAFMEAAD8BgAANRYAAC8jAAAiLgAAUxYAAEQjAAAzLgAArBYAAMojAAAqHgAAyQUAAP0tAAAELgAASREAADERAAChIQAAGyEAAEAGAADNDwBBwLEDC4GAFNQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAAA7BgAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAAOwYAADsGAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAADsGAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAAA7BgAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAAOwYAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAADsGAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAAA7BgAAOwYAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAAA7BgAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAAA7BgAAOwYAADsGAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAAOh8AADsGAAA7BgAAOwYAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAADofAAA6HwAAOwYAADsGAAA7BgAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAAA6HwAAOwYAADsGAAA7BgAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAAOh8AADsGAAA7BgAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAADsGAAA7BgAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAAA7BgAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAAOwYAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAADsGAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAADsGAAA7BgAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAADsGAADUKAAAOwYAANQoAAA7BgAAOwYAANQoAADUKAAA1CgAANQoAADUKAAA1CgAADsGAADUKAAA1CgAANQoAADUKAAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAANQoAADUKAAA1CgAANQoAAA7BgAA1CgAANQoAAA7BgAA1CgAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAADUKAAA1CgAANQoAADUKAAA1CgAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAA1CgAADsGAAA7BgAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAADsGAAA7BgAAOwYAADofAAA7BgAAOwYAADsGAAA7BgAAOwYAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAAA6HwAAOh8AADsGAAA7BgAAOwYAADsGAAA7BgAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAAOh8AADofAAA6HwAAOwYAADsGAAA7BgAAOwYAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAAC0RAAA6HwAAOh8AADofAAA7BgAAOwYAADsGAAA7BgAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAAAtEQAALREAADofAAA6HwAAOh8AADsGAAA7BgAAOwYAANQoAADUKAAA1CgAANQoAADUKAAA1CgAANQoAADUKAAALREAADofAAA6HwAAOh8AADsGAAA7BgAAOwYAADsGAAA7BgAA1CgAANQoAADUKAAA1CgAANQoAADUKAAA1CgAAC0RAAA6HwAAOh8AADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAADUKAAA1CgAANQoAADUKAAA1CgAANQoAAA6HwAAOh8AADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAANQoAADUKAAA1CgAANQoAADUKAAAOh8AADsGAAA7BgAAOwYAANQoAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAA1CgAANQoAAA7BgAAOwYAADofAAA7BgAAOwYAADsGAADUKAAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA6HwAAOwYAADsGAAA7BgAA1CgAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOh8AADsGAAA7BgAAOwYAANQoAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADofAAA7BgAAOwYAADsGAADUKAAA1CgAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA6HwAAOh8AADsGAAA7BgAA1CgAANQoAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA6HwAAOh8AADofAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAADUKAAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOh8AADofAAA6HwAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADofAAAtEQAAOh8AADofAAA6HwAAOh8AADofAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAADUKAAA1CgAANQoAADUKAAALREAAC0RAAA6HwAAOh8AADofAAA6HwAAOh8AADsGAAA7BgAAOwYAADsGAAA7BgAA1CgAANQoAADUKAAA1CgAAC0RAAAtEQAALREAADofAAA6HwAAOh8AADofAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAANQoAAAtEQAALREAAC0RAAAtEQAAOh8AADofAAA6HwAAOh8AADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAALREAAC0RAAAtEQAALREAAC0RAAA6HwAAOh8AADofAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAAC0RAAAtEQAALREAAC0RAAA6HwAAOh8AADofAAA6HwAAOh8AADsGAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAAtEQAALREAAC0RAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAALREAAC0RAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA7BgAAOwYAADsGAAA7BgAAOwYAAC0RAAA6HwAAOh8AADofAAA7BgAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOh8AADsGAAA7BgAAOh8AADofAAAtEQAAOh8AADofAAA6HwAAOwYAADofAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA6HwAALREAADofAAA6HwAAOh8AADsGAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOh8AAC0RAAA6HwAAOh8AADofAAA7BgAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAAtEQAAOh8AADofAAA6HwAAOwYAADsGAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA6HwAALREAAC0RAAA6HwAAOh8AADsGAAA7BgAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA6HwAALREAAC0RAAAtEQAAOh8AADofAAA6HwAAOh8AADsGAAA7BgAAOwYAADsGAAA7BgAAOh8AADofAAA6HwAAOh8AAC0RAAAtEQAALREAADofAAA6HwAAOh8AADofAAA7BgAAOwYAADsGAAA7BgAAOwYAADsGAAA7BgAAOh8AADofAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOwYAADsGAAA7BgAAOwYAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAA6HwAAOh8AADofAAA6HwAAOh8AADsGAAA7BgAAOwYAADsGAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA7BgAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOh8AAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAA6HwAAOh8AADofAAA6HwAAOh8AADofAAA6HwAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAADofAAA6HwAAOh8AADofAAA6HwAAOh8AAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAAOh8AADofAAA6HwAAOh8AADofAAAtEQAALREAAC0RAAAtEQAAOh8AAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAA6HwAAOh8AAC0RAAAtEQAALREAAC0RAAAtEQAALREAADofAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAA6HwAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAAOh8AAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAADofAAA6HwAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAA6HwAAOh8AAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAA6HwAAOh8AADofAAA6HwAAOh8AAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAAOh8AADofAAA6HwAAOh8AADofAAA6HwAAOh8AAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAADofAAA6HwAAOh8AADofAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAA6HwAAOh8AADofAAA6HwAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAAOh8AAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAALREAAC0RAAAtEQAABQBBzLEXCwKvAgBB5LEXCw6wAgAAsQIAABhlZwAABABB/LEXCwEBAEGMshcLBf////8KAEHQshcLA8Brtw==");

let Engine;
async function loadEngine() {
    Engine = await Module({
        wasmBinary: EngineWasm,
        print: console.log.bind(console),
        locateFile: (path) => `build/wasm/${path}`,
        mainScriptUrlOrBlob: "build/wasm/engine.js",
    });
    return;
}

var InputMessageId;
(function (InputMessageId) {
    InputMessageId[InputMessageId["NULL_ID"] = 0] = "NULL_ID";
    // Input
    InputMessageId[InputMessageId["MOUSE_MOVE"] = 1] = "MOUSE_MOVE";
    InputMessageId[InputMessageId["MOUSE_DOWN"] = 2] = "MOUSE_DOWN";
    InputMessageId[InputMessageId["MOUSE_UP"] = 3] = "MOUSE_UP";
    InputMessageId[InputMessageId["KEY_DOWN"] = 4] = "KEY_DOWN";
    InputMessageId[InputMessageId["KEY_UP"] = 5] = "KEY_UP";
})(InputMessageId || (InputMessageId = {}));
var OutputMessageId;
(function (OutputMessageId) {
    OutputMessageId[OutputMessageId["NULL_ID"] = 0] = "NULL_ID";
    // Render
    OutputMessageId[OutputMessageId["SET_CAMERA"] = 1] = "SET_CAMERA";
    OutputMessageId[OutputMessageId["CREATE_RENDERABLE"] = 2] = "CREATE_RENDERABLE";
    OutputMessageId[OutputMessageId["SET_TRANSFORM"] = 3] = "SET_TRANSFORM";
    OutputMessageId[OutputMessageId["ADD_RENDERABLE"] = 4] = "ADD_RENDERABLE";
    OutputMessageId[OutputMessageId["REMOVE_RENDERABLE"] = 5] = "REMOVE_RENDERABLE";
    // Resources
    OutputMessageId[OutputMessageId["REQUEST_TEXTURE"] = 6] = "REQUEST_TEXTURE";
    OutputMessageId[OutputMessageId["REQUEST_MESH"] = 7] = "REQUEST_MESH";
    OutputMessageId[OutputMessageId["REQUEST_ANIMATION"] = 8] = "REQUEST_ANIMATION";
    OutputMessageId[OutputMessageId["CREATE_GENERATED_MESH"] = 9] = "CREATE_GENERATED_MESH";
    // Resource generators
    OutputMessageId[OutputMessageId["GENERATE_ONE_COLOR_TEXTURE"] = 10] = "GENERATE_ONE_COLOR_TEXTURE";
    OutputMessageId[OutputMessageId["GENERATE_LINE_MESH"] = 11] = "GENERATE_LINE_MESH";
    OutputMessageId[OutputMessageId["GENERATE_TEXT_TEXTURE"] = 12] = "GENERATE_TEXT_TEXTURE";
})(OutputMessageId || (OutputMessageId = {}));
const OUTPUT_HANDLERS = {};
function registerOutputHandler(id, handler) {
    if (id === OutputMessageId.NULL_ID) {
        throw new Error("ID for OutputMessage is not set.");
    }
    if (OUTPUT_HANDLERS[id] !== undefined) {
        throw new Error("Output class is already registered.");
    }
    OUTPUT_HANDLERS[id] = handler;
}
function getOutputMessageHandler(id) {
    return OUTPUT_HANDLERS[id];
}

class SeekablePtr {
    value;
    constructor(value) {
        this.value = value;
    }
}
function getAndSeekPtr(ptr, size) {
    if (typeof ptr === "object") {
        const value = ptr.value;
        ptr.value += size;
        return value;
    }
    else {
        return ptr;
    }
}
function writeU32(ptr, value) {
    ptr = getAndSeekPtr(ptr, 4);
    if (ptr % 4 !== 0) {
        throw new Error("TODO implement not aligned writeU32");
    }
    Engine.HEAPU32[ptr / 4] = value;
}
function writeU64(ptr, value) {
    ptr = getAndSeekPtr(ptr, 8);
    if (ptr % 4 !== 0) {
        throw new Error("TODO implement not aligned writeU64");
    }
    const low = value % 4294967296;
    const high = Math.trunc(value / 4294967296);
    Engine.HEAPU32[ptr / 4] = low;
    Engine.HEAPU32[ptr / 4 + 1] = high;
}
function writeFloat(ptr, value) {
    ptr = getAndSeekPtr(ptr, 4);
    if (ptr % 4 !== 0) {
        throw new Error("TODO implement not aligned writeU32");
    }
    Engine.HEAPF32[ptr / 4] = value;
}
function readU32(ptr) {
    ptr = getAndSeekPtr(ptr, 4);
    if (ptr % 4 !== 0) {
        throw new Error("TODO implement not aligned readU32");
    }
    return Engine.HEAPU32[ptr / 4];
}
function readPointer(ptr) {
    return readU32(ptr);
}
function readU64(ptr) {
    ptr = getAndSeekPtr(ptr, 8);
    if (ptr % 4 !== 0) {
        throw new Error("TODO implement not aligned readU64");
    }
    return Engine.HEAPU32[ptr / 4] + Engine.HEAPU32[ptr / 4 + 1] * 4294967296;
}
function readFloat(ptr) {
    ptr = getAndSeekPtr(ptr, 4);
    if (ptr % 4 !== 0) {
        throw new Error("TODO implement not aligned readFloat");
    }
    return Engine.HEAPF32[ptr / 4];
}
function readString(ptr, bufferSize) {
    ptr = getAndSeekPtr(ptr, bufferSize);
    let result = "";
    for (let i = 0; i < bufferSize; i++) {
        const c = Engine.HEAPU8[ptr + i];
        if (c === 0) {
            break;
        }
        result += String.fromCharCode(c);
    }
    return result;
}
function readToFloatArray(ptr, dst) {
    ptr = getAndSeekPtr(ptr, dst.length * 4);
    if (ptr % 4 !== 0) {
        throw new Error("TODO implement not aligned readFloat");
    }
    ptr /= 4;
    for (let i = 0; i < dst.length; i++) {
        dst[i] = Engine.HEAPF32[ptr + i];
    }
}

/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
var RANDOM = Math.random;
/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array
 */

function setMatrixArrayType(type) {
  ARRAY_TYPE = type;
}
var degree = Math.PI / 180;
/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */

function toRadian(a) {
  return a * degree;
}
/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */

function equals$9(a, b) {
  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}
if (!Math.hypot) Math.hypot = function () {
  var y = 0,
      i = arguments.length;

  while (i--) {
    y += arguments[i] * arguments[i];
  }

  return Math.sqrt(y);
};

var common = /*#__PURE__*/Object.freeze({
    __proto__: null,
    EPSILON: EPSILON,
    get ARRAY_TYPE () { return ARRAY_TYPE; },
    RANDOM: RANDOM,
    setMatrixArrayType: setMatrixArrayType,
    toRadian: toRadian,
    equals: equals$9
});

/**
 * 2x2 Matrix
 * @module mat2
 */

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */

function create$8() {
  var out = new ARRAY_TYPE(4);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */

function clone$8(a) {
  var out = new ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function copy$8(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */

function identity$5(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */

function fromValues$8(m00, m01, m10, m11) {
  var out = new ARRAY_TYPE(4);
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */

function set$8(out, m00, m01, m10, m11) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function transpose$2(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache
  // some values
  if (out === a) {
    var a1 = a[1];
    out[1] = a[2];
    out[2] = a1;
  } else {
    out[0] = a[0];
    out[1] = a[2];
    out[2] = a[1];
    out[3] = a[3];
  }

  return out;
}
/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function invert$5(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3]; // Calculate the determinant

  var det = a0 * a3 - a2 * a1;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = a3 * det;
  out[1] = -a1 * det;
  out[2] = -a2 * det;
  out[3] = a0 * det;
  return out;
}
/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function adjoint$2(out, a) {
  // Caching this value is nessecary if out == a
  var a0 = a[0];
  out[0] = a[3];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a0;
  return out;
}
/**
 * Calculates the determinant of a mat2
 *
 * @param {ReadonlyMat2} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant$3(a) {
  return a[0] * a[3] - a[2] * a[1];
}
/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */

function multiply$8(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  return out;
}
/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function rotate$4(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  return out;
}
/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to rotate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/

function scale$8(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function fromRotation$4(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat2} out
 */

function fromScaling$3(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2
 *
 * @param {ReadonlyMat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str$8(a) {
  return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Returns Frobenius norm of a mat2
 *
 * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob$3(a) {
  return Math.hypot(a[0], a[1], a[2], a[3]);
}
/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {ReadonlyMat2} L the lower triangular matrix
 * @param {ReadonlyMat2} D the diagonal matrix
 * @param {ReadonlyMat2} U the upper triangular matrix
 * @param {ReadonlyMat2} a the input matrix to factorize
 */

function LDU(L, D, U, a) {
  L[2] = a[2] / a[0];
  U[0] = a[0];
  U[1] = a[1];
  U[3] = a[3] - L[2] * U[1];
  return [L, D, U];
}
/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */

function add$8(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */

function subtract$6(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat2} a The first matrix.
 * @param {ReadonlyMat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals$8(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat2} a The first matrix.
 * @param {ReadonlyMat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals$8(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */

function multiplyScalar$3(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */

function multiplyScalarAndAdd$3(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Alias for {@link mat2.multiply}
 * @function
 */

var mul$8 = multiply$8;
/**
 * Alias for {@link mat2.subtract}
 * @function
 */

var sub$6 = subtract$6;

var mat2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    create: create$8,
    clone: clone$8,
    copy: copy$8,
    identity: identity$5,
    fromValues: fromValues$8,
    set: set$8,
    transpose: transpose$2,
    invert: invert$5,
    adjoint: adjoint$2,
    determinant: determinant$3,
    multiply: multiply$8,
    rotate: rotate$4,
    scale: scale$8,
    fromRotation: fromRotation$4,
    fromScaling: fromScaling$3,
    str: str$8,
    frob: frob$3,
    LDU: LDU,
    add: add$8,
    subtract: subtract$6,
    exactEquals: exactEquals$8,
    equals: equals$8,
    multiplyScalar: multiplyScalar$3,
    multiplyScalarAndAdd: multiplyScalarAndAdd$3,
    mul: mul$8,
    sub: sub$6
});

/**
 * 2x3 Matrix
 * @module mat2d
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, b,
 *  c, d,
 *  tx, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, b, 0,
 *  c, d, 0,
 *  tx, ty, 1]
 * </pre>
 * The last column is ignored so the array is shorter and operations are faster.
 */

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */

function create$7() {
  var out = new ARRAY_TYPE(6);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[4] = 0;
    out[5] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {ReadonlyMat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */

function clone$7(a) {
  var out = new ARRAY_TYPE(6);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {mat2d} out
 */

function copy$7(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */

function identity$4(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */

function fromValues$7(a, b, c, d, tx, ty) {
  var out = new ARRAY_TYPE(6);
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */

function set$7(out, a, b, c, d, tx, ty) {
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {mat2d} out
 */

function invert$4(out, a) {
  var aa = a[0],
      ab = a[1],
      ac = a[2],
      ad = a[3];
  var atx = a[4],
      aty = a[5];
  var det = aa * ad - ab * ac;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = ad * det;
  out[1] = -ab * det;
  out[2] = -ac * det;
  out[3] = aa * det;
  out[4] = (ac * aty - ad * atx) * det;
  out[5] = (ab * atx - aa * aty) * det;
  return out;
}
/**
 * Calculates the determinant of a mat2d
 *
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant$2(a) {
  return a[0] * a[3] - a[1] * a[2];
}
/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */

function multiply$7(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  out[4] = a0 * b4 + a2 * b5 + a4;
  out[5] = a1 * b4 + a3 * b5 + a5;
  return out;
}
/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function rotate$3(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to translate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/

function scale$7(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to translate
 * @param {ReadonlyVec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/

function translate$3(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0;
  out[1] = a1;
  out[2] = a2;
  out[3] = a3;
  out[4] = a0 * v0 + a2 * v1 + a4;
  out[5] = a1 * v0 + a3 * v1 + a5;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function fromRotation$3(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat2d} out
 */

function fromScaling$2(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat2d} out
 */

function fromTranslation$3(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = v[0];
  out[5] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2d
 *
 * @param {ReadonlyMat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str$7(a) {
  return "mat2d(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")";
}
/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob$2(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);
}
/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */

function add$7(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */

function subtract$5(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */

function multiplyScalar$2(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  return out;
}
/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */

function multiplyScalarAndAdd$2(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat2d} a The first matrix.
 * @param {ReadonlyMat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals$7(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat2d} a The first matrix.
 * @param {ReadonlyMat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals$7(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));
}
/**
 * Alias for {@link mat2d.multiply}
 * @function
 */

var mul$7 = multiply$7;
/**
 * Alias for {@link mat2d.subtract}
 * @function
 */

var sub$5 = subtract$5;

var mat2d = /*#__PURE__*/Object.freeze({
    __proto__: null,
    create: create$7,
    clone: clone$7,
    copy: copy$7,
    identity: identity$4,
    fromValues: fromValues$7,
    set: set$7,
    invert: invert$4,
    determinant: determinant$2,
    multiply: multiply$7,
    rotate: rotate$3,
    scale: scale$7,
    translate: translate$3,
    fromRotation: fromRotation$3,
    fromScaling: fromScaling$2,
    fromTranslation: fromTranslation$3,
    str: str$7,
    frob: frob$2,
    add: add$7,
    subtract: subtract$5,
    multiplyScalar: multiplyScalar$2,
    multiplyScalarAndAdd: multiplyScalarAndAdd$2,
    exactEquals: exactEquals$7,
    equals: equals$7,
    mul: mul$7,
    sub: sub$5
});

/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */

function create$6() {
  var out = new ARRAY_TYPE(9);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }

  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {ReadonlyMat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */

function fromMat4$1(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}
/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */

function clone$6(a) {
  var out = new ARRAY_TYPE(9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function copy$6(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */

function fromValues$6(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  var out = new ARRAY_TYPE(9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */

function set$6(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */

function identity$3(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function transpose$1(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }

  return out;
}
/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function invert$3(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b01 = a22 * a11 - a12 * a21;
  var b11 = -a22 * a10 + a12 * a20;
  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

  var det = a00 * b01 + a01 * b11 + a02 * b21;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function adjoint$1(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  out[0] = a11 * a22 - a12 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a12 - a02 * a11;
  out[3] = a12 * a20 - a10 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a10 - a00 * a12;
  out[6] = a10 * a21 - a11 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a11 - a01 * a10;
  return out;
}
/**
 * Calculates the determinant of a mat3
 *
 * @param {ReadonlyMat3} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant$1(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}
/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function multiply$6(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b00 = b[0],
      b01 = b[1],
      b02 = b[2];
  var b10 = b[3],
      b11 = b[4],
      b12 = b[5];
  var b20 = b[6],
      b21 = b[7],
      b22 = b[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to translate
 * @param {ReadonlyVec2} v vector to translate by
 * @returns {mat3} out
 */

function translate$2(out, a, v) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      x = v[0],
      y = v[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a10;
  out[4] = a11;
  out[5] = a12;
  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}
/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function rotate$2(out, a, rad) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;
  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/

function scale$6(out, a, v) {
  var x = v[0],
      y = v[1];
  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];
  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat3} out
 */

function fromTranslation$2(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function fromRotation$2(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = -s;
  out[4] = c;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat3} out
 */

function fromScaling$1(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to copy
 * @returns {mat3} out
 **/

function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;
  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;
  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}
/**
 * Calculates a 3x3 matrix from the given quaternion
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat3} out
 */

function fromQuat$1(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;
  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;
  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;
  return out;
}
/**
 * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from
 *
 * @returns {mat3} out
 */

function normalFromMat4(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  return out;
}
/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */

function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
/**
 * Returns a string representation of a mat3
 *
 * @param {ReadonlyMat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str$6(a) {
  return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
}
/**
 * Returns Frobenius norm of a mat3
 *
 * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob$1(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
}
/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function add$6(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function subtract$4(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */

function multiplyScalar$1(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}
/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */

function multiplyScalarAndAdd$1(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals$6(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals$6(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7],
      a8 = a[8];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7],
      b8 = b[8];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
}
/**
 * Alias for {@link mat3.multiply}
 * @function
 */

var mul$6 = multiply$6;
/**
 * Alias for {@link mat3.subtract}
 * @function
 */

var sub$4 = subtract$4;

var mat3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    create: create$6,
    fromMat4: fromMat4$1,
    clone: clone$6,
    copy: copy$6,
    fromValues: fromValues$6,
    set: set$6,
    identity: identity$3,
    transpose: transpose$1,
    invert: invert$3,
    adjoint: adjoint$1,
    determinant: determinant$1,
    multiply: multiply$6,
    translate: translate$2,
    rotate: rotate$2,
    scale: scale$6,
    fromTranslation: fromTranslation$2,
    fromRotation: fromRotation$2,
    fromScaling: fromScaling$1,
    fromMat2d: fromMat2d,
    fromQuat: fromQuat$1,
    normalFromMat4: normalFromMat4,
    projection: projection,
    str: str$6,
    frob: frob$1,
    add: add$6,
    subtract: subtract$4,
    multiplyScalar: multiplyScalar$1,
    multiplyScalarAndAdd: multiplyScalarAndAdd$1,
    exactEquals: exactEquals$6,
    equals: equals$6,
    mul: mul$6,
    sub: sub$4
});

/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */

function create$5() {
  var out = new ARRAY_TYPE(16);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }

  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */

function clone$5(a) {
  var out = new ARRAY_TYPE(16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function copy$5(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */

function fromValues$5(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new ARRAY_TYPE(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */

function set$5(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */

function identity$2(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a12 = a[6],
        a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function invert$2(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
/**
 * Calculates the determinant of a mat4
 *
 * @param {ReadonlyMat4} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function multiply$5(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15]; // Cache only the current line of the second matrix

  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {mat4} out
 */

function translate$1(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {ReadonlyVec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/

function scale$5(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function rotate$1(out, a, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;

  if (len < EPSILON) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11]; // Construct the elements of the rotation matrix

  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  return out;
}
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateX$3(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateY$3(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateZ$3(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromTranslation$1(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Scaling vector
 * @returns {mat4} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function fromRotation$1(out, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;

  if (len < EPSILON) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c; // Perform rotation-specific matrix multiplication

  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromRotationTranslation$1(out, q, v) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {ReadonlyQuat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */

function fromQuat2(out, a) {
  var translation = new ARRAY_TYPE(3);
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }

  fromRotationTranslation$1(out, a, translation);
  return out;
}
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getTranslation$1(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.hypot(m11, m12, m13);
  out[1] = Math.hypot(m21, m22, m23);
  out[2] = Math.hypot(m31, m32, m33);
  return out;
}
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */

function getRotation(out, mat) {
  var scaling = new ARRAY_TYPE(3);
  getScaling(scaling, mat);
  var is1 = 1 / scaling[0];
  var is2 = 1 / scaling[1];
  var is3 = 1 / scaling[2];
  var sm11 = mat[0] * is1;
  var sm12 = mat[1] * is2;
  var sm13 = mat[2] * is3;
  var sm21 = mat[4] * is1;
  var sm22 = mat[5] * is2;
  var sm23 = mat[6] * is3;
  var sm31 = mat[8] * is1;
  var sm32 = mat[9] * is2;
  var sm33 = mat[10] * is3;
  var trace = sm11 + sm22 + sm33;
  var S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (sm23 - sm32) / S;
    out[1] = (sm31 - sm13) / S;
    out[2] = (sm12 - sm21) / S;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S;
    out[0] = 0.25 * S;
    out[1] = (sm12 + sm21) / S;
    out[2] = (sm31 + sm13) / S;
  } else if (sm22 > sm33) {
    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S;
    out[0] = (sm12 + sm21) / S;
    out[1] = 0.25 * S;
    out[2] = (sm23 + sm32) / S;
  } else {
    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S;
    out[0] = (sm31 + sm13) / S;
    out[1] = (sm23 + sm32) / S;
    out[2] = 0.25 * S;
  }

  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @returns {mat4} out
 */

function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @param {ReadonlyVec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */

function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */

function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
/**
 * Generates a perspective projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspectiveNO(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }

  return out;
}
/**
 * Alias for {@link mat4.perspectiveNO}
 * @function
 */

var perspective = perspectiveNO;
/**
 * Generates a perspective projection matrix suitable for WebGPU with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspectiveZO(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = far * nf;
    out[14] = far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -near;
  }

  return out;
}
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = far * near / (near - far);
  out[15] = 0.0;
  return out;
}
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
 * which matches WebGL/OpenGL's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function orthoNO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
/**
 * Alias for {@link mat4.orthoNO}
 * @function
 */

var ortho = orthoNO;
/**
 * Generates a orthogonal projection matrix with the given bounds.
 * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],
 * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function orthoZO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = near * nf;
  out[15] = 1;
  return out;
}
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function lookAt$1(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];

  if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
    return identity$2(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.hypot(z0, z1, z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.hypot(x0, x1, x2);

  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.hypot(y0, y1, y2);

  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function targetTo(out, eye, target, up) {
  var eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];
  var z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  var x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
/**
 * Returns a string representation of a mat4
 *
 * @param {ReadonlyMat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str$5(a) {
  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
}
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function add$5(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function subtract$3(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  out[9] = a[9] + b[9] * scale;
  out[10] = a[10] + b[10] * scale;
  out[11] = a[11] + b[11] * scale;
  out[12] = a[12] + b[12] * scale;
  out[13] = a[13] + b[13] * scale;
  out[14] = a[14] + b[14] * scale;
  out[15] = a[15] + b[15] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals$5(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals$5(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var a8 = a[8],
      a9 = a[9],
      a10 = a[10],
      a11 = a[11];
  var a12 = a[12],
      a13 = a[13],
      a14 = a[14],
      a15 = a[15];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  var b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  var b8 = b[8],
      b9 = b[9],
      b10 = b[10],
      b11 = b[11];
  var b12 = b[12],
      b13 = b[13],
      b14 = b[14],
      b15 = b[15];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}
/**
 * Alias for {@link mat4.multiply}
 * @function
 */

var mul$5 = multiply$5;
/**
 * Alias for {@link mat4.subtract}
 * @function
 */

var sub$3 = subtract$3;

var mat4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    create: create$5,
    clone: clone$5,
    copy: copy$5,
    fromValues: fromValues$5,
    set: set$5,
    identity: identity$2,
    transpose: transpose,
    invert: invert$2,
    adjoint: adjoint,
    determinant: determinant,
    multiply: multiply$5,
    translate: translate$1,
    scale: scale$5,
    rotate: rotate$1,
    rotateX: rotateX$3,
    rotateY: rotateY$3,
    rotateZ: rotateZ$3,
    fromTranslation: fromTranslation$1,
    fromScaling: fromScaling,
    fromRotation: fromRotation$1,
    fromXRotation: fromXRotation,
    fromYRotation: fromYRotation,
    fromZRotation: fromZRotation,
    fromRotationTranslation: fromRotationTranslation$1,
    fromQuat2: fromQuat2,
    getTranslation: getTranslation$1,
    getScaling: getScaling,
    getRotation: getRotation,
    fromRotationTranslationScale: fromRotationTranslationScale,
    fromRotationTranslationScaleOrigin: fromRotationTranslationScaleOrigin,
    fromQuat: fromQuat,
    frustum: frustum,
    perspectiveNO: perspectiveNO,
    perspective: perspective,
    perspectiveZO: perspectiveZO,
    perspectiveFromFieldOfView: perspectiveFromFieldOfView,
    orthoNO: orthoNO,
    ortho: ortho,
    orthoZO: orthoZO,
    lookAt: lookAt$1,
    targetTo: targetTo,
    str: str$5,
    frob: frob,
    add: add$5,
    subtract: subtract$3,
    multiplyScalar: multiplyScalar,
    multiplyScalarAndAdd: multiplyScalarAndAdd,
    exactEquals: exactEquals$5,
    equals: equals$5,
    mul: mul$5,
    sub: sub$3
});

/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */

function create$4() {
  var out = new ARRAY_TYPE(3);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  return out;
}
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {ReadonlyVec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */

function clone$4(a) {
  var out = new ARRAY_TYPE(3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Calculates the length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate length of
 * @returns {Number} length of a
 */

function length$4(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */

function fromValues$4(x, y, z) {
  var out = new ARRAY_TYPE(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the source vector
 * @returns {vec3} out
 */

function copy$4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */

function set$4(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function add$4(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function subtract$2(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function multiply$4(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function divide$2(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to ceil
 * @returns {vec3} out
 */

function ceil$2(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to floor
 * @returns {vec3} out
 */

function floor$2(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function min$2(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function max$2(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to round
 * @returns {vec3} out
 */

function round$2(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */

function scale$4(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */

function scaleAndAdd$2(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} distance between a and b
 */

function distance$2(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.hypot(x, y, z);
}
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance$2(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
/**
 * Calculates the squared length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength$4(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to negate
 * @returns {vec3} out
 */

function negate$2(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to invert
 * @returns {vec3} out
 */

function inverse$2(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to normalize
 * @returns {vec3} out
 */

function normalize$4(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
/**
 * Calculates the dot product of two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot$4(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function cross$2(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2];
  var bx = b[0],
      by = b[1],
      bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function lerp$4(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */

function random$3(out, scale) {
  scale = scale || 1.0;
  var r = RANDOM() * 2.0 * Math.PI;
  var z = RANDOM() * 2.0 - 1.0;
  var zScale = Math.sqrt(1.0 - z * z) * scale;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec3} out
 */

function transformMat4$2(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */

function transformMat3$1(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec3} out
 */

function transformQuat$1(out, a, q) {
  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3];
  var x = a[0],
      y = a[1],
      z = a[2]; // var qvec = [qx, qy, qz];
  // var uv = vec3.cross([], qvec, a);

  var uvx = qy * z - qz * y,
      uvy = qz * x - qx * z,
      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);

  var uuvx = qy * uvz - qz * uvy,
      uuvy = qz * uvx - qx * uvz,
      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);

  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2; // vec3.scale(uuv, uuv, 2);

  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));

  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateX$2(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0];
  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateY$2(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateZ$2(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
  r[2] = p[2]; //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Get the angle between two 3D vectors
 * @param {ReadonlyVec3} a The first operand
 * @param {ReadonlyVec3} b The second operand
 * @returns {Number} The angle in radians
 */

function angle$1(a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      bx = b[0],
      by = b[1],
      bz = b[2],
      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),
      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),
      mag = mag1 * mag2,
      cosine = mag && dot$4(a, b) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */

function zero$2(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str$4(a) {
  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals$4(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals$4(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}
/**
 * Alias for {@link vec3.subtract}
 * @function
 */

var sub$2 = subtract$2;
/**
 * Alias for {@link vec3.multiply}
 * @function
 */

var mul$4 = multiply$4;
/**
 * Alias for {@link vec3.divide}
 * @function
 */

var div$2 = divide$2;
/**
 * Alias for {@link vec3.distance}
 * @function
 */

var dist$2 = distance$2;
/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */

var sqrDist$2 = squaredDistance$2;
/**
 * Alias for {@link vec3.length}
 * @function
 */

var len$4 = length$4;
/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */

var sqrLen$4 = squaredLength$4;
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach$2 = function () {
  var vec = create$4();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }

    return a;
  };
}();

var vec3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    create: create$4,
    clone: clone$4,
    length: length$4,
    fromValues: fromValues$4,
    copy: copy$4,
    set: set$4,
    add: add$4,
    subtract: subtract$2,
    multiply: multiply$4,
    divide: divide$2,
    ceil: ceil$2,
    floor: floor$2,
    min: min$2,
    max: max$2,
    round: round$2,
    scale: scale$4,
    scaleAndAdd: scaleAndAdd$2,
    distance: distance$2,
    squaredDistance: squaredDistance$2,
    squaredLength: squaredLength$4,
    negate: negate$2,
    inverse: inverse$2,
    normalize: normalize$4,
    dot: dot$4,
    cross: cross$2,
    lerp: lerp$4,
    hermite: hermite,
    bezier: bezier,
    random: random$3,
    transformMat4: transformMat4$2,
    transformMat3: transformMat3$1,
    transformQuat: transformQuat$1,
    rotateX: rotateX$2,
    rotateY: rotateY$2,
    rotateZ: rotateZ$2,
    angle: angle$1,
    zero: zero$2,
    str: str$4,
    exactEquals: exactEquals$4,
    equals: equals$4,
    sub: sub$2,
    mul: mul$4,
    div: div$2,
    dist: dist$2,
    sqrDist: sqrDist$2,
    len: len$4,
    sqrLen: sqrLen$4,
    forEach: forEach$2
});

/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */

function create$3() {
  var out = new ARRAY_TYPE(4);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }

  return out;
}
/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {ReadonlyVec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */

function clone$3(a) {
  var out = new ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */

function fromValues$3(x, y, z, w) {
  var out = new ARRAY_TYPE(4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the source vector
 * @returns {vec4} out
 */

function copy$3(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */

function set$3(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function add$3(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function subtract$1(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function multiply$3(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}
/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function divide$1(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}
/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to ceil
 * @returns {vec4} out
 */

function ceil$1(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}
/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to floor
 * @returns {vec4} out
 */

function floor$1(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}
/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function min$1(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}
/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function max$1(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}
/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to round
 * @returns {vec4} out
 */

function round$1(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */

function scale$3(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */

function scaleAndAdd$1(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} distance between a and b
 */

function distance$1(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance$1(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Calculates the length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate length of
 * @returns {Number} length of a
 */

function length$3(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength$3(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to negate
 * @returns {vec4} out
 */

function negate$1(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}
/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to invert
 * @returns {vec4} out
 */

function inverse$1(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
}
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to normalize
 * @returns {vec4} out
 */

function normalize$3(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }

  out[0] = x * len;
  out[1] = y * len;
  out[2] = z * len;
  out[3] = w * len;
  return out;
}
/**
 * Calculates the dot product of two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot$3(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
/**
 * Returns the cross-product of three vectors in a 4-dimensional space
 *
 * @param {ReadonlyVec4} result the receiving vector
 * @param {ReadonlyVec4} U the first vector
 * @param {ReadonlyVec4} V the second vector
 * @param {ReadonlyVec4} W the third vector
 * @returns {vec4} result
 */

function cross$1(out, u, v, w) {
  var A = v[0] * w[1] - v[1] * w[0],
      B = v[0] * w[2] - v[2] * w[0],
      C = v[0] * w[3] - v[3] * w[0],
      D = v[1] * w[2] - v[2] * w[1],
      E = v[1] * w[3] - v[3] * w[1],
      F = v[2] * w[3] - v[3] * w[2];
  var G = u[0];
  var H = u[1];
  var I = u[2];
  var J = u[3];
  out[0] = H * F - I * E + J * D;
  out[1] = -(G * F) + I * C - J * B;
  out[2] = G * E - H * C + J * A;
  out[3] = -(G * D) + H * B - I * A;
  return out;
}
/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec4} out
 */

function lerp$3(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */

function random$2(out, scale) {
  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
  // http://projecteuclid.org/euclid.aoms/1177692644;

  var v1, v2, v3, v4;
  var s1, s2;

  do {
    v1 = RANDOM() * 2 - 1;
    v2 = RANDOM() * 2 - 1;
    s1 = v1 * v1 + v2 * v2;
  } while (s1 >= 1);

  do {
    v3 = RANDOM() * 2 - 1;
    v4 = RANDOM() * 2 - 1;
    s2 = v3 * v3 + v4 * v4;
  } while (s2 >= 1);

  var d = Math.sqrt((1 - s1) / s2);
  out[0] = scale * v1;
  out[1] = scale * v2;
  out[2] = scale * v3 * d;
  out[3] = scale * v4 * d;
  return out;
}
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec4} out
 */

function transformMat4$1(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}
/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec4} out
 */

function transformQuat(out, a, q) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3]; // calculate quat * vec

  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to zero
 *
 * @param {vec4} out the receiving vector
 * @returns {vec4} out
 */

function zero$1(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str$3(a) {
  return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals$3(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals$3(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Alias for {@link vec4.subtract}
 * @function
 */

var sub$1 = subtract$1;
/**
 * Alias for {@link vec4.multiply}
 * @function
 */

var mul$3 = multiply$3;
/**
 * Alias for {@link vec4.divide}
 * @function
 */

var div$1 = divide$1;
/**
 * Alias for {@link vec4.distance}
 * @function
 */

var dist$1 = distance$1;
/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */

var sqrDist$1 = squaredDistance$1;
/**
 * Alias for {@link vec4.length}
 * @function
 */

var len$3 = length$3;
/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */

var sqrLen$3 = squaredLength$3;
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach$1 = function () {
  var vec = create$3();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 4;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }

    return a;
  };
}();

var vec4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    create: create$3,
    clone: clone$3,
    fromValues: fromValues$3,
    copy: copy$3,
    set: set$3,
    add: add$3,
    subtract: subtract$1,
    multiply: multiply$3,
    divide: divide$1,
    ceil: ceil$1,
    floor: floor$1,
    min: min$1,
    max: max$1,
    round: round$1,
    scale: scale$3,
    scaleAndAdd: scaleAndAdd$1,
    distance: distance$1,
    squaredDistance: squaredDistance$1,
    length: length$3,
    squaredLength: squaredLength$3,
    negate: negate$1,
    inverse: inverse$1,
    normalize: normalize$3,
    dot: dot$3,
    cross: cross$1,
    lerp: lerp$3,
    random: random$2,
    transformMat4: transformMat4$1,
    transformQuat: transformQuat,
    zero: zero$1,
    str: str$3,
    exactEquals: exactEquals$3,
    equals: equals$3,
    sub: sub$1,
    mul: mul$3,
    div: div$1,
    dist: dist$1,
    sqrDist: sqrDist$1,
    len: len$3,
    sqrLen: sqrLen$3,
    forEach: forEach$1
});

/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */

function create$2() {
  var out = new ARRAY_TYPE(4);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  out[3] = 1;
  return out;
}
/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function identity$1(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyVec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/

function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {ReadonlyQuat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */

function getAxisAngle(out_axis, q) {
  var rad = Math.acos(q[3]) * 2.0;
  var s = Math.sin(rad / 2.0);

  if (s > EPSILON) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }

  return rad;
}
/**
 * Gets the angular distance between two unit quaternions
 *
 * @param  {ReadonlyQuat} a     Origin unit quaternion
 * @param  {ReadonlyQuat} b     Destination unit quaternion
 * @return {Number}     Angle, in radians, between the two quaternions
 */

function getAngle(a, b) {
  var dotproduct = dot$2(a, b);
  return Math.acos(2 * dotproduct * dotproduct - 1);
}
/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 */

function multiply$2(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateX$1(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateY$1(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var by = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateZ$1(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bz = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}
/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate W component of
 * @returns {quat} out
 */

function calculateW(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
  return out;
}
/**
 * Calculate the exponential of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function exp(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var et = Math.exp(w);
  var s = r > 0 ? et * Math.sin(r) / r : 0;
  out[0] = x * s;
  out[1] = y * s;
  out[2] = z * s;
  out[3] = et * Math.cos(r);
  return out;
}
/**
 * Calculate the natural logarithm of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function ln(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var t = r > 0 ? Math.atan2(r, w) / r : 0;
  out[0] = x * t;
  out[1] = y * t;
  out[2] = z * t;
  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
  return out;
}
/**
 * Calculate the scalar power of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @param {Number} b amount to scale the quaternion by
 * @returns {quat} out
 */

function pow(out, a, b) {
  ln(out, a);
  scale$2(out, out, b);
  exp(out, out);
  return out;
}
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  var omega, cosom, sinom, scale0, scale1; // calc cosine

  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  } // calculate coefficients


  if (1.0 - cosom > EPSILON) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  } // calculate final values


  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
/**
 * Generates a random unit quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function random$1(out) {
  // Implementation of http://planning.cs.uiuc.edu/node198.html
  // TODO: Calling random 3 times is probably not the fastest solution
  var u1 = RANDOM();
  var u2 = RANDOM();
  var u3 = RANDOM();
  var sqrt1MinusU1 = Math.sqrt(1 - u1);
  var sqrtU1 = Math.sqrt(u1);
  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
  return out;
}
/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate inverse of
 * @returns {quat} out
 */

function invert$1(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0 * invDot;
  out[1] = -a1 * invDot;
  out[2] = -a2 * invDot;
  out[3] = a3 * invDot;
  return out;
}
/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate conjugate of
 * @returns {quat} out
 */

function conjugate$1(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyMat3} m rotation matrix
 * @returns {quat} out
 * @function
 */

function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w

    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)

    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }

  return out;
}
/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */

function fromEuler(out, x, y, z) {
  var halfToRad = 0.5 * Math.PI / 180.0;
  x *= halfToRad;
  y *= halfToRad;
  z *= halfToRad;
  var sx = Math.sin(x);
  var cx = Math.cos(x);
  var sy = Math.sin(y);
  var cy = Math.cos(y);
  var sz = Math.sin(z);
  var cz = Math.cos(z);
  out[0] = sx * cy * cz - cx * sy * sz;
  out[1] = cx * sy * cz + sx * cy * sz;
  out[2] = cx * cy * sz - sx * sy * cz;
  out[3] = cx * cy * cz + sx * sy * sz;
  return out;
}
/**
 * Returns a string representation of a quatenion
 *
 * @param {ReadonlyQuat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str$2(a) {
  return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {ReadonlyQuat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */

var clone$2 = clone$3;
/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */

var fromValues$2 = fromValues$3;
/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the source quaternion
 * @returns {quat} out
 * @function
 */

var copy$2 = copy$3;
/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */

var set$2 = set$3;
/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 * @function
 */

var add$2 = add$3;
/**
 * Alias for {@link quat.multiply}
 * @function
 */

var mul$2 = multiply$2;
/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {ReadonlyQuat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */

var scale$2 = scale$3;
/**
 * Calculates the dot product of two quat's
 *
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var dot$2 = dot$3;
/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 * @function
 */

var lerp$2 = lerp$3;
/**
 * Calculates the length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate length of
 * @returns {Number} length of a
 */

var length$2 = length$3;
/**
 * Alias for {@link quat.length}
 * @function
 */

var len$2 = length$2;
/**
 * Calculates the squared length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var squaredLength$2 = squaredLength$3;
/**
 * Alias for {@link quat.squaredLength}
 * @function
 */

var sqrLen$2 = squaredLength$2;
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */

var normalize$2 = normalize$3;
/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyQuat} a The first quaternion.
 * @param {ReadonlyQuat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var exactEquals$2 = exactEquals$3;
/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {ReadonlyQuat} a The first vector.
 * @param {ReadonlyQuat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var equals$2 = equals$3;
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {ReadonlyVec3} a the initial vector
 * @param {ReadonlyVec3} b the destination vector
 * @returns {quat} out
 */

var rotationTo = function () {
  var tmpvec3 = create$4();
  var xUnitVec3 = fromValues$4(1, 0, 0);
  var yUnitVec3 = fromValues$4(0, 1, 0);
  return function (out, a, b) {
    var dot = dot$4(a, b);

    if (dot < -0.999999) {
      cross$2(tmpvec3, xUnitVec3, a);
      if (len$4(tmpvec3) < 0.000001) cross$2(tmpvec3, yUnitVec3, a);
      normalize$4(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      cross$2(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return normalize$2(out, out);
    }
  };
}();
/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {ReadonlyQuat} c the third operand
 * @param {ReadonlyQuat} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

var sqlerp = function () {
  var temp1 = create$2();
  var temp2 = create$2();
  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
}();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {ReadonlyVec3} view  the vector representing the viewing direction
 * @param {ReadonlyVec3} right the vector representing the local "right" direction
 * @param {ReadonlyVec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */

var setAxes = function () {
  var matr = create$6();
  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize$2(out, fromMat3(out, matr));
  };
}();

var quat = /*#__PURE__*/Object.freeze({
    __proto__: null,
    create: create$2,
    identity: identity$1,
    setAxisAngle: setAxisAngle,
    getAxisAngle: getAxisAngle,
    getAngle: getAngle,
    multiply: multiply$2,
    rotateX: rotateX$1,
    rotateY: rotateY$1,
    rotateZ: rotateZ$1,
    calculateW: calculateW,
    exp: exp,
    ln: ln,
    pow: pow,
    slerp: slerp,
    random: random$1,
    invert: invert$1,
    conjugate: conjugate$1,
    fromMat3: fromMat3,
    fromEuler: fromEuler,
    str: str$2,
    clone: clone$2,
    fromValues: fromValues$2,
    copy: copy$2,
    set: set$2,
    add: add$2,
    mul: mul$2,
    scale: scale$2,
    dot: dot$2,
    lerp: lerp$2,
    length: length$2,
    len: len$2,
    squaredLength: squaredLength$2,
    sqrLen: sqrLen$2,
    normalize: normalize$2,
    exactEquals: exactEquals$2,
    equals: equals$2,
    rotationTo: rotationTo,
    sqlerp: sqlerp,
    setAxes: setAxes
});

/**
 * Dual Quaternion<br>
 * Format: [real, dual]<br>
 * Quaternion format: XYZW<br>
 * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>
 * @module quat2
 */

/**
 * Creates a new identity dual quat
 *
 * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]
 */

function create$1() {
  var dq = new ARRAY_TYPE(8);

  if (ARRAY_TYPE != Float32Array) {
    dq[0] = 0;
    dq[1] = 0;
    dq[2] = 0;
    dq[4] = 0;
    dq[5] = 0;
    dq[6] = 0;
    dq[7] = 0;
  }

  dq[3] = 1;
  return dq;
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {ReadonlyQuat2} a dual quaternion to clone
 * @returns {quat2} new dual quaternion
 * @function
 */

function clone$1(a) {
  var dq = new ARRAY_TYPE(8);
  dq[0] = a[0];
  dq[1] = a[1];
  dq[2] = a[2];
  dq[3] = a[3];
  dq[4] = a[4];
  dq[5] = a[5];
  dq[6] = a[6];
  dq[7] = a[7];
  return dq;
}
/**
 * Creates a new dual quat initialized with the given values
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} new dual quaternion
 * @function
 */

function fromValues$1(x1, y1, z1, w1, x2, y2, z2, w2) {
  var dq = new ARRAY_TYPE(8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  dq[4] = x2;
  dq[5] = y2;
  dq[6] = z2;
  dq[7] = w2;
  return dq;
}
/**
 * Creates a new dual quat from the given values (quat and translation)
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component (translation)
 * @param {Number} y2 Y component (translation)
 * @param {Number} z2 Z component (translation)
 * @returns {quat2} new dual quaternion
 * @function
 */

function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
  var dq = new ARRAY_TYPE(8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  var ax = x2 * 0.5,
      ay = y2 * 0.5,
      az = z2 * 0.5;
  dq[4] = ax * w1 + ay * z1 - az * y1;
  dq[5] = ay * w1 + az * x1 - ax * z1;
  dq[6] = az * w1 + ax * y1 - ay * x1;
  dq[7] = -ax * x1 - ay * y1 - az * z1;
  return dq;
}
/**
 * Creates a dual quat from a quaternion and a translation
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyQuat} q a normalized quaternion
 * @param {ReadonlyVec3} t tranlation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromRotationTranslation(out, q, t) {
  var ax = t[0] * 0.5,
      ay = t[1] * 0.5,
      az = t[2] * 0.5,
      bx = q[0],
      by = q[1],
      bz = q[2],
      bw = q[3];
  out[0] = bx;
  out[1] = by;
  out[2] = bz;
  out[3] = bw;
  out[4] = ax * bw + ay * bz - az * by;
  out[5] = ay * bw + az * bx - ax * bz;
  out[6] = az * bw + ax * by - ay * bx;
  out[7] = -ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Creates a dual quat from a translation
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyVec3} t translation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromTranslation(out, t) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = t[0] * 0.5;
  out[5] = t[1] * 0.5;
  out[6] = t[2] * 0.5;
  out[7] = 0;
  return out;
}
/**
 * Creates a dual quat from a quaternion
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyQuat} q the quaternion
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromRotation(out, q) {
  out[0] = q[0];
  out[1] = q[1];
  out[2] = q[2];
  out[3] = q[3];
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Creates a new dual quat from a matrix (4x4)
 *
 * @param {quat2} out the dual quaternion
 * @param {ReadonlyMat4} a the matrix
 * @returns {quat2} dual quat receiving operation result
 * @function
 */

function fromMat4(out, a) {
  //TODO Optimize this
  var outer = create$2();
  getRotation(outer, a);
  var t = new ARRAY_TYPE(3);
  getTranslation$1(t, a);
  fromRotationTranslation(out, outer, t);
  return out;
}
/**
 * Copy the values from one dual quat to another
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the source dual quaternion
 * @returns {quat2} out
 * @function
 */

function copy$1(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  return out;
}
/**
 * Set a dual quat to the identity dual quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @returns {quat2} out
 */

function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Set the components of a dual quat to the given values
 *
 * @param {quat2} out the receiving quaternion
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} out
 * @function
 */

function set$1(out, x1, y1, z1, w1, x2, y2, z2, w2) {
  out[0] = x1;
  out[1] = y1;
  out[2] = z1;
  out[3] = w1;
  out[4] = x2;
  out[5] = y2;
  out[6] = z2;
  out[7] = w2;
  return out;
}
/**
 * Gets the real part of a dual quat
 * @param  {quat} out real part
 * @param  {ReadonlyQuat2} a Dual Quaternion
 * @return {quat} real part
 */

var getReal = copy$2;
/**
 * Gets the dual part of a dual quat
 * @param  {quat} out dual part
 * @param  {ReadonlyQuat2} a Dual Quaternion
 * @return {quat} dual part
 */

function getDual(out, a) {
  out[0] = a[4];
  out[1] = a[5];
  out[2] = a[6];
  out[3] = a[7];
  return out;
}
/**
 * Set the real component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat} q a quaternion representing the real part
 * @returns {quat2} out
 * @function
 */

var setReal = copy$2;
/**
 * Set the dual component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat} q a quaternion representing the dual part
 * @returns {quat2} out
 * @function
 */

function setDual(out, q) {
  out[4] = q[0];
  out[5] = q[1];
  out[6] = q[2];
  out[7] = q[3];
  return out;
}
/**
 * Gets the translation of a normalized dual quat
 * @param  {vec3} out translation
 * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed
 * @return {vec3} translation
 */

function getTranslation(out, a) {
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3];
  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  return out;
}
/**
 * Translates a dual quat by the given vector
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {quat2} out
 */

function translate(out, a, v) {
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3],
      bx1 = v[0] * 0.5,
      by1 = v[1] * 0.5,
      bz1 = v[2] * 0.5,
      ax2 = a[4],
      ay2 = a[5],
      az2 = a[6],
      aw2 = a[7];
  out[0] = ax1;
  out[1] = ay1;
  out[2] = az1;
  out[3] = aw1;
  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
  return out;
}
/**
 * Rotates a dual quat around the X axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateX(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  rotateX$1(out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Y axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateY(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  rotateY$1(out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Z axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateZ(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  rotateZ$1(out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (a * q)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {ReadonlyQuat} q quaternion to rotate by
 * @returns {quat2} out
 */

function rotateByQuatAppend(out, a, q) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  out[0] = ax * qw + aw * qx + ay * qz - az * qy;
  out[1] = ay * qw + aw * qy + az * qx - ax * qz;
  out[2] = az * qw + aw * qz + ax * qy - ay * qx;
  out[3] = aw * qw - ax * qx - ay * qy - az * qz;
  ax = a[4];
  ay = a[5];
  az = a[6];
  aw = a[7];
  out[4] = ax * qw + aw * qx + ay * qz - az * qy;
  out[5] = ay * qw + aw * qy + az * qx - ax * qz;
  out[6] = az * qw + aw * qz + ax * qy - ay * qx;
  out[7] = aw * qw - ax * qx - ay * qy - az * qz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (q * a)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat} q quaternion to rotate by
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @returns {quat2} out
 */

function rotateByQuatPrepend(out, q, a) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      bx = a[0],
      by = a[1],
      bz = a[2],
      bw = a[3];
  out[0] = qx * bw + qw * bx + qy * bz - qz * by;
  out[1] = qy * bw + qw * by + qz * bx - qx * bz;
  out[2] = qz * bw + qw * bz + qx * by - qy * bx;
  out[3] = qw * bw - qx * bx - qy * by - qz * bz;
  bx = a[4];
  by = a[5];
  bz = a[6];
  bw = a[7];
  out[4] = qx * bw + qw * bx + qy * bz - qz * by;
  out[5] = qy * bw + qw * by + qz * bx - qx * bz;
  out[6] = qz * bw + qw * bz + qx * by - qy * bx;
  out[7] = qw * bw - qx * bx - qy * by - qz * bz;
  return out;
}
/**
 * Rotates a dual quat around a given axis. Does the normalisation automatically
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @param {Number} rad how far the rotation should be
 * @returns {quat2} out
 */

function rotateAroundAxis(out, a, axis, rad) {
  //Special case for rad = 0
  if (Math.abs(rad) < EPSILON) {
    return copy$1(out, a);
  }

  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
  rad = rad * 0.5;
  var s = Math.sin(rad);
  var bx = s * axis[0] / axisLength;
  var by = s * axis[1] / axisLength;
  var bz = s * axis[2] / axisLength;
  var bw = Math.cos(rad);
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3];
  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  out[4] = ax * bw + aw * bx + ay * bz - az * by;
  out[5] = ay * bw + aw * by + az * bx - ax * bz;
  out[6] = az * bw + aw * bz + ax * by - ay * bx;
  out[7] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Adds two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {quat2} out
 * @function
 */

function add$1(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  return out;
}
/**
 * Multiplies two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {quat2} out
 */

function multiply$1(out, a, b) {
  var ax0 = a[0],
      ay0 = a[1],
      az0 = a[2],
      aw0 = a[3],
      bx1 = b[4],
      by1 = b[5],
      bz1 = b[6],
      bw1 = b[7],
      ax1 = a[4],
      ay1 = a[5],
      az1 = a[6],
      aw1 = a[7],
      bx0 = b[0],
      by0 = b[1],
      bz0 = b[2],
      bw0 = b[3];
  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
  return out;
}
/**
 * Alias for {@link quat2.multiply}
 * @function
 */

var mul$1 = multiply$1;
/**
 * Scales a dual quat by a scalar number
 *
 * @param {quat2} out the receiving dual quat
 * @param {ReadonlyQuat2} a the dual quat to scale
 * @param {Number} b amount to scale the dual quat by
 * @returns {quat2} out
 * @function
 */

function scale$1(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  return out;
}
/**
 * Calculates the dot product of two dual quat's (The dot product of the real parts)
 *
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var dot$1 = dot$2;
/**
 * Performs a linear interpolation between two dual quats's
 * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)
 *
 * @param {quat2} out the receiving dual quat
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat2} out
 */

function lerp$1(out, a, b, t) {
  var mt = 1 - t;
  if (dot$1(a, b) < 0) t = -t;
  out[0] = a[0] * mt + b[0] * t;
  out[1] = a[1] * mt + b[1] * t;
  out[2] = a[2] * mt + b[2] * t;
  out[3] = a[3] * mt + b[3] * t;
  out[4] = a[4] * mt + b[4] * t;
  out[5] = a[5] * mt + b[5] * t;
  out[6] = a[6] * mt + b[6] * t;
  out[7] = a[7] * mt + b[7] * t;
  return out;
}
/**
 * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a dual quat to calculate inverse of
 * @returns {quat2} out
 */

function invert(out, a) {
  var sqlen = squaredLength$1(a);
  out[0] = -a[0] / sqlen;
  out[1] = -a[1] / sqlen;
  out[2] = -a[2] / sqlen;
  out[3] = a[3] / sqlen;
  out[4] = -a[4] / sqlen;
  out[5] = -a[5] / sqlen;
  out[6] = -a[6] / sqlen;
  out[7] = a[7] / sqlen;
  return out;
}
/**
 * Calculates the conjugate of a dual quat
 * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat2} a quat to calculate conjugate of
 * @returns {quat2} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  out[4] = -a[4];
  out[5] = -a[5];
  out[6] = -a[6];
  out[7] = a[7];
  return out;
}
/**
 * Calculates the length of a dual quat
 *
 * @param {ReadonlyQuat2} a dual quat to calculate length of
 * @returns {Number} length of a
 * @function
 */

var length$1 = length$2;
/**
 * Alias for {@link quat2.length}
 * @function
 */

var len$1 = length$1;
/**
 * Calculates the squared length of a dual quat
 *
 * @param {ReadonlyQuat2} a dual quat to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var squaredLength$1 = squaredLength$2;
/**
 * Alias for {@link quat2.squaredLength}
 * @function
 */

var sqrLen$1 = squaredLength$1;
/**
 * Normalize a dual quat
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a dual quaternion to normalize
 * @returns {quat2} out
 * @function
 */

function normalize$1(out, a) {
  var magnitude = squaredLength$1(a);

  if (magnitude > 0) {
    magnitude = Math.sqrt(magnitude);
    var a0 = a[0] / magnitude;
    var a1 = a[1] / magnitude;
    var a2 = a[2] / magnitude;
    var a3 = a[3] / magnitude;
    var b0 = a[4];
    var b1 = a[5];
    var b2 = a[6];
    var b3 = a[7];
    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = (b0 - a0 * a_dot_b) / magnitude;
    out[5] = (b1 - a1 * a_dot_b) / magnitude;
    out[6] = (b2 - a2 * a_dot_b) / magnitude;
    out[7] = (b3 - a3 * a_dot_b) / magnitude;
  }

  return out;
}
/**
 * Returns a string representation of a dual quatenion
 *
 * @param {ReadonlyQuat2} a dual quaternion to represent as a string
 * @returns {String} string representation of the dual quat
 */

function str$1(a) {
  return "quat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ")";
}
/**
 * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyQuat2} a the first dual quaternion.
 * @param {ReadonlyQuat2} b the second dual quaternion.
 * @returns {Boolean} true if the dual quaternions are equal, false otherwise.
 */

function exactEquals$1(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
}
/**
 * Returns whether or not the dual quaternions have approximately the same elements in the same position.
 *
 * @param {ReadonlyQuat2} a the first dual quat.
 * @param {ReadonlyQuat2} b the second dual quat.
 * @returns {Boolean} true if the dual quats are equal, false otherwise.
 */

function equals$1(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));
}

var quat2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    create: create$1,
    clone: clone$1,
    fromValues: fromValues$1,
    fromRotationTranslationValues: fromRotationTranslationValues,
    fromRotationTranslation: fromRotationTranslation,
    fromTranslation: fromTranslation,
    fromRotation: fromRotation,
    fromMat4: fromMat4,
    copy: copy$1,
    identity: identity,
    set: set$1,
    getReal: getReal,
    getDual: getDual,
    setReal: setReal,
    setDual: setDual,
    getTranslation: getTranslation,
    translate: translate,
    rotateX: rotateX,
    rotateY: rotateY,
    rotateZ: rotateZ,
    rotateByQuatAppend: rotateByQuatAppend,
    rotateByQuatPrepend: rotateByQuatPrepend,
    rotateAroundAxis: rotateAroundAxis,
    add: add$1,
    multiply: multiply$1,
    mul: mul$1,
    scale: scale$1,
    dot: dot$1,
    lerp: lerp$1,
    invert: invert,
    conjugate: conjugate,
    length: length$1,
    len: len$1,
    squaredLength: squaredLength$1,
    sqrLen: sqrLen$1,
    normalize: normalize$1,
    str: str$1,
    exactEquals: exactEquals$1,
    equals: equals$1
});

/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */

function create() {
  var out = new ARRAY_TYPE(2);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }

  return out;
}
/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {ReadonlyVec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */

function clone(a) {
  var out = new ARRAY_TYPE(2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */

function fromValues(x, y) {
  var out = new ARRAY_TYPE(2);
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the source vector
 * @returns {vec2} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */

function set(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}
/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
}
/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
}
/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to ceil
 * @returns {vec2} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
}
/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to floor
 * @returns {vec2} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
}
/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
}
/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
}
/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to round
 * @returns {vec2} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
}
/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
}
/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return x * x + y * y;
}
/**
 * Calculates the length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0],
      y = a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0],
      y = a[1];
  return x * x + y * y;
}
/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to negate
 * @returns {vec2} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
}
/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to invert
 * @returns {vec2} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
}
/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to normalize
 * @returns {vec2} out
 */

function normalize(out, a) {
  var x = a[0],
      y = a[1];
  var len = x * x + y * y;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  return out;
}
/**
 * Calculates the dot product of two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
}
/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
}
/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec2} out
 */

function lerp(out, a, b, t) {
  var ax = a[0],
      ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */

function random(out, scale) {
  scale = scale || 1.0;
  var r = RANDOM() * 2.0 * Math.PI;
  out[0] = Math.cos(r) * scale;
  out[1] = Math.sin(r) * scale;
  return out;
}
/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
}
/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2d} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2d(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
}
/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat3} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
}
/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat4(out, a, m) {
  var x = a[0];
  var y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}
/**
 * Rotate a 2D vector
 * @param {vec2} out The receiving vec2
 * @param {ReadonlyVec2} a The vec2 point to rotate
 * @param {ReadonlyVec2} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec2} out
 */

function rotate(out, a, b, rad) {
  //Translate point to the origin
  var p0 = a[0] - b[0],
      p1 = a[1] - b[1],
      sinC = Math.sin(rad),
      cosC = Math.cos(rad); //perform rotation and translate to correct position

  out[0] = p0 * cosC - p1 * sinC + b[0];
  out[1] = p0 * sinC + p1 * cosC + b[1];
  return out;
}
/**
 * Get the angle between two 2D vectors
 * @param {ReadonlyVec2} a The first operand
 * @param {ReadonlyVec2} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var x1 = a[0],
      y1 = a[1],
      x2 = b[0],
      y2 = b[1],
      // mag is the product of the magnitudes of a and b
  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),
      // mag &&.. short circuits if mag == 0
  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1

  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec2 to zero
 *
 * @param {vec2} out the receiving vector
 * @returns {vec2} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "vec2(" + a[0] + ", " + a[1] + ")";
}
/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1];
  var b0 = b[0],
      b1 = b[1];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));
}
/**
 * Alias for {@link vec2.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec2.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec2.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec2.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 2;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }

    return a;
  };
}();

var vec2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    create: create,
    clone: clone,
    fromValues: fromValues,
    copy: copy,
    set: set,
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide,
    ceil: ceil,
    floor: floor,
    min: min,
    max: max,
    round: round,
    scale: scale,
    scaleAndAdd: scaleAndAdd,
    distance: distance,
    squaredDistance: squaredDistance,
    length: length,
    squaredLength: squaredLength,
    negate: negate,
    inverse: inverse,
    normalize: normalize,
    dot: dot,
    cross: cross,
    lerp: lerp,
    random: random,
    transformMat2: transformMat2,
    transformMat2d: transformMat2d,
    transformMat3: transformMat3,
    transformMat4: transformMat4,
    rotate: rotate,
    angle: angle,
    zero: zero,
    str: str,
    exactEquals: exactEquals,
    equals: equals,
    len: len,
    sub: sub,
    mul: mul,
    div: div,
    dist: dist,
    sqrDist: sqrDist,
    sqrLen: sqrLen,
    forEach: forEach
});

var objectsDepthBufferVert = "struct Settings {\r\n    viewProjection: mat4x4<f32>,\r\n    viewProjection_inplace: mat4x4<f32>,\r\n    viewProjection_sun: mat4x4<f32>,\r\n    viewProjection_glare: mat4x4<f32>,\r\n    viewProjection_shadow_near: mat4x4<f32>,\r\n    viewProjection_shadow_far: mat4x4<f32>,\r\n    viewProjection_shadow_near_uv: mat4x4<f32>,\r\n    viewProjection_shadow_far_uv: mat4x4<f32>,\r\n    invScreenResolution: vec2<f32>,\r\n}\r\n\r\nstruct PerObjectDataEntry {\r\n    quat_scale: vec4<f32>,\r\n    translation_atlasNum: vec4<f32>,\r\n}\r\n\r\nstruct PerObjectData {\r\n    entries: array<PerObjectDataEntry>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n@group(0) @binding(1) var<storage, read> perObjectData : PerObjectData;\r\n\r\nfn quat_transform(q: vec4<f32>, v: vec3<f32>) -> vec3<f32> {\r\n    return v + 2 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\r\n}\r\n\r\n@vertex\r\nfn main(@location(0) inputPosition: vec3<f32>, @location(3) paramsIndex: f32) -> @builtin(position) vec4<f32> {\r\n    var index = u32(paramsIndex);\r\n\r\n    var quat_scale = perObjectData.entries[index].quat_scale;\r\n    var translation_atlasNum = perObjectData.entries[index].translation_atlasNum;\r\n\r\n    var scale = quat_scale.w;\r\n\r\n    var translation = translation_atlasNum.xyz;\r\n    var atlasNum = translation_atlasNum.w;\r\n\r\n    var quat_xyz = quat_scale.xyz;\r\n    var s = length(quat_xyz);\r\n    var quat = vec4(quat_xyz, sqrt(1.0 - s * s));\r\n\r\n    var fragPosition = settings.viewProjection * vec4(quat_transform(quat, inputPosition) * scale + translation, 1.0);\r\n\r\n    return fragPosition;\r\n}";

var objectsShadowNearVert = "struct Settings {\r\n    viewProjection: mat4x4<f32>,\r\n    viewProjection_inplace: mat4x4<f32>,\r\n    viewProjection_sun: mat4x4<f32>,\r\n    viewProjection_glare: mat4x4<f32>,\r\n    viewProjection_shadow_near: mat4x4<f32>,\r\n    viewProjection_shadow_far: mat4x4<f32>,\r\n    viewProjection_shadow_near_uv: mat4x4<f32>,\r\n    viewProjection_shadow_far_uv: mat4x4<f32>,\r\n    invScreenResolution: vec2<f32>,\r\n}\r\n\r\nstruct PerObjectDataEntry {\r\n    quat_scale: vec4<f32>,\r\n    translation_atlasNum: vec4<f32>,\r\n}\r\n\r\nstruct PerObjectData {\r\n    entries: array<PerObjectDataEntry>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n@group(0) @binding(1) var<storage, read> perObjectData : PerObjectData;\r\n\r\nfn quat_transform(q: vec4<f32>, v: vec3<f32>) -> vec3<f32> {\r\n    return v + 2 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\r\n}\r\n\r\n@vertex\r\nfn main(@location(0) inputPosition: vec3<f32>, @location(3) paramsIndex: f32) -> @builtin(position) vec4<f32> {\r\n    var index = u32(paramsIndex);\r\n\r\n    var quat_scale = perObjectData.entries[index].quat_scale;\r\n    var translation_atlasNum = perObjectData.entries[index].translation_atlasNum;\r\n\r\n    var scale = quat_scale.w;\r\n\r\n    var translation = translation_atlasNum.xyz;\r\n    var atlasNum = translation_atlasNum.w;\r\n\r\n    var quat_xyz = quat_scale.xyz;\r\n    var s = length(quat_xyz);\r\n    var quat = vec4(quat_xyz, sqrt(1.0 - s * s));\r\n\r\n    var fragPosition = settings.viewProjection_shadow_near * vec4(quat_transform(quat, inputPosition) * scale + translation, 1.0);\r\n\r\n    return fragPosition;\r\n}";

var objectsShadowFarVert = "struct Settings {\r\n    viewProjection: mat4x4<f32>,\r\n    viewProjection_inplace: mat4x4<f32>,\r\n    viewProjection_sun: mat4x4<f32>,\r\n    viewProjection_glare: mat4x4<f32>,\r\n    viewProjection_shadow_near: mat4x4<f32>,\r\n    viewProjection_shadow_far: mat4x4<f32>,\r\n    viewProjection_shadow_near_uv: mat4x4<f32>,\r\n    viewProjection_shadow_far_uv: mat4x4<f32>,\r\n    invScreenResolution: vec2<f32>,\r\n}\r\n\r\nstruct PerObjectDataEntry {\r\n    quat_scale: vec4<f32>,\r\n    translation_atlasNum: vec4<f32>,\r\n}\r\n\r\nstruct PerObjectData {\r\n    entries: array<PerObjectDataEntry>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n@group(0) @binding(1) var<storage, read> perObjectData : PerObjectData;\r\n\r\nfn quat_transform(q: vec4<f32>, v: vec3<f32>) -> vec3<f32> {\r\n    return v + 2 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\r\n}\r\n\r\n@vertex\r\nfn main(@location(0) inputPosition: vec3<f32>, @location(3) paramsIndex: f32) -> @builtin(position) vec4<f32> {\r\n    var index = u32(paramsIndex);\r\n\r\n    var quat_scale = perObjectData.entries[index].quat_scale;\r\n    var translation_atlasNum = perObjectData.entries[index].translation_atlasNum;\r\n\r\n    var scale = quat_scale.w;\r\n\r\n    var translation = translation_atlasNum.xyz;\r\n    var atlasNum = translation_atlasNum.w;\r\n\r\n    var quat_xyz = quat_scale.xyz;\r\n    var s = length(quat_xyz);\r\n    var quat = vec4(quat_xyz, sqrt(1.0 - s * s));\r\n\r\n    var fragPosition = settings.viewProjection_shadow_far * vec4(quat_transform(quat, inputPosition) * scale + translation, 1.0);\r\n\r\n    return fragPosition;\r\n}";

var contactShadowsFrag = "struct Settings {\r\n    viewProjection: mat4x4<f32>,\r\n    viewProjection_inplace: mat4x4<f32>,\r\n    viewProjection_sun: mat4x4<f32>,\r\n    viewProjection_glare: mat4x4<f32>,\r\n    viewProjection_shadow_near: mat4x4<f32>,\r\n    viewProjection_shadow_far: mat4x4<f32>,\r\n    viewProjection_shadow_near_uv: mat4x4<f32>,\r\n    viewProjection_shadow_far_uv: mat4x4<f32>,\r\n    viewProjection_inv: mat4x4<f32>,\r\n    invScreenResolution: vec2<f32>,\r\n    cameraPosition: vec3<f32>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n@group(0) @binding(1) var depthBufferScreenSpace: texture_depth_2d;\r\n@group(0) @binding(2) var depthBuffersLightSource: texture_depth_2d_array;\r\n@group(0) @binding(3) var comparisonSampler: sampler_comparison;\r\n\r\n@fragment\r\nfn main(@builtin(position) screenPosInPixels: vec4<f32>,\r\n    @location(0) fragNormal: vec3<f32>) -> @location(0) f32 {\r\n\r\n    const randomVectors = array(\r\n        vec2(0.493393, 0.394269),\r\n        vec2(0.798547, 0.885922),\r\n        vec2(0.247322, 0.926450),\r\n        vec2(0.0514542013, 0.140782),\r\n        vec2(0.831843, 0.00955228973),\r\n        vec2(0.428632, 0.0171514004),\r\n        vec2(0.015656, 0.749779),\r\n        vec2(0.758385, 0.496170),\r\n        vec2(0.223487, 0.562151),\r\n        vec2(0.0116275996, 0.406995),\r\n        vec2(0.241462, 0.304636),\r\n        vec2(0.430311, 0.727226),\r\n        vec2(0.981811, 0.278359),\r\n        vec2(0.407056, 0.500534),\r\n        vec2(0.123478, 0.463546),\r\n        vec2(0.809534, 0.682272),    \r\n    );\r\n\r\n    const NEAR_BIAS = 0.0045;\r\n    const FAR_BIAS = 0.005;\r\n\r\n    const MAX_DEPTH_SQ = 10000.0 * 10000.0;\r\n\r\n    const randomVectorLength = 4.0 / 4096.0;\r\n\r\n    const nearDepthBufferLimitZ = 0.986808896064758;\r\n    const farDepthBufferLimitZ = 0.998557209968567;\r\n    const depthBufferLimitZ = 0.998557209968567;\r\n    const nearFarBorderZ = 0.983973801136017;\r\n\r\n    var screenPosition: vec4<f32>;\r\n    screenPosition.z = textureLoad(depthBufferScreenSpace, vec2<i32>(floor(screenPosInPixels.xy)), 0);\r\n    if (screenPosition.z >= depthBufferLimitZ) {\r\n        discard;\r\n    }\r\n\r\n    var uv = screenPosInPixels.xy * settings.invScreenResolution;\r\n    screenPosition.x = uv.x * 2 - 1;\r\n    screenPosition.y = (1 - uv.y) * 2 - 1;\r\n    screenPosition.w = 1;\r\n\r\n    var worldPosition = settings.viewProjection_inv * screenPosition;\r\n    // do full matrix tranform\r\n    worldPosition.x /= worldPosition.w;\r\n    worldPosition.y /= worldPosition.w;\r\n    worldPosition.z /= worldPosition.w;\r\n    worldPosition.w = 1;\r\n\r\n    var positionFromCamera = worldPosition.xyz - settings.cameraPosition;\r\n\r\n    var distanceFromCameraSq = dot(positionFromCamera, positionFromCamera);\r\n    var normalizedDistanceFromCamera = saturate(distanceFromCameraSq / MAX_DEPTH_SQ);\r\n\r\n    normalizedDistanceFromCamera =\r\n        1 - (normalizedDistanceFromCamera * normalizedDistanceFromCamera * normalizedDistanceFromCamera *\r\n                normalizedDistanceFromCamera * normalizedDistanceFromCamera * normalizedDistanceFromCamera *\r\n                normalizedDistanceFromCamera * normalizedDistanceFromCamera); // ^8\r\n\r\n    var shouldUseFarDepthBuffer = screenPosition.z >= nearDepthBufferLimitZ;\r\n\r\n    var levelToUse: u32; \r\n    var bias: f32;\r\n    var depthBufferVP: mat4x4<f32>;\r\n    if (shouldUseFarDepthBuffer) {\r\n        depthBufferVP = settings.viewProjection_shadow_far;\r\n        bias = FAR_BIAS;\r\n        levelToUse = 1;\r\n    } else {\r\n        depthBufferVP = settings.viewProjection_shadow_near;\r\n        bias = NEAR_BIAS;\r\n        levelToUse = 0;\r\n    }\r\n    \r\n    var depthBufferPos = depthBufferVP * worldPosition;\r\n    var uvForDepthBuffer = depthBufferPos.xy * 0.5 + 0.5;\r\n    uvForDepthBuffer.y = 1 - uvForDepthBuffer.y;\r\n    var transformedDepthValue = depthBufferPos.z - bias;\r\n\r\n    var someAccumulatedValue0 = 0.0;\r\n    // sample 4x4 random places\r\n    for (var counter = 0; counter < 8; counter++) {\r\n        var vec0 = randomVectors[counter * 2] * 2 - 1;\r\n        var vec1 = randomVectors[counter * 2 + 1] * 2 - 1;\r\n\r\n        var uv0 = uvForDepthBuffer + vec0 * randomVectorLength;\r\n        var uv1 = uvForDepthBuffer + vec1 * randomVectorLength;\r\n\r\n        var depthCmpValue0 =\r\n            textureSampleCompare(depthBuffersLightSource, comparisonSampler, uv0, levelToUse, transformedDepthValue);\r\n        var depthCmpValue1 =\r\n            textureSampleCompare(depthBuffersLightSource, comparisonSampler, uv1, levelToUse, transformedDepthValue);\r\n\r\n        someAccumulatedValue0 += depthCmpValue0 + depthCmpValue1;\r\n    }\r\n    someAccumulatedValue0 /= 16.0;\r\n\r\n    var farDepthBufferPos = settings.viewProjection_shadow_far * worldPosition;\r\n\r\n    uvForDepthBuffer = farDepthBufferPos.xy * 0.5 + 0.5;\r\n    uvForDepthBuffer.y = 1 - uvForDepthBuffer.y;\r\n    transformedDepthValue = farDepthBufferPos.z - FAR_BIAS;\r\n\r\n    var someAccumulatedValue1 = 0.0;\r\n    for (var counter = 0; counter < 8; counter++) {\r\n        var vec0 = randomVectors[counter * 2] * 2 - 1;\r\n        var vec1 = randomVectors[counter * 2 + 1] * 2 - 1;\r\n\r\n        var uv0 = uvForDepthBuffer + vec0 * randomVectorLength;\r\n        var uv1 = uvForDepthBuffer + vec1 * randomVectorLength;\r\n\r\n        var depthCmpValue0 =\r\n            textureSampleCompare(depthBuffersLightSource, comparisonSampler, uv0, 1, transformedDepthValue);\r\n        var depthCmpValue1 =\r\n            textureSampleCompare(depthBuffersLightSource, comparisonSampler, uv1, 1, transformedDepthValue);\r\n\r\n        someAccumulatedValue1 += depthCmpValue0 + depthCmpValue1;\r\n    }\r\n    \r\n    if (levelToUse < 1 && screenPosition.z >= nearFarBorderZ) {\r\n        someAccumulatedValue1 /= 16.0;\r\n\r\n        // how much shadow is from border to farDepth limit\r\n        var t: f32 = saturate((screenPosition.z - nearFarBorderZ) / (nearDepthBufferLimitZ - nearFarBorderZ));\r\n        t = 3 * t * t - 2 * t * t * t;\r\n\r\n        someAccumulatedValue0 += (someAccumulatedValue1 - someAccumulatedValue0) * t;\r\n    }\r\n\r\n    var output = 1 + normalizedDistanceFromCamera * (someAccumulatedValue0 - 1);\r\n    if (output < 0) {\r\n        discard;\r\n    }\r\n    \r\n    return output;\r\n}";

var volumetricInitComp = "struct Settings {\r\n    viewProjection: mat4x4<f32>,\r\n    viewProjection_inplace: mat4x4<f32>,\r\n    viewProjection_sun: mat4x4<f32>,\r\n    viewProjection_glare: mat4x4<f32>,\r\n    viewProjection_shadow_near: mat4x4<f32>,\r\n    viewProjection_shadow_far: mat4x4<f32>,\r\n    viewProjection_shadow_near_uv: mat4x4<f32>,\r\n    viewProjection_shadow_far_uv: mat4x4<f32>,\r\n    viewProjection_inv: mat4x4<f32>,\r\n    invScreenResolution: vec2<f32>,\r\n    cameraPosition: vec3<f32>,\r\n    sunDirection: vec3<f32>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n\r\n@group(0) @binding(1) var point_clamp_sampler: sampler;\r\n@group(0) @binding(2) var linear_clamp_sampler: sampler;\r\n@group(0) @binding(3) var linear_mirror_sampler: sampler;\r\n\r\n@group(0) @binding(4) var depthBuffersLightSource: texture_depth_2d_array;\r\n@group(0) @binding(5) var curve: texture_2d<f32>;\r\n@group(0) @binding(6) var randomData: texture_3d<f32>;\r\n\r\n@group(0) @binding(7) var swapChain0: texture_storage_3d<rgba16float, write>;\r\n@group(0) @binding(8) var swapChain1: texture_storage_3d<rgba16float, write>;\r\n\r\nfn unpack(v: vec4<f32>) -> f32 {\r\n    return dot(v, vec4(1.0, 1/255.0, 1/65025.0, 1/160581375.0));\r\n}\r\n\r\n@compute @workgroup_size(32, 32)\r\nfn main(@builtin(global_invocation_id) threadNum : vec3<u32>) {\r\n    const randomVectors: array<vec3<f32>, 8> = array(\r\n        vec3(0, 0, 0),\r\n        vec3(0, 0, 1),\r\n        vec3(0, 1, 0),\r\n        vec3(0, 1, 1),\r\n        vec3(1, 0, 0),\r\n        vec3(1, 0, 1),\r\n        vec3(1, 1, 0),\r\n        vec3(1, 1, 1),\r\n    );\r\n\r\n    const normalizer: vec3<f32> = vec3(320, 192, 90);\r\n\r\n    const randomVectorIndex = 3.0; // TODO randomize, changes each frame 0..7\r\n    const randomMul = 0.1;\r\n\r\n    const unknownMul0 = 0.85;\r\n    const unknownMul1 = 0.85;\r\n    const randomFinalMul = 0.3;\r\n\r\n    const nearDepthBufferLimitZ = 0.986808896064758;\r\n    const farDepthBufferLimitZ = 0.998557209968567;\r\n    const depthBufferLimitZ = 0.998557209968567;\r\n\r\n    var coordIn3DTexture = vec3<f32>(threadNum) / normalizer + randomVectors[u32(randomVectorIndex)] * 0.001;\r\n\r\n    var screenPosition = vec4(\r\n        coordIn3DTexture.x * 2 - 1,\r\n        (1 - coordIn3DTexture.y) * 2 - 1,\r\n        unpack(textureSampleLevel(curve, linear_clamp_sampler, vec2(coordIn3DTexture.z, 0), 0)), \r\n        1\r\n    );\r\n\r\n    var worldPosition = settings.viewProjection_inv * screenPosition;\r\n    worldPosition /= worldPosition.w;\r\n    \r\n    var screenSpaceZ = screenPosition.z;\r\n    if (screenSpaceZ < depthBufferLimitZ) {\r\n        var shouldUseFarDepthBuffer = screenSpaceZ >= nearDepthBufferLimitZ;\r\n\r\n        var levelToUse: u32; \r\n        var bias: f32;\r\n        var depthBufferVP: mat4x4<f32>;\r\n        if (shouldUseFarDepthBuffer) {\r\n            depthBufferVP = settings.viewProjection_shadow_far;\r\n            bias = 0;\r\n            levelToUse = 1;\r\n        } else {\r\n            depthBufferVP = settings.viewProjection_shadow_near;\r\n            bias = 0.01;\r\n            levelToUse = 0;\r\n        }\r\n\r\n        var temp = (depthBufferVP * worldPosition).xyz;\r\n        var depthBufferCoord = temp.xy * 0.5 + 0.5;\r\n        depthBufferCoord.y = 1 - depthBufferCoord.y;\r\n\r\n        var transformedDepthValue = temp.z - bias;\r\n\r\n        var lightSourceDepthValue = textureSampleLevel(depthBuffersLightSource, point_clamp_sampler, depthBufferCoord, levelToUse, 0);\r\n        if (lightSourceDepthValue < transformedDepthValue) {\r\n            textureStore(swapChain0, threadNum, vec4(0.0, 0.0, 0.0, 0.0));\r\n            textureStore(swapChain1, threadNum, vec4(0.0, 0.0, 0.0, 0.0));\r\n            return;\r\n        }\r\n    }\r\n\r\n    var relativeWorldPosition = worldPosition.xyz - settings.cameraPosition;\r\n\r\n    var coordInRandomData = worldPosition.xyz * randomMul / 80;\r\n    var randomValue = textureSampleLevel(randomData, linear_mirror_sampler, coordInRandomData, 0).x;\r\n\r\n    var clampedTransformedZ = saturate(relativeWorldPosition.z / 150.0);\r\n    var stretchedClampedTransformedZ = 3 - 2 * clampedTransformedZ;\r\n    clampedTransformedZ = 1 - 0.75 * stretchedClampedTransformedZ * clampedTransformedZ * clampedTransformedZ;\r\n\r\n    var randomComponent = randomFinalMul * (randomValue * clampedTransformedZ - 1) + 1;\r\n    \r\n    var directionToPosition = -normalize(relativeWorldPosition);\r\n    var someCos = dot(directionToPosition, settings.sunDirection);\r\n\r\n    var result = randomComponent * (unknownMul0 * ((1 - unknownMul1 * unknownMul1) / (12.56637 * (1 - unknownMul1 * someCos)) - 1) + 1);\r\n\r\n    textureStore(swapChain0, threadNum, vec4(result, 0.0, 0.0, 0.0));\r\n    textureStore(swapChain1, threadNum, vec4(result, 0.0, 0.0, 0.0));\r\n}";

var volumetricAddComp = "@group(0) @binding(0) var<uniform> z: u32;\r\n@group(0) @binding(1) var input: texture_3d<f32>;\r\n@group(0) @binding(2) var output: texture_storage_3d<rgba16float, write>;\r\n\r\n@compute @workgroup_size(32, 32)\r\nfn main(@builtin(global_invocation_id) threadNum : vec3<u32>) {\r\n\tvar prevCoord = vec3(threadNum.xy, z - 1);\r\n\tvar currentCoord = vec3(threadNum.xy, z);\r\n\r\n\tvar prevValue = textureLoad(input, prevCoord, 0).x;\r\n\ttextureStore(output, prevCoord, vec4(prevValue, 0, 0, 0));\r\n\r\n    // TODO use uniform\r\n    if (z < 90) {\r\n        var currentValue = textureLoad(input, currentCoord, 0).x;\r\n        textureStore(output, currentCoord, vec4(currentValue + prevValue, 0, 0, 0));\r\n    }\r\n}";

var volumetricComposeFrag = "@group(0) @binding(0) var point_clamp_sampler: sampler;\r\n@group(0) @binding(1) var linear_clamp_sampler: sampler;\r\n\r\n@group(0) @binding(2) var dithering: texture_2d<f32>;\r\n@group(0) @binding(3) var depthBuffer: texture_depth_2d;\r\n@group(0) @binding(4) var volumetricLightBuffer: texture_3d<f32>;\r\n@group(0) @binding(5) var curve: texture_2d<f32>;\r\n\r\nfn unpack(v: vec4<f32>) -> f32 {\r\n    return dot(v, vec4(1.0, 1/255.0, 1/65025.0, 1/160581375.0));\r\n}\r\n\r\n@fragment\r\nfn main(\r\n    @builtin(position) screenPos: vec4<f32>,\r\n    @location(0) fragNormal: vec3<f32>,\r\n    @location(1) fragUV: vec2<f32>,\r\n) -> @location(0) f32 {\r\n    const lightMul = 0.0353660732507706;\r\n    const reverseDepthMul = 0.75;\r\n\r\n    var screenDepth = textureLoad(depthBuffer, vec2<i32>(floor(screenPos.xy)), 0);\r\n    var curvedDepth = clamp(unpack(textureSampleLevel(curve, linear_clamp_sampler, vec2(screenDepth, 0), 0)), 0, 0.9999);\r\n    \r\n    var volumetricBufferCoord = vec3(fragUV, curvedDepth);\r\n    var lightValue = textureSampleLevel(volumetricLightBuffer, linear_clamp_sampler, volumetricBufferCoord, 0).x * lightMul;\r\n\r\n    var ditherValue = textureSample(dithering, point_clamp_sampler, 0.125 * screenPos.xy).x;\r\n    var ditheredLightValue = (ditherValue * 0.03125 + lightValue) - 0.0078125;\r\n\r\n    if (false && reverseDepthMul >= 0.001) {\r\n        // TODO\r\n        return 0;\r\n    } else {\r\n        return ditheredLightValue;\r\n    }\r\n}";

var volumetricHSmoothComp = "var<workgroup> volumetricValues: array<f32, 990>;\r\nvar<workgroup> depthValues: array<f32, 990>;\r\n\r\n@group(0) @binding(0) var<uniform> resolution: vec2<i32>;\r\n\r\n@group(0) @binding(1) var volumetricScreenSpace: texture_2d<f32>;\r\n@group(0) @binding(2) var depthBuffer: texture_depth_2d;\r\n\r\n@group(0) @binding(3) var output: texture_storage_2d<r32float, write>;\r\n\r\n@compute @workgroup_size(990)\r\nfn main(@builtin(local_invocation_id) threadNum : vec3<u32>, @builtin(workgroup_id) dispatchNums: vec3<u32>) {\r\n\tvar currentOffsetX = i32(threadNum.x) - 15;\r\n\tvar pixelX = i32(dispatchNums.x) * 960 + currentOffsetX;\r\n\tvar pixelY = i32(dispatchNums.y);\r\n\r\n\tvar pixelCoord = clamp(vec2(pixelX, pixelY), vec2(0, 0), resolution);\r\n\r\n\tvar volumetricValue = textureLoad(volumetricScreenSpace, pixelCoord, 0).x;\r\n\tvar depth = textureLoad(depthBuffer, pixelCoord, 0);\r\n\r\n\t// cache the values\r\n\tvolumetricValues[threadNum.x] = volumetricValue;\r\n\tdepthValues[threadNum.x] = depth;\r\n\r\n    workgroupBarrier();\r\n\r\n\tif (currentOffsetX >= 0 && currentOffsetX < 960) {\r\n\t\tvar neighbors = vec4<i32>(threadNum.xxxx) + vec4(-12, -6, 6, 12);\r\n\r\n\t\tvar depthDifferenceAcrossNeighbors = depth * 4 -\r\n\t\t\tdepthValues[neighbors.x] -\r\n\t\t\tdepthValues[neighbors.y] -\r\n\t\t\tdepthValues[neighbors.z] -\r\n\t\t\tdepthValues[neighbors.w];\r\n\r\n\t\tif (abs(depthDifferenceAcrossNeighbors) < 0.002) {\r\n\t\t\tvolumetricValue = volumetricValue * 0.222338006 +\r\n\t\t\t\tvolumetricValues[neighbors.x] * 0.178399995 +\r\n\t\t\t\tvolumetricValues[neighbors.y] * 0.210430995 +\r\n\t\t\t\tvolumetricValues[neighbors.z] * 0.210430995 +\r\n\t\t\t\tvolumetricValues[neighbors.w] * 0.178399995;\r\n\t\t}\r\n\r\n        textureStore(output, pixelCoord, vec4(volumetricValue, volumetricValue, volumetricValue, volumetricValue));\r\n\t}\r\n}";

var volumetricVSmoothComp = "var<workgroup> volumetricValues: array<f32, 570>;\r\nvar<workgroup> depthValues: array<f32, 570>;\r\n\r\n@group(0) @binding(0) var<uniform> resolution: vec2<i32>;\r\n\r\n@group(0) @binding(1) var volumetricScreenSpace: texture_2d<f32>;\r\n@group(0) @binding(2) var depthBuffer: texture_depth_2d;\r\n\r\n@group(0) @binding(3) var output: texture_storage_2d<r32float, write>;\r\n\r\n@compute @workgroup_size(1, 570)\r\nfn main(@builtin(local_invocation_id) threadNum : vec3<u32>, @builtin(workgroup_id) dispatchNums: vec3<u32>) {\r\n\tvar currentOffsetY = i32(threadNum.y) - 15;\r\n\tvar pixelY = i32(dispatchNums.y) * 540 + currentOffsetY;\r\n\tvar pixelX = i32(dispatchNums.x);\r\n\r\n\tvar pixelCoord = clamp(vec2(pixelX, pixelY), vec2(0, 0), resolution);\r\n\r\n\tvar volumetricValue = textureLoad(volumetricScreenSpace, pixelCoord, 0).x;\r\n\tvar depth = textureLoad(depthBuffer, pixelCoord, 0);\r\n\r\n\t// cache the values\r\n\tvolumetricValues[threadNum.y] = volumetricValue;\r\n\tdepthValues[threadNum.y] = depth;\r\n\r\n    workgroupBarrier();\r\n\r\n\tif (currentOffsetY >= 0 && currentOffsetY < 540) {\r\n\t\tvar neighbors = vec4<i32>(threadNum.yyyy) + vec4(-12, -6, 6, 12);\r\n\r\n\t\tvar depthDifferenceAcrossNeighbors = depth * 4 -\r\n\t\t\tdepthValues[neighbors.x] -\r\n\t\t\tdepthValues[neighbors.y] -\r\n\t\t\tdepthValues[neighbors.z] -\r\n\t\t\tdepthValues[neighbors.w];\r\n\r\n\t\tif (abs(depthDifferenceAcrossNeighbors) < 0.002) {\r\n\t\t\tvolumetricValue = volumetricValue * 0.222338006 +\r\n\t\t\t\tvolumetricValues[neighbors.x] * 0.178399995 +\r\n\t\t\t\tvolumetricValues[neighbors.y] * 0.210430995 +\r\n\t\t\t\tvolumetricValues[neighbors.z] * 0.210430995 +\r\n\t\t\t\tvolumetricValues[neighbors.w] * 0.178399995;\r\n\t\t}\r\n\r\n        textureStore(output, pixelCoord, vec4(volumetricValue, volumetricValue, volumetricValue, volumetricValue));\r\n\t}\r\n}";

var volumetricPostprocessFrag = "@group(0) @binding(0) var volumetricLightScreenBuffer: texture_2d<f32>;\r\n\r\n@fragment\r\nfn main(\r\n    @builtin(position) screenPos: vec4<f32>,\r\n    @location(0) fragNormal: vec3<f32>,\r\n) -> @location(0) vec4<f32> {\r\n    const volumetricLightColor = vec3(0.738756477832794, 0.557605266571045, 0.47399827837944);\r\n\r\n    var light = textureLoad(volumetricLightScreenBuffer, vec2<i32>(floor(screenPos.xy)), 0).x;\r\n\r\n    return vec4(volumetricLightColor * light, 0);\r\n}";

var objectsVert = "struct Settings {\r\n    viewProjection: mat4x4<f32>,\r\n    viewProjection_inplace: mat4x4<f32>,\r\n    viewProjection_sun: mat4x4<f32>,\r\n    viewProjection_glare: mat4x4<f32>,\r\n    viewProjection_shadow_near: mat4x4<f32>,\r\n    viewProjection_shadow_far: mat4x4<f32>,\r\n    viewProjection_shadow_near_uv: mat4x4<f32>,\r\n    viewProjection_shadow_far_uv: mat4x4<f32>,\r\n    invScreenResolution: vec2<f32>,\r\n}\r\n\r\nstruct PerObjectDataEntry {\r\n    quat_scale: vec4<f32>,\r\n    translation_atlasNum: vec4<f32>,\r\n}\r\n\r\nstruct PerObjectData {\r\n    entries: array<PerObjectDataEntry>,\r\n}\r\n\r\nstruct VertexOutput {\r\n    @builtin(position) fragPosition: vec4<f32>,\r\n    @location(0) fragNormal: vec3<f32>,\r\n    @location(1) fragUV: vec2<f32>,\r\n    @location(2) @interpolate(flat) fragAtlasNum: u32,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n@group(0) @binding(1) var<storage, read> perObjectData : PerObjectData;\r\n\r\nfn quat_transform(q: vec4<f32>, v: vec3<f32>) -> vec3<f32> {\r\n    return v + 2 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\r\n}\r\n\r\n@vertex\r\nfn main(\r\n    @location(0) inputPosition: vec3<f32>,\r\n    @location(1) inputNormal: vec3<f32>,\r\n    @location(2) inputUV: vec2<f32>,\r\n    @location(3) paramsIndex: f32,\r\n) -> VertexOutput {\r\n    var index = u32(paramsIndex);\r\n\r\n    var quat_scale = perObjectData.entries[index].quat_scale;\r\n    var translation_atlasNum = perObjectData.entries[index].translation_atlasNum;\r\n\r\n    var scale = quat_scale.w;\r\n\r\n    var translation = translation_atlasNum.xyz;\r\n    var atlasNum = translation_atlasNum.w;\r\n\r\n    var quat_xyz = quat_scale.xyz;\r\n    var s = length(quat_xyz);\r\n    var quat = vec4(quat_xyz, sqrt(1.0 - s * s));\r\n\r\n    var output: VertexOutput;\r\n    output.fragPosition = settings.viewProjection * vec4(quat_transform(quat, inputPosition) * scale + translation, 1.0);\r\n    output.fragNormal = quat_transform(quat, inputNormal);\r\n    output.fragUV = inputUV;\r\n    output.fragAtlasNum = u32(atlasNum);\r\n\r\n    return output;\r\n}";

var objectsFrag = "struct Settings {\r\n    viewProjection: mat4x4<f32>,\r\n    viewProjection_inplace: mat4x4<f32>,\r\n    viewProjection_sun: mat4x4<f32>,\r\n    viewProjection_glare: mat4x4<f32>,\r\n    viewProjection_shadow_near: mat4x4<f32>,\r\n    viewProjection_shadow_far: mat4x4<f32>,\r\n    viewProjection_shadow_near_uv: mat4x4<f32>,\r\n    viewProjection_shadow_far_uv: mat4x4<f32>,\r\n    viewProjection_inv: mat4x4<f32>,\r\n    invScreenResolution: vec2<f32>,\r\n    cameraPosition: vec3<f32>,\r\n    sunDirection: vec3<f32>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n@group(0) @binding(2) var atlasSampler: sampler;\r\n@group(0) @binding(3) var atlases: texture_2d_array<f32>;\r\n@group(0) @binding(4) var contactShadowTexture: texture_2d<f32>;\r\n\r\n@fragment\r\nfn main(\r\n    @builtin(position) screenPosInPixels: vec4<f32>,\r\n    @location(0) fragNormal: vec3<f32>,\r\n    @location(1) fragUV: vec2<f32>,\r\n    @location(2) @interpolate(flat) fragAtlasNum: u32,\r\n) -> @location(0) vec4<f32> {\r\n    var screenSpaceShadowValue = textureLoad(contactShadowTexture, vec2<i32>(floor(screenPosInPixels.xy)), 0).r;\r\n\r\n    var lightDir = settings.sunDirection;\r\n    var lightColor = vec3(1.);\r\n\r\n    var amountOfSunLight = saturate(dot(-fragNormal, lightDir));\r\n    var diffuse = screenSpaceShadowValue * amountOfSunLight * lightColor;\r\n\r\n    var ambient = 0.3;\r\n\r\n    var objectColor = textureSample(atlases, atlasSampler, fragUV, fragAtlasNum);\r\n\r\n    var outputColor = vec4(min(ambient + diffuse, vec3(1)) * objectColor.rgb, objectColor.a);\r\n\r\n    return outputColor;\r\n}";

var skydomeVert = "struct Settings {\r\n    viewProjection: mat4x4<f32>,\r\n    viewProjection_inplace: mat4x4<f32>,\r\n    viewProjection_sun: mat4x4<f32>,\r\n    viewProjection_glare: mat4x4<f32>,\r\n    viewProjection_shadow_near: mat4x4<f32>,\r\n    viewProjection_shadow_far: mat4x4<f32>,\r\n    viewProjection_shadow_near_uv: mat4x4<f32>,\r\n    viewProjection_shadow_far_uv: mat4x4<f32>,\r\n    invScreenResolution: vec2<f32>,\r\n}\r\n\r\nstruct VertexOutput {\r\n    @builtin(position) fragPosition: vec4<f32>,\r\n    @location(0) fragColor: vec4<f32>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n\r\n@vertex\r\nfn main(\r\n    @location(0) inputPosition: vec3<f32>,\r\n    @location(1) inputColor: vec4<f32>,\r\n) -> VertexOutput {\r\n    var output: VertexOutput;\r\n\r\n    var pos = settings.viewProjection_inplace * vec4(inputPosition, 1.0);\r\n    pos.z = pos.w;\r\n    // max in depth\r\n    output.fragPosition = pos;\r\n\r\n    var rWeight = vec3(0.391360133886337, 0.386311918497086, 0.389162868261337);\r\n    var gWeight = vec3(0.398082792758942, 0.398599475622177, 0.403697550296783);\r\n    var bWeight = vec3(0.140491753816605, 0.252542823553085, 0.296034902334213);\r\n    var alpha = 0.833333313465118;\r\n\r\n    var tintedColor = rWeight * inputColor.r + gWeight * inputColor.g + bWeight * inputColor.b;\r\n\r\n    output.fragColor = vec4(tintedColor * alpha, inputColor.a);\r\n\r\n    return output;\r\n}";

var skydomeFrag = "@group(0) @binding(1) var pointRepeatSampler: sampler;\r\n@group(0) @binding(2) var dithering: texture_2d<f32>;\r\n\r\n@fragment\r\nfn main(\r\n    @builtin(position) gl_FragCoord: vec4<f32>,\r\n    @location(0) fragColor: vec4<f32>\r\n) -> @location(0) vec4<f32> {\r\n\tvar UV = gl_FragCoord.xy / 8.0;\r\n\tvar ditheringValue = textureSample(dithering, pointRepeatSampler, UV).r * 0.03125 - 0.0078125;\r\n\r\n    var colorOffset = 0.0107804285362363;\r\n\tvar offsettedColor = colorOffset + fragColor.rgb;\r\n\tvar outputColor = vec4(offsettedColor + ditheringValue, fragColor.a);\r\n\r\n    return outputColor;\r\n}";

var sunVert = "struct Settings {\r\n    viewProjection: mat4x4<f32>,\r\n    viewProjection_inplace: mat4x4<f32>,\r\n    viewProjection_sun: mat4x4<f32>,\r\n    viewProjection_glare: mat4x4<f32>,\r\n    viewProjection_shadow_near: mat4x4<f32>,\r\n    viewProjection_shadow_far: mat4x4<f32>,\r\n    viewProjection_shadow_near_uv: mat4x4<f32>,\r\n    viewProjection_shadow_far_uv: mat4x4<f32>,\r\n    invScreenResolution: vec2<f32>,\r\n}\r\n\r\nstruct VertexOutput {\r\n    @builtin(position) fragPosition: vec4<f32>,\r\n    @location(0) fragColor: vec4<f32>,\r\n    @location(1) fragUV: vec2<f32>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n\r\n@vertex\r\nfn main(\r\n    @location(0) inputPosition: vec3<f32>,\r\n    @location(1) inputColor: vec4<f32>,\r\n    @location(2) inputUV: vec2<f32>,\r\n) -> VertexOutput {\r\n    var output: VertexOutput;\r\n\r\n    var pos = settings.viewProjection_sun * vec4(inputPosition, 1.0);\r\n    pos.z = pos.w;\r\n    // max in depth\r\n    output.fragPosition = pos;\r\n\r\n    output.fragUV = inputUV;\r\n\r\n    var rWeight = vec3(0.327245563268662, 0.148633718490601, 0.0669654905796051);\r\n    var gWeight = vec3(0.0, 0.0, 0.0);\r\n    var bWeight = vec3(0.0, 0.0, 0.0);\r\n    var alpha = 0.833333313465118;\r\n\r\n    var tintedColor: vec3<f32> = rWeight * inputColor.r + gWeight * inputColor.g + bWeight * inputColor.b;\r\n\r\n    output.fragColor = vec4(tintedColor * alpha, inputColor.a);\r\n    \r\n    return output;\r\n}";

var sunFrag = "@group(0) @binding(1) var linearSampler: sampler;\r\n@group(0) @binding(2) var tex: texture_2d<f32>;\r\n\r\n@fragment\r\nfn main(\r\n    @location(0) fragColor: vec4<f32>,\r\n    @location(1) fragUV: vec2<f32>,\r\n) -> @location(0) vec4<f32> {\r\n    var color = textureSample(tex, linearSampler, fragUV);\r\n\r\n\treturn fragColor * color;\r\n}";

var passthroughVert = "struct VertexOutput {\r\n    @builtin(position) fragPosition: vec4<f32>,\r\n    @location(0) fragNormal: vec3<f32>,\r\n    @location(1) fragUV: vec2<f32>,\r\n}\r\n\r\n@vertex\r\nfn main(\r\n    @location(0) inputPosition: vec3<f32>,\r\n    @location(1) inputNormal: vec3<f32>,\r\n    @location(2) inputUV: vec2<f32>,\r\n) -> VertexOutput {\r\n    var output: VertexOutput;\r\n\r\n    output.fragPosition = vec4(inputPosition, 1.0);\r\n    output.fragNormal = inputNormal;\r\n    output.fragUV = inputUV;\r\n\r\n    return output;\r\n}";

var passthroughFrag = "@group(0) @binding(0) var linearSampler: sampler;\r\n@group(0) @binding(1) var tex: texture_2d<f32>;\r\n\r\n@fragment\r\nfn main(\r\n    @location(1) fragUV: vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n    return textureSample(tex, linearSampler, fragUV);\r\n}";

var passthroughTexFrag = "@group(0) @binding(0) var tex: texture_2d<f32>;\r\n\r\n@fragment\r\nfn main(\r\n    @location(1) fragUV: vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n    var color = textureLoad(tex, vec2<i32>(floor(fragUV * vec2(2, 2))), 0).rgb;\r\n\r\n    return vec4(color, 0.5);\r\n}";

var passthroughDepthFrag = "@group(0) @binding(0) var linearSampler: sampler;\r\n@group(0) @binding(1) var tex: texture_depth_2d;\r\n\r\n@fragment\r\nfn main(\r\n    @location(1) fragUV: vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n    var depth = textureSample(tex, linearSampler, fragUV);\r\n    return vec4(depth, depth, depth, 1);\r\n}";

var passthroughFrag_Debug = "@group(0) @binding(0) var linearSampler: sampler;\r\n@group(0) @binding(1) var tex: texture_2d<f32>;\r\n\r\n@fragment\r\nfn main(\r\n    @location(1) fragUV: vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n    var f = textureSample(tex, linearSampler, fragUV.xy).x;\r\n    var c = 0.0 + fragUV.y * 0.01 + f * 0;\r\n    return vec4(c, c, c, 1);\r\n}";

var downsample4Frag = "struct Settings {\r\n    invResolution: vec2<f32>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n@group(0) @binding(1) var linearSampler: sampler; // linear, clamp\r\n@group(0) @binding(2) var tex: texture_2d<f32>;\r\n\r\n@fragment\r\nfn main(\r\n    @location(1) inputUV: vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n    const neighbors: array<vec2<f32>, 4> = array(\r\n\t\tvec2(-1, -1),\r\n\t\tvec2( 1, -1),\r\n\t\tvec2( 1,  1),\r\n\t\tvec2(-1,  1),\r\n    );\r\n\r\n    var outputAlpha = 0.0;\r\n\r\n\tvar acum = vec3(0.0);\r\n\tfor (var i = 0; i < 4; i++) {\r\n\t\tvar neighborUV = neighbors[i] * settings.invResolution + inputUV;\r\n\r\n        var sampledColor = textureSample(tex, linearSampler, neighborUV).rgb;\r\n\r\n\t\tacum += sampledColor * 0.25;\r\n\t}\r\n\r\n    return vec4(acum, outputAlpha);\r\n}";

var downsample4ExtractBrightnessFrag = "struct Settings {\r\n    invResolution: vec2<f32>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n@group(0) @binding(1) var linearSampler: sampler; // linear, clamp\r\n@group(0) @binding(2) var tex: texture_2d<f32>;\r\n\r\n@fragment\r\nfn main(\r\n    @location(1) inputUV: vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n    const neighbors: array<vec2<f32>, 4> = array(\r\n\t\tvec2(-1, -1),\r\n\t\tvec2( 1, -1),\r\n\t\tvec2( 1,  1),\r\n\t\tvec2(-1,  1),\r\n    );\r\n\r\n    var outputAlpha = 0.0;\r\n\r\n\tvar acum = vec3(0.0);\r\n\tfor (var i = 0; i < 4; i++) {\r\n\t\tvar neighborUV = neighbors[i] * settings.invResolution + inputUV;\r\n\r\n        var sampledColor = textureSample(tex, linearSampler, neighborUV).rgb;\r\n\r\n\t\tvar brightness = dot(vec3(0.2125, 0.7154, 0.0721), sampledColor);\r\n\r\n\t\tacum += brightness * 0.25;\r\n\t}\r\n\r\n    return vec4(acum, outputAlpha);\r\n}";

var downsample16Frag = "struct Settings {\r\n    invResolution: vec2<f32>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n@group(0) @binding(1) var linearSampler: sampler; // linear, clamp\r\n@group(0) @binding(2) var tex: texture_2d<f32>;\r\n\r\n@fragment\r\nfn main(\r\n    @location(1) inputUV: vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n    const neighbors: array<vec2<f32>, 16> = array(\r\n\t\tvec2(-1.5, -1.5),\r\n\t\tvec2(-0.5, -1.5),\r\n\t\tvec2( 0.5, -1.5),\r\n\t\tvec2( 1.5, -1.5),\r\n\r\n\t\tvec2(-1.5, -0.5),\r\n\t\tvec2(-0.5, -0.5),\r\n\t\tvec2( 0.5, -0.5),\r\n\t\tvec2( 1.5, -0.5),\r\n        \r\n\t\tvec2(-1.5,  0.5),\r\n\t\tvec2(-0.5,  0.5),\r\n\t\tvec2( 0.5,  0.5),\r\n\t\tvec2( 1.5,  0.5),\r\n\r\n\t\tvec2(-1.5,  1.5),\r\n\t\tvec2(-0.5,  1.5),\r\n\t\tvec2( 0.5,  1.5),\r\n\t\tvec2( 1.5,  1.5),\r\n    );\r\n\r\n    var outputAlpha = 0.0;\r\n\r\n\tvar acum = vec3(0.0);\r\n\tfor (var i = 0; i < 16; i++) {\r\n\t\tvar neighborUV = neighbors[i] * settings.invResolution + inputUV;\r\n\r\n        var sampledColor = textureSample(tex, linearSampler, neighborUV).rgb;\r\n\r\n\t\tacum += sampledColor * 0.0625;\r\n\t}\r\n\r\n    return vec4(acum, outputAlpha);\r\n}";

var downsample16ExtractDiffFrag = "struct Settings {\r\n    invResolution: vec2<f32>,\r\n    timeCoeffs: vec2<f32>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n@group(0) @binding(1) var linearSampler: sampler; // linear, clamp\r\n@group(0) @binding(2) var pointSampler: sampler; // point, clamp\r\n@group(0) @binding(3) var tex: texture_2d<f32>;\r\n@group(0) @binding(4) var prevOutput: texture_2d<f32>;\r\n\r\n@fragment\r\nfn main(\r\n    @location(1) inputUV: vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n    const neighbors: array<vec2<f32>, 16> = array(\r\n\t\tvec2(-1.5, -1.5),\r\n\t\tvec2(-0.5, -1.5),\r\n\t\tvec2( 0.5, -1.5),\r\n\t\tvec2( 1.5, -1.5),\r\n\r\n\t\tvec2(-1.5, -0.5),\r\n\t\tvec2(-0.5, -0.5),\r\n\t\tvec2( 0.5, -0.5),\r\n\t\tvec2( 1.5, -0.5),\r\n        \r\n\t\tvec2(-1.5,  0.5),\r\n\t\tvec2(-0.5,  0.5),\r\n\t\tvec2( 0.5,  0.5),\r\n\t\tvec2( 1.5,  0.5),\r\n\r\n\t\tvec2(-1.5,  1.5),\r\n\t\tvec2(-0.5,  1.5),\r\n\t\tvec2( 0.5,  1.5),\r\n\t\tvec2( 1.5,  1.5),\r\n    );\r\n\r\n    var outputAlpha = 0.0;\r\n\r\n\tvar acum = vec3(0.0);\r\n\tfor (var i = 0; i < 16; i++) {\r\n\t\tvar neighborUV = neighbors[i] * settings.invResolution + inputUV;\r\n\r\n        var sampledColor = textureSample(tex, linearSampler, neighborUV).rgb;\r\n\r\n\t\tacum += sampledColor * 0.0625;\r\n\t}\r\n\r\n\tvar prevOutputValue = textureSample(prevOutput, pointSampler, inputUV).rg;\r\n\r\n\tvar valueDelta = acum.rg - prevOutputValue;\r\n\tvar multipliedDelta = valueDelta * settings.timeCoeffs;\r\n\r\n\tvar savedSigns: vec2<f32>;\r\n    savedSigns.x = select(1.0, -1.0, multipliedDelta.x < 0.0);\r\n    savedSigns.y = select(1.0, -1.0, multipliedDelta.y < 0.0);\r\n\r\n\tvar clampedDelta = clamp(abs(multipliedDelta), vec2(1.0 / 256.0), abs(valueDelta)) * savedSigns;\r\n\r\n\treturn vec4(prevOutputValue + clampedDelta, acum.b, outputAlpha);\r\n}";

var fogFrag = "@group(0) @binding(0) var sceneColors: texture_2d<f32>;\r\n@group(0) @binding(1) var depthBuffer: texture_depth_2d;\r\n\r\n@fragment\r\nfn main(\r\n    @builtin(position) screenPosInPixels: vec4<f32>,\r\n    @location(0) fragNormal: vec3<f32>,\r\n) -> @location(0) vec4<f32> {\r\n\tvar depthOffset = 0.0;\r\n\tvar depthMul = 1.0 / 67870.;\r\n\tvar depthLogMul = 0.4;\r\n\tvar minDepthValue = 0.85;\r\n\r\n\tvar fogBaseColorRGBA = vec4(0.125627145171165, 0.256408363580704, 0.279881805181503, 0.833333313465118);\r\n\tvar maxFogColorRGBA = vec4(0.315368860960007, 0.388478130102158, 0.441431760787964, 0.833333313465118);\r\n\r\n    var depthMin = 15.0;\r\n\tvar depthMax = 353840.0;\r\n\r\n    var sceneColor = textureLoad(sceneColors, vec2<i32>(floor(screenPosInPixels.xy)), 0).rgb;\r\n\r\n    var depthValue = textureLoad(depthBuffer, vec2<i32>(floor(screenPosInPixels.xy)), 0);\r\n\tvar stretchedDepthValue = (depthValue * 1.01 - 0.01) * 2.0 - 1.0;\r\n\r\n\tvar someBullshit = depthMin * depthMax * 2.0;\r\n\r\n    var depthDistanceFromZero = depthMax + depthMin;\r\n    var depthLength = depthMax - depthMin;\r\n\r\n    var depthValueInRangeFromOtherSide = depthDistanceFromZero - stretchedDepthValue * depthLength;\r\n\r\n    var depthPower = someBullshit / depthValueInRangeFromOtherSide;\r\n\r\n\tvar depthMulClamped = min(minDepthValue, exp2(depthLogMul * log2(clamp(depthPower * depthMul - depthOffset, 0.0, 1.0))));\r\n\r\n\tvar fogBaseColor = fogBaseColorRGBA.rgb;\r\n\tvar maxFogColor = maxFogColorRGBA.rgb;\r\n\r\n    var fogColorRange = maxFogColor - fogBaseColor;\r\n    var fogColor = fogBaseColor + vec3(depthMulClamped, depthMulClamped, depthMulClamped) * fogColorRange;\r\n\r\n    var sceneAfterFog = (sceneColor + vec3(depthMulClamped, depthMulClamped, depthMulClamped) * (fogColor - sceneColor)) * fogBaseColorRGBA.a;\r\n\r\n    if (depthValue < 1.0 - 10e-8) {\r\n        sceneColor = sceneAfterFog;\r\n    } else {\r\n        sceneColor = sceneColor;\r\n    }\r\n\r\n    return vec4(saturate(sceneColor), 1.0);\r\n}";

var toneMappingFrag = "\r\n@group(0) @binding(0) var linearSampler: sampler; // linear, clamp\r\n@group(0) @binding(1) var scene: texture_2d<f32>;\r\n@group(0) @binding(2) var brightnessMap: texture_2d<f32>;\r\n\r\n@fragment\r\nfn main(\r\n    @builtin(position) screenPosInPixels: vec4<f32>,\r\n    @location(1) fragUV: vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n    const sunGlareMaxBrightness = 0.622557997703552;\r\n    const brightnessMul = 0.933622539043427;\r\n    const someFlag = 0;\r\n\r\n    const brightnessDeltaMul = 1.5;\r\n\r\n    const unknown_mul_0 = 1.17344582080841;\r\n    const unknown_mul_1 = 1.45914733409882;\r\n\r\n    const someColor_rgb = vec3(0.889478623867035, 0.651335895061493, 0.568432688713074);\r\n    const someColor_a = 0.437744200229645;\r\n\r\n    const logMul = 1.04166674613953;\r\n\r\n    var sceneColor = textureLoad(scene, vec2<i32>(floor(screenPosInPixels.xy)), 0).rgb;\r\n    var pixelBrightness = max(10e-6, dot(vec3(0.2125, 0.7154, 0.0721), sceneColor));\r\n\r\n    var sunGlareColor = vec3(0.0, 0.0, 0.0); // TODO ?\r\n\r\n    var brightnessMapValue = textureSample(brightnessMap, linearSampler, fragUV).xy;\r\n    var brightnessChangeRate = brightnessMapValue.y / brightnessMapValue.x;\r\n    var someBrightness = brightnessChangeRate * pixelBrightness;\r\n    var someBrightnessPlusOne = 1 + someBrightness;\r\n\r\n    var someBrightnessClamped = max(0, someBrightness - 0.004);\r\n\r\n    var lowBrightness = (0.5 + someBrightnessClamped * 6.2) * someBrightnessClamped;\r\n    var highBrightness = 0.06 + (1.7 + someBrightnessClamped * 6.2) * someBrightnessClamped;\r\n\r\n    var brightness1 = exp2(2.2 * log2(lowBrightness / highBrightness)) * brightnessMul;\r\n    var brightness2 = (someBrightness * (1 + someBrightness * brightnessMul)) / someBrightnessPlusOne;\r\n\r\n    var chosenBrightness = select(brightness2, brightness1, someFlag >= 0.5);\r\n\r\n    sunGlareColor = sunGlareColor * saturate(sunGlareMaxBrightness - chosenBrightness);\r\n\r\n    var brightnessAdjustedSceneColor = sceneColor * (chosenBrightness / pixelBrightness) + sunGlareColor;\r\n\r\n    var newBrightness = dot(brightnessAdjustedSceneColor, vec3(0.2125, 0.7154, 0.0721));\r\n\r\n    var deltaMultipliedSceneColor =\r\n        newBrightness + brightnessDeltaMul * (brightnessAdjustedSceneColor - newBrightness);\r\n    var deltaMultipliedSceneColorWithSomeColor =\r\n        deltaMultipliedSceneColor + (someColor_rgb * newBrightness - deltaMultipliedSceneColor) * someColor_a;\r\n\r\n    var deltaMultipliedSceneColorWithSomeColorMultiplied =\r\n        (deltaMultipliedSceneColorWithSomeColor * unknown_mul_0 - brightnessMapValue.x) * unknown_mul_1 +\r\n        brightnessMapValue.x;\r\n\r\n    return  vec4(exp2(logMul * log2(saturate(deltaMultipliedSceneColorWithSomeColorMultiplied))), 0);\r\n}";

var glareVert = "struct Settings {\r\n    viewProjection: mat4x4<f32>,\r\n    viewProjection_inplace: mat4x4<f32>,\r\n    viewProjection_sun: mat4x4<f32>,\r\n    viewProjection_glare: mat4x4<f32>,\r\n    viewProjection_shadow_near: mat4x4<f32>,\r\n    viewProjection_shadow_far: mat4x4<f32>,\r\n    viewProjection_shadow_near_uv: mat4x4<f32>,\r\n    viewProjection_shadow_far_uv: mat4x4<f32>,\r\n    invScreenResolution: vec2<f32>,\r\n}\r\n\r\nstruct VertexOutput {\r\n    @builtin(position) fragPosition: vec4<f32>,\r\n    @location(0) fragColor: vec4<f32>,\r\n    @location(1) fragUV: vec2<f32>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n\r\n@vertex\r\nfn main(\r\n    @location(0) inputPosition: vec3<f32>,\r\n    @location(1) inputColor: vec4<f32>,\r\n    @location(2) inputUV: vec2<f32>,\r\n) -> VertexOutput {\r\n    var output: VertexOutput;\r\n\r\n    var pos = settings.viewProjection_glare * vec4(inputPosition, 1.0);\r\n    pos.z = pos.w;\r\n    // max in depth\r\n    output.fragPosition = pos;\r\n\r\n    output.fragUV = inputUV;\r\n\r\n    var rWeight = vec3(0.565203845500946, 0.228658571839333, 0.0142048010602593);\r\n    var alpha = 0.833333313465118;\r\n\r\n    var tintedColor = rWeight * inputColor.r;\r\n\r\n    output.fragColor = vec4(tintedColor * alpha, inputColor.a);\r\n\r\n    return output;\r\n}";

var glareFrag = "@group(0) @binding(1) var linearSampler: sampler;\r\n@group(0) @binding(2) var pointRepeatSampler: sampler;\r\n@group(0) @binding(3) var glare: texture_2d<f32>;\r\n@group(0) @binding(4) var dithering: texture_2d<f32>;\r\n\r\n@fragment\r\nfn main(\r\n    @builtin(position) screenPosInPixels: vec4<f32>,\r\n    @location(0) fragColor: vec4<f32>,\r\n    @location(1) fragUV: vec2<f32>,\r\n) -> @location(0) vec4<f32> {\r\n\tvar UV = screenPosInPixels.xy / 8.0;\r\n\tvar ditheringValue = textureSample(dithering, pointRepeatSampler, UV).r * 0.03125 - 0.0078125;\r\n\r\n\tvar colorValue = textureSample(glare, linearSampler, fragUV);\r\n\tvar finalColor = fragColor.rgb * colorValue.rgb;\r\n\r\n\treturn vec4(finalColor + ditheringValue, colorValue.a * fragColor.a);\r\n}";

var blankVert = "struct Settings {\r\n    viewProjection: mat4x4<f32>,\r\n    viewProjection_inplace: mat4x4<f32>,\r\n    viewProjection_sun: mat4x4<f32>,\r\n    viewProjection_glare: mat4x4<f32>,\r\n    viewProjection_shadow_near: mat4x4<f32>,\r\n    viewProjection_shadow_far: mat4x4<f32>,\r\n    viewProjection_shadow_near_uv: mat4x4<f32>,\r\n    viewProjection_shadow_far_uv: mat4x4<f32>,\r\n    invScreenResolution: vec2<f32>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n\r\n@vertex\r\nfn main(@location(0) inputPosition: vec3<f32>) -> @builtin(position) vec4<f32> {\r\n    // max in depth\r\n    var pos = settings.viewProjection_sun * vec4(inputPosition * 0.04, 1.0);\r\n    pos.z = pos.w * (1 - 10e-5);\r\n    \r\n    return pos;\r\n}";

var blankFrag = "@fragment\r\nfn main() -> @location(0) vec4<f32> {\r\n    return vec4(0.0, 0.0, 0.0, 1.0);\r\n}";

var debugFrustumVert = "struct Settings {\r\n    viewProjection: mat4x4<f32>,\r\n    viewProjection_inplace: mat4x4<f32>,\r\n    viewProjection_sun: mat4x4<f32>,\r\n    viewProjection_glare: mat4x4<f32>,\r\n    viewProjection_shadow_near: mat4x4<f32>,\r\n    viewProjection_shadow_far: mat4x4<f32>,\r\n    viewProjection_shadow_near_uv: mat4x4<f32>,\r\n    viewProjection_shadow_far_uv: mat4x4<f32>,\r\n    invScreenResolution: vec2<f32>,\r\n}\r\n\r\nstruct VertexOutput {\r\n    @builtin(position) fragPosition: vec4<f32>,\r\n    @location(0) fragNormal: vec3<f32>,\r\n    @location(1) fragUV: vec2<f32>,\r\n}\r\n\r\n@group(0) @binding(0) var<uniform> settings: Settings;\r\n\r\n@vertex\r\nfn main(\r\n    @location(0) inputPosition: vec3<f32>,\r\n    @location(1) inputNormal: vec3<f32>,\r\n    @location(2) inputUV: vec2<f32>,\r\n) -> VertexOutput {\r\n    var output: VertexOutput;\r\n    output.fragPosition = settings.viewProjection * vec4(inputPosition, 1);\r\n    output.fragNormal = inputNormal;\r\n    output.fragUV = inputUV;\r\n\r\n    return output;\r\n}";

var debugFrustumFrag = "@fragment\r\nfn main(\r\n    @location(0) fragNormal: vec3<f32>,\r\n    @location(1) fragUV: vec2<f32>,\r\n) -> @location(0) vec4<f32> {\r\n    var lightDir = normalize(vec3(0.656, 0.3, 0.14));\r\n    var lightColor = vec3(1.);\r\n\r\n    var diff = max(dot(fragNormal, lightDir), 0.0);\r\n    var diffuse = diff * lightColor;\r\n\r\n    var ambient = 0.5;\r\n\r\n    var objectColor = vec4(fragUV.x, 0.0, fragUV.y, 0.25);\r\n\r\n    var outputColor = vec4(min(ambient + diffuse, vec3(1)) * objectColor.rgb, objectColor.a);\r\n\r\n    return outputColor;\r\n}";

/* eslint-disable @typescript-eslint/no-non-null-assertion */
const canvasWebGPU = document.createElement("canvas");
const canvas2D = document.createElement("canvas");
const wg = canvasWebGPU.getContext("webgpu");
let wd;
const ctx$1 = canvas2D.getContext("2d");
//"rgba16float"
const presentationFormat = "rgba16float"; // navigator.gpu.getPreferredCanvasFormat()
async function initWebGPU() {
    const adapter = await navigator.gpu.requestAdapter();
    if (!adapter) {
        return;
    }
    wd = await adapter.requestDevice({
        requiredFeatures: ["depth-clip-control", "rg11b10ufloat-renderable"],
        requiredLimits: {
            maxComputeInvocationsPerWorkgroup: 1024,
            maxComputeWorkgroupSizeX: 1024,
            maxComputeWorkgroupSizeY: 1024,
        },
    });
    wg.configure({
        device: wd,
        format: presentationFormat,
        colorSpace: "display-p3",
        alphaMode: "opaque",
    });
}
canvasWebGPU.style.position = "fixed";
document.body.insertBefore(canvas2D, null);
canvas2D.style.pointerEvents = "none";
canvas2D.style.position = "fixed";
document.body.insertBefore(canvasWebGPU, null);

const COLORED_VERTEX_SIZE = 3 + 4;
// pos, normal, uv, pos in per object data
const CHUNK_MESH_VERTEX_SIZE = 3 + 3 + 2 + 1;
const SKINNED_VERTEX_SIZE = 3 + 3 + 2 + 4 + 4;
class Renderable {
    mesh;
    texture;
    rotation = create$2();
    scale = 1;
    position = create$4();
    perObjectDataIndex = undefined;
    atlasNum = undefined;
    constructor(mesh, texture) {
        this.mesh = mesh;
        this.texture = texture;
        mesh.incRef();
        texture.incRef();
    }
}

/* eslint-disable @typescript-eslint/no-non-null-assertion */
const MAX_ATLASES_COUNT = 16;
const ATLAS_SIZE = 2048;
class AtlasRow {
    y;
    height;
    nextX = 0;
    constructor(y, height) {
        this.y = y;
        this.height = height;
    }
}
class Atlas {
    num;
    atlasTexture;
    nextY = 0;
    rows = [];
    constructor(num, atlasTexture) {
        this.num = num;
        this.atlasTexture = atlasTexture;
    }
    findRowForTexture(texture) {
        let smallestRowToFit = undefined;
        // TODO use binary search
        for (const row of this.rows) {
            if (row.height >= texture.height &&
                row.nextX + texture.width <= ATLAS_SIZE &&
                (smallestRowToFit === undefined || smallestRowToFit.height > row.height)) {
                smallestRowToFit = row;
            }
        }
        // can't fit texture in existing rows
        if (smallestRowToFit === undefined) {
            const rowHeight = texture.height;
            if (this.nextY + rowHeight > ATLAS_SIZE) {
                // can't allocate new row this size
                return undefined;
            }
            smallestRowToFit = new AtlasRow(this.nextY, rowHeight);
            this.rows.push(smallestRowToFit);
            this.nextY += rowHeight;
        }
        return smallestRowToFit;
    }
    tryAddTexture(texture) {
        if (texture.width > ATLAS_SIZE || texture.height > ATLAS_SIZE) {
            throw new Error("Texture is larger than Atlas size.");
        }
        const row = this.findRowForTexture(texture);
        if (!row) {
            return undefined;
        }
        const x = row.nextX;
        const y = row.y;
        // TODO generate mipmaps somehow
        wd.queue.writeTexture({
            texture: this.atlasTexture,
            origin: [x, y, this.num],
        }, texture.pixels, {
            offset: 0,
            bytesPerRow: texture.width * 4,
            rowsPerImage: texture.height,
        }, {
            width: texture.width,
            height: texture.height,
        });
        row.nextX += texture.width;
        return [x / ATLAS_SIZE, y / ATLAS_SIZE];
    }
}

class RefCountingResource {
    refCount = 0;
    incRef() {
        this.refCount++;
        return this.refCount;
    }
    decRef() {
        this.refCount--;
        if (this.refCount < 0) {
            throw new Error("Resourse ref count is negative.");
        }
        return this.refCount;
    }
}
class Mesh extends RefCountingResource {
    vertices;
    indices;
    constructor(vertices, indices) {
        super();
        this.vertices = vertices;
        this.indices = indices;
    }
}
class ColoredMesh extends RefCountingResource {
    vertices;
    indices;
    constructor(vertices, indices) {
        super();
        this.vertices = vertices;
        this.indices = indices;
    }
}
class ColoredTexturedMesh extends RefCountingResource {
    vertices;
    indices;
    constructor(vertices, indices) {
        super();
        this.vertices = vertices;
        this.indices = indices;
    }
}
class Texture extends RefCountingResource {
    id;
    pixels;
    width;
    height;
    constructor(id, pixels, width, height) {
        super();
        this.id = id;
        this.pixels = pixels;
        this.width = width;
        this.height = height;
    }
}
class Bone {
    id;
    translation;
    rotation;
    static STRIDE = 1 + 3 + 4;
    static HUMAN_BONES_START = 1000;
    static HUMAN_BONES_COUNT = 13;
    static BONE_NAME_TO_BONE_ID = [
        "Spine",
        "UpperSpine",
        "Neck",
        "UpperLeg.R",
        "LowerLeg.R",
        "Foot.R",
        "UpperLeg.L",
        "LowerLeg.L",
        "Foot.L",
        "UpperArm.R",
        "LowerArm.R",
        "UpperArm.L",
        "LowerArm.L",
    ];
    static SPINE = Bone.nameToId("Spine");
    static UPPER_SPINE = Bone.nameToId("UpperSpine");
    static NECK = Bone.nameToId("Neck");
    static UPPER_LEG_R = Bone.nameToId("UpperLeg.R");
    static LOWER_LEG_R = Bone.nameToId("LowerLeg.R");
    static FOOT_R = Bone.nameToId("Foot.R");
    static UPPER_LEG_L = Bone.nameToId("UpperLeg.L");
    static LOWER_LEG_L = Bone.nameToId("LowerLeg.L");
    static FOOT_L = Bone.nameToId("Foot.L");
    static UPPER_ARM_R = Bone.nameToId("UpperArm.R");
    static LOWER_ARM_R = Bone.nameToId("LowerArm.R");
    static UPPER_ARM_L = Bone.nameToId("UpperArm.L");
    static LOWER_ARM_L = Bone.nameToId("LowerArm.L");
    static HUMAN_SKELETON = Bone.createHumanSkeleton();
    static createHumanSkeleton() {
        const HUMAN_SKELETON = new Map();
        HUMAN_SKELETON.set(Bone.UPPER_SPINE, Bone.SPINE);
        HUMAN_SKELETON.set(Bone.NECK, Bone.UPPER_SPINE);
        HUMAN_SKELETON.set(Bone.LOWER_LEG_R, Bone.UPPER_LEG_R);
        HUMAN_SKELETON.set(Bone.FOOT_R, Bone.LOWER_LEG_R);
        HUMAN_SKELETON.set(Bone.LOWER_LEG_L, Bone.UPPER_LEG_L);
        HUMAN_SKELETON.set(Bone.FOOT_L, Bone.LOWER_LEG_L);
        HUMAN_SKELETON.set(Bone.UPPER_ARM_R, Bone.UPPER_SPINE);
        HUMAN_SKELETON.set(Bone.LOWER_ARM_R, Bone.UPPER_ARM_R);
        HUMAN_SKELETON.set(Bone.UPPER_ARM_L, Bone.UPPER_SPINE);
        HUMAN_SKELETON.set(Bone.LOWER_ARM_L, Bone.UPPER_ARM_L);
        return HUMAN_SKELETON;
    }
    static idToName(id) {
        return Bone.BONE_NAME_TO_BONE_ID[id - Bone.HUMAN_BONES_START];
    }
    static nameToId(name) {
        const index = Bone.BONE_NAME_TO_BONE_ID.indexOf(name);
        if (index === -1) {
            throw new Error("Unknown bone");
        }
        return Bone.HUMAN_BONES_START + index;
    }
    static getHumanBoneParent(id) {
        return Bone.HUMAN_SKELETON.get(id);
    }
    constructor(id, translation, rotation) {
        this.id = id;
        this.translation = translation;
        this.rotation = rotation;
    }
}
class Model {
    vertices;
    indices;
    bones;
    inverseMatrices;
    boneIdToBoneIndex;
    constructor(vertices, indices, bones) {
        this.vertices = vertices;
        this.indices = indices;
        this.bones = bones;
        this.inverseMatrices = new Array(bones.length);
        this.boneIdToBoneIndex = new Map();
        for (let i = 0; i < bones.length; i++) {
            this.boneIdToBoneIndex.set(bones[i].id, i);
        }
        this.buildInverseMatrices();
    }
    getBoneIndex(id) {
        return this.boneIdToBoneIndex.get(id);
    }
    getBone(id) {
        const index = this.getBoneIndex(id);
        if (index === undefined) {
            return null;
        }
        return this.bones[index];
    }
    getBoneParent(id) {
        const parentId = Bone.getHumanBoneParent(id);
        if (parentId === undefined) {
            return null;
        }
        const parentIndex = this.getBoneIndex(parentId);
        if (parentIndex === undefined) {
            throw new Error("Unknown bone");
        }
        return this.bones[parentIndex];
    }
    getBoneParentIndex(id) {
        const parentId = Bone.getHumanBoneParent(id);
        if (parentId === undefined) {
            return undefined;
        }
        return this.getBoneIndex(parentId);
    }
    buildInverseMatrices() {
        for (let boneId = Bone.HUMAN_BONES_START; boneId < Bone.HUMAN_BONES_START + Bone.HUMAN_BONES_COUNT; boneId++) {
            const boneIndex = this.getBoneIndex(boneId);
            if (boneIndex === undefined) {
                throw new Error("Unknown bone");
            }
            const parentBoneId = Bone.getHumanBoneParent(boneId);
            const parentBoneIndex = parentBoneId !== undefined ? this.boneIdToBoneIndex.get(parentBoneId) : undefined;
            const bone = this.bones[boneIndex];
            const invMatrix = create$5();
            fromRotationTranslation$1(invMatrix, bone.rotation, bone.translation);
            if (parentBoneIndex !== undefined) {
                const parentMatrix = clone$5(this.inverseMatrices[parentBoneIndex]);
                invert$2(parentMatrix, parentMatrix);
                mul$5(invMatrix, parentMatrix, invMatrix);
            }
            invert$2(invMatrix, invMatrix);
            this.inverseMatrices[boneIndex] = invMatrix;
        }
    }
}
class Animation {
    timings;
    values;
    constructor(timings, values) {
        this.timings = timings;
        this.values = values;
    }
    findTimingNextIndex(s) {
        let index = 1;
        while (this.timings[index] <= s && index < this.timings.length) {
            index++;
        }
        console.assert(index < this.timings.length);
        return index;
    }
    getRotation(boneId, s) {
        const first = this.timings[0];
        const last = this.timings[this.timings.length - 1];
        const duration = last - first;
        s = first + ((s - first) % duration);
        const rotation = create$2();
        const rotations = this.values.get(boneId);
        if (rotations !== undefined) {
            const nextIndex = this.findTimingNextIndex(s);
            const prevIndex = nextIndex - 1;
            const s0 = this.timings[prevIndex];
            const s1 = this.timings[nextIndex];
            const t = (s - s0) / (s1 - s0);
            const r0 = rotations[prevIndex];
            const r1 = rotations[nextIndex];
            slerp(rotation, r0, r1, t);
        }
        return rotation;
    }
}

/* eslint-disable @typescript-eslint/no-non-null-assertion */
const MESH_VERTEX_SIZE = 3 + 3 + 2;
function loadMesh(data) {
    const header = new Uint32Array(data, 0, 2);
    const [vertexCount, indexCount] = header;
    const indices = new Uint16Array(data, 2 * 4, indexCount);
    const floatPosition = Math.ceil((2 * 4 + indexCount * 2) / 4) * 4;
    const vertices = new Float32Array(data, floatPosition, MESH_VERTEX_SIZE * vertexCount);
    const model = new Mesh(vertices, indices);
    return model;
}
const COLORED_MESH_SIZE = 3 + 1;
function loadColoredMesh(data) {
    const header = new Uint32Array(data, 0, 2);
    const [vertexCount, indexCount] = header;
    const indices = new Uint16Array(data, 2 * 4, indexCount);
    const verticesAndColors = new Float32Array(data, 2 * 4 + indexCount * 2, COLORED_MESH_SIZE * vertexCount);
    const model = new ColoredMesh(verticesAndColors, indices);
    return model;
}
const COLORED_TEXTURED_MESH_SIZE = 3 + 2 + 1;
function loadColoredTexturedMesh(data) {
    const header = new Uint32Array(data, 0, 2);
    const [vertexCount, indexCount] = header;
    const indices = new Uint16Array(data, 2 * 4, indexCount);
    const verticesAndColors = new Float32Array(data, 2 * 4 + indexCount * 2, COLORED_TEXTURED_MESH_SIZE * vertexCount);
    const model = new ColoredTexturedMesh(verticesAndColors, indices);
    return model;
}
const MODEL_VERTEX_SIZE = 3 + 3 + 2 + 4 + 4;
function loadModel(data) {
    const header = new Uint32Array(data, 0, 3);
    const [vertexCount, indexCount, boneCount] = header;
    const indices = new Uint16Array(data, 3 * 4, indexCount);
    const floatPosition = Math.ceil((3 * 4 + indexCount * 2) / 4) * 4;
    const vertices = new Float32Array(data, floatPosition, MODEL_VERTEX_SIZE * vertexCount);
    const boneData = new Float32Array(data, floatPosition + MODEL_VERTEX_SIZE * vertexCount * 4, boneCount * Bone.STRIDE);
    const bones = [];
    for (let i = 0; i < boneCount; i++) {
        const id = Math.trunc(boneData[i * Bone.STRIDE + 0]);
        const translation = fromValues$4(boneData[i * Bone.STRIDE + 1], boneData[i * Bone.STRIDE + 2], boneData[i * Bone.STRIDE + 3]);
        const rotation = fromValues$2(boneData[i * Bone.STRIDE + 4], boneData[i * Bone.STRIDE + 5], boneData[i * Bone.STRIDE + 6], boneData[i * Bone.STRIDE + 7]);
        const bone = new Bone(id, translation, rotation);
        bones.push(bone);
    }
    const skin = new Model(vertices, indices, bones);
    return skin;
}
function loadAnimation(data) {
    const floats = new Float32Array(data);
    const keyframeCount = Math.trunc(floats[0]);
    const bonesCount = Math.trunc(floats[1]);
    const timings = [];
    for (let i = 0; i < keyframeCount; i++) {
        timings.push(floats[2 + i]);
    }
    const map = new Map();
    const valuesPos = 2 + keyframeCount;
    const VALUES_STRIDE = 1 + 4 * keyframeCount;
    for (let i = 0; i < bonesCount; i++) {
        const pos = valuesPos + i * VALUES_STRIDE;
        const boneId = Math.trunc(floats[pos + 0]);
        const rotations = [];
        for (let j = 0; j < keyframeCount; j++) {
            const rotation = fromValues$2(floats[pos + 1 + j * 4 + 0], floats[pos + 1 + j * 4 + 1], floats[pos + 1 + j * 4 + 2], floats[pos + 1 + j * 4 + 3]);
            rotations.push(rotation);
        }
        map.set(boneId, rotations);
    }
    const animation = new Animation(timings, map);
    return animation;
}
const MAX_TEX_SIZE = 2048;
const canvas = document.createElement("canvas");
canvas.width = MAX_TEX_SIZE;
canvas.height = MAX_TEX_SIZE;
const ctx = canvas.getContext("2d", { willReadFrequently: true });
async function loadTexture(url) {
    return new Promise(resolve => {
        const image = new Image();
        image.onload = () => {
            const canvas = ctx.canvas;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(image, 0, 0);
            const data = ctx.getImageData(0, 0, image.width, image.height);
            resolve(new Texture(url, data.data, data.width, data.height));
        };
        image.src = url;
    });
}
// URL adapters
async function loadMeshFromURL(url) {
    const data = await (await fetch(url)).arrayBuffer();
    return loadMesh(data);
}
async function loadColoredMeshFromURL(url) {
    const data = await (await fetch(url)).arrayBuffer();
    return loadColoredMesh(data);
}
async function loadColoredTexturedMeshFromURL(url) {
    const data = await (await fetch(url)).arrayBuffer();
    return loadColoredTexturedMesh(data);
}
async function loadModelFromURL(url) {
    const data = await (await fetch(url)).arrayBuffer();
    return loadModel(data);
}
async function loadAnimationFromURL(url) {
    const data = await (await fetch(url)).arrayBuffer();
    return loadAnimation(data);
}

class ResourceManager {
    static meshes = new Map();
    static textures = new Map();
    static init() {
        //
    }
    // mesh
    static async requestMesh(meshName) {
        return ResourceManager.request(meshName, this.meshes, (name) => loadMeshFromURL(`build/${name}.mdl`));
    }
    static freeMesh(meshName) {
        ResourceManager.free(meshName, this.meshes);
    }
    // texture
    static async requestTexture(textureName) {
        return ResourceManager.request(textureName, this.textures, (name) => loadTexture(`build/${name}`));
    }
    static freeTexture(textureName) {
        ResourceManager.free(textureName, this.textures);
    }
    // generic request/free
    static async request(name, map, promiseSupplier) {
        let res = map.get(name);
        if (res === undefined) {
            res = await promiseSupplier(name);
            map.set(name, res);
        }
        res.incRef();
        return res;
    }
    static free(name, map) {
        const res = map.get(name);
        if (res === undefined) {
            throw new Error(`Resource ${name} is not loaded and can't be freed.`);
        }
        if (res.decRef() === 0) {
            map.delete(name);
        }
    }
    static finalize() {
        //
    }
    static generatePlane(x, y, width, height) {
        const left = (x / canvasWebGPU.width) * 2 - 1;
        const right = ((x + width - 1) / canvasWebGPU.width) * 2 - 1;
        const top = (y / canvasWebGPU.height) * 2 - 1;
        const bottom = ((y + height - 1) / canvasWebGPU.height) * 2 - 1;
        const indices = new Uint16Array([0, 2, 1, 1, 2, 3]);
        const vertices = new Float32Array([
            left,
            -top,
            0,
            0,
            0,
            1,
            0,
            0,
            right,
            -top,
            0,
            0,
            0,
            1,
            1,
            0,
            left,
            -bottom,
            0,
            0,
            0,
            1,
            0,
            1,
            right,
            -bottom,
            0,
            0,
            0,
            1,
            1,
            1,
        ]);
        const model = new Mesh(vertices, indices);
        return model;
    }
    static generateCubeFromTransform(transform, r, b, min_z = 0, max_z = 1) {
        const templateVertices = [
            1, -1, 1, 0, 1, -1, -1, 0, 1, 0, 1, -1, 0, 0, 0, -1, -1, 1, 0, 1, -1, 1, 0, 1, 0, -1,
            -1, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1, 0, 0, 0, -1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, -1, 0, 0,
            0, 1, 1, 0, 1, 0, -1, 1, 0, 1, 1, 1, -1, 0, 0, 0, -1, -1, 0, 0, 1, -1, -1, 1, 0, 1, 1,
            1, 1, 1, 0, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, -1, 1, 0,
            1, 1, 1, 0, 1, 0, 1, -1, 1, 0, 0,
        ];
        const vertices = [];
        const vec = create$3();
        for (let i = 0; i < templateVertices.length; i += 5) {
            const x = templateVertices[i + 0];
            const y = templateVertices[i + 1];
            const z = min_z + templateVertices[i + 2] * (max_z - min_z);
            set$3(vec, -x, -y, z, 1);
            transformMat4$1(vec, vec, transform);
            scale$3(vec, vec, 1 / vec[3]);
            vertices.push(vec[0], vec[1], vec[2], 0, 0, 0, r, b);
        }
        const indices = new Uint16Array([
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 1, 3, 19, 4, 6, 20,
            7, 9, 21, 10, 12, 22, 13, 15, 23, 16,
        ]);
        const getPoint = (i) => fromValues$4(vertices[i * 8 + 0], vertices[i * 8 + 1], vertices[i * 8 + 2]);
        const setNormal = (i, n) => {
            vertices[i * 8 + 3] = n[0];
            vertices[i * 8 + 4] = n[1];
            vertices[i * 8 + 5] = n[2];
        };
        // calc normals
        for (let faceIndex = 0; faceIndex < indices.length; faceIndex += 3) {
            const p1 = getPoint(indices[faceIndex + 0]);
            const p2 = getPoint(indices[faceIndex + 1]);
            const p3 = getPoint(indices[faceIndex + 2]);
            const u = sub$2(create$4(), p2, p1);
            const v = sub$2(create$4(), p3, p1);
            const n = create$4();
            n[0] = u[1] * v[2] - u[2] * v[1];
            n[1] = u[2] * v[0] - u[0] * v[2];
            n[2] = u[0] * v[1] - u[1] * v[0];
            setNormal(indices[faceIndex + 0], n);
            setNormal(indices[faceIndex + 1], n);
            setNormal(indices[faceIndex + 2], n);
        }
        const model = new Mesh(new Float32Array(vertices), indices);
        return model;
    }
}

/* eslint-disable @typescript-eslint/no-non-null-assertion */
const POSITION_LOC = 0;
const COLOR_LOC = 1;
const NORMAL_LOC = 1;
const UV_LOC = 2;
const PARAMS_LOC = 3;
const VOLUMETRIC_TEX_WIDTH = 320;
const VOLUMETRIC_TEX_HEIGHT = 192;
const VOLUMETRIC_TEX_DEPTH = 90;
const VOLUMETRIC_DISPATCH_X = VOLUMETRIC_TEX_WIDTH / 32;
const VOLUMETRIC_DISPATCH_Y = VOLUMETRIC_TEX_HEIGHT / 32;
const VOLUMETRIC_DISPATCH_Z = VOLUMETRIC_TEX_DEPTH / 1;
class GenericMesh {
    vertices;
    indices;
    indexCount;
    constructor(verticesData, indicesData) {
        this.vertices = wd.createBuffer({
            size: verticesData.byteLength,
            usage: GPUBufferUsage.VERTEX,
            mappedAtCreation: true,
        });
        this.indices = wd.createBuffer({
            size: indicesData.byteLength,
            usage: GPUBufferUsage.INDEX,
            mappedAtCreation: true,
        });
        new Float32Array(this.vertices.getMappedRange()).set(verticesData);
        this.vertices.unmap();
        new Uint16Array(this.indices.getMappedRange()).set(indicesData);
        this.indices.unmap();
        this.indexCount = indicesData.length;
    }
}
class ColoredMeshBuffer extends GenericMesh {
    mesh;
    static buffers = [
        {
            arrayStride: COLORED_MESH_SIZE * 4,
            attributes: [
                {
                    shaderLocation: POSITION_LOC,
                    offset: 0,
                    format: "float32x3",
                },
                {
                    shaderLocation: COLOR_LOC,
                    offset: 3 * 4,
                    format: "unorm8x4",
                },
            ],
        },
    ];
    constructor(mesh) {
        super(mesh.vertices, mesh.indices);
        this.mesh = mesh;
    }
}
class MeshBuffer extends GenericMesh {
    mesh;
    static buffers = [
        {
            arrayStride: MESH_VERTEX_SIZE * 4,
            attributes: [
                {
                    shaderLocation: POSITION_LOC,
                    offset: 0,
                    format: "float32x3",
                },
                {
                    shaderLocation: NORMAL_LOC,
                    offset: 3 * 4,
                    format: "float32x3",
                },
                {
                    shaderLocation: UV_LOC,
                    offset: 6 * 4,
                    format: "float32x2",
                },
            ],
        },
    ];
    constructor(mesh) {
        super(mesh.vertices, mesh.indices);
        this.mesh = mesh;
    }
}
class ColoredTexturedMeshBuffer extends GenericMesh {
    mesh;
    static buffers = [
        {
            arrayStride: COLORED_TEXTURED_MESH_SIZE * 4,
            attributes: [
                {
                    shaderLocation: POSITION_LOC,
                    offset: 0,
                    format: "float32x3",
                },
                {
                    shaderLocation: UV_LOC,
                    offset: 3 * 4,
                    format: "float32x2",
                },
                {
                    shaderLocation: COLOR_LOC,
                    offset: (3 + 2) * 4,
                    format: "unorm8x4",
                },
            ],
        },
    ];
    constructor(mesh) {
        super(mesh.vertices, mesh.indices);
        this.mesh = mesh;
    }
}
// in vertex count
const VERTEX_BUFFER_SIZE = Math.trunc((4 * 1024 * 1024) / 4 / CHUNK_MESH_VERTEX_SIZE);
const INDEX_BUFFER_SIZE = VERTEX_BUFFER_SIZE; // in index count
const ramVertexBuffer = new Float32Array(VERTEX_BUFFER_SIZE * CHUNK_MESH_VERTEX_SIZE);
const ramIndexBuffer = new Uint32Array(INDEX_BUFFER_SIZE);
class BufferChunk {
    static buffers = [
        {
            arrayStride: CHUNK_MESH_VERTEX_SIZE * 4,
            attributes: [
                {
                    shaderLocation: POSITION_LOC,
                    offset: 0,
                    format: "float32x3",
                },
                {
                    shaderLocation: NORMAL_LOC,
                    offset: 3 * 4,
                    format: "float32x3",
                },
                {
                    shaderLocation: UV_LOC,
                    offset: (3 + 3) * 4,
                    format: "float32x2",
                },
                {
                    shaderLocation: PARAMS_LOC,
                    offset: (3 + 3 + 2) * 4,
                    format: "float32",
                },
            ],
        },
    ];
    vertices;
    indices;
    vertexPos = 0;
    indexPos = 0;
    constructor() {
        this.vertices = wd.createBuffer({
            size: VERTEX_BUFFER_SIZE * CHUNK_MESH_VERTEX_SIZE * 4,
            usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,
        });
        this.indices = wd.createBuffer({
            size: INDEX_BUFFER_SIZE * 4,
            usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST,
        });
    }
    tryAddRenderable(renderable) {
        const { mesh, texture } = renderable;
        const vertexCount = mesh.vertices.length / MESH_VERTEX_SIZE;
        const indexCount = mesh.indices.length;
        if (VERTEX_BUFFER_SIZE - this.vertexPos < vertexCount ||
            INDEX_BUFFER_SIZE - this.indexPos < indexCount) {
            return false;
        }
        const uScale = texture.width / ATLAS_SIZE;
        const vScale = texture.height / ATLAS_SIZE;
        const [uOffset, vOffset, atlasNum] = Render.getAtlasSlotForTexture(texture);
        // we can add this object to this chunk
        const perObjectDataIndex = Render.allocatePerObjectInfoIndex();
        // setup vertices
        for (let vertexIndex = 0; vertexIndex < vertexCount; vertexIndex++) {
            const MESH_VERTEX_STATIC_SIZE = 3 + 3;
            for (let i = 0; i < MESH_VERTEX_STATIC_SIZE; i++) {
                ramVertexBuffer[vertexIndex * CHUNK_MESH_VERTEX_SIZE + i] =
                    mesh.vertices[vertexIndex * MESH_VERTEX_SIZE + i];
            }
            let u = mesh.vertices[vertexIndex * MESH_VERTEX_SIZE + MESH_VERTEX_STATIC_SIZE + 0];
            let v = mesh.vertices[vertexIndex * MESH_VERTEX_SIZE + MESH_VERTEX_STATIC_SIZE + 1];
            // fix UV for atlas
            u = uOffset + u * uScale;
            v = vOffset + v * vScale;
            ramVertexBuffer[vertexIndex * CHUNK_MESH_VERTEX_SIZE + MESH_VERTEX_STATIC_SIZE + 0] = u;
            ramVertexBuffer[vertexIndex * CHUNK_MESH_VERTEX_SIZE + MESH_VERTEX_STATIC_SIZE + 1] = v;
            ramVertexBuffer[vertexIndex * CHUNK_MESH_VERTEX_SIZE + MESH_VERTEX_SIZE + 0] =
                perObjectDataIndex;
        }
        // pass vertices to GPU
        wd.queue.writeBuffer(this.vertices, this.vertexPos * CHUNK_MESH_VERTEX_SIZE * 4, ramVertexBuffer, 0, vertexCount * CHUNK_MESH_VERTEX_SIZE);
        // setup indices
        for (let indexIndex = 0; indexIndex < indexCount; indexIndex++) {
            ramIndexBuffer[indexIndex] = this.vertexPos + mesh.indices[indexIndex];
        }
        // pass indices to GPU
        wd.queue.writeBuffer(this.indices, this.indexPos * 4, ramIndexBuffer, 0, indexCount);
        // seek the chunk
        this.vertexPos += vertexCount;
        this.indexPos += indexCount;
        // done
        renderable.atlasNum = atlasNum;
        renderable.perObjectDataIndex = perObjectDataIndex;
        return true;
    }
}
const VEC2_FLOAT_SIZE = 2;
const VEC3_FLOAT_SIZE = 3;
const MAT4_FLOAT_SIZE = 4 * 4;
// const VEC2_BYTE_SIZE = VEC2_FLOAT_SIZE * 4
const VEC2_BYTE_SIZE_ALIGN = 4 * 4;
const VEC3_BYTE_SIZE = VEC3_FLOAT_SIZE * 4;
const VEC3_BYTE_SIZE_ALIGN = 4 * 4;
const MAT4_BYTE_SIZE = MAT4_FLOAT_SIZE * 4;
const SETTINGS_SIZE = 9 * MAT4_FLOAT_SIZE + 1 * VEC2_FLOAT_SIZE + 2 * VEC3_BYTE_SIZE;
const PER_OBJECT_DATA_BUFFER_SIZE = 1024 * 1024;
// compressed quat + scale + position + flags
const PER_OBJECT_DATA_ENTRY_SIZE = 3 + 1 + 3 + 1;
const ramPerObjectDataBuffer = new Float32Array(PER_OBJECT_DATA_ENTRY_SIZE);
function createTexture(tex) {
    const texture = wd.createTexture({
        size: [tex.width, tex.height, 1],
        format: "rgba8unorm",
        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
    });
    wd.queue.writeTexture({ texture }, tex.pixels, { bytesPerRow: tex.width * 4, rowsPerImage: tex.height }, { width: tex.width, height: tex.height });
    return texture;
}
function createTextureByFormat(width, height, format) {
    const texture = wd.createTexture({
        size: [width, height, 1],
        format: format,
        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,
    });
    return texture;
}
function createFloatTexture(width, height) {
    return createTextureByFormat(width, height, "rg11b10ufloat");
}
var BlankQueryState;
(function (BlankQueryState) {
    BlankQueryState[BlankQueryState["None"] = 0] = "None";
    BlankQueryState[BlankQueryState["Requested"] = 1] = "Requested";
    BlankQueryState[BlankQueryState["Pending"] = 2] = "Pending";
})(BlankQueryState || (BlankQueryState = {}));
const QUERY_BUFFER_SIZE = 8;
const SHADOW_RESOLUTION = 4096;
// TODO for now this must be manually synced with contact shadows shader
// const SHADOW_RND_STEP = 4 / SHADOW_RESOLUTION
class Swapchain {
    texViews = [];
    passes = [];
    binds = [];
    index = 0;
    setTextureViews(view0, view1) {
        this.texViews = [view0, view1];
    }
    setTextureView(view) {
        this.texViews = [view, view];
    }
    setPasses(pass0, pass1) {
        this.passes = [pass0, pass1];
    }
    setPass(pass) {
        this.passes = [pass, pass];
    }
    setBinds(bind0, bind1) {
        this.binds = [bind0, bind1];
    }
    swap() {
        this.index = (this.index + 1) % this.passes.length;
    }
    get pass() {
        return this.passes[this.index];
    }
    get bind() {
        return this.binds[this.index];
    }
    get texView() {
        return this.texViews[this.index];
    }
    getTexView(index) {
        return this.texViews[index];
    }
}
class Render {
    static viewMatrix;
    static viewMatrix_inplace;
    static projectionMatrix;
    static vp;
    static vp_inv;
    static vp_inplace;
    static vp_sun;
    static vp_glare;
    static vp_shadow_near;
    static vp_shadow_far;
    static vp_shadow_near_uv;
    static vp_shadow_far_uv;
    static invScreenResolution;
    static cameraPosition;
    static sunDirection;
    static settingsBuffer;
    static settings;
    static resolutionBuffer;
    static resolution;
    static depthBufferPipeline;
    static depthBufferBind;
    static shadowNearPipeline;
    static shadowNearBind;
    static shadowFarPipeline;
    static shadowFarBind;
    static volumetricInitPipeline;
    static volumetricInitBind;
    static volumetricAddPipeline;
    static volumetricAddBinds;
    static volumetricHSmoothPipeline;
    static volumetricHSmoothBind;
    static volumetricVSmoothPipeline;
    static volumetricVSmoothBind;
    static volumetricComposePipeline;
    static volumetricComposeBind;
    static contactShadowsPipeline;
    static contactShadowsBind;
    static objectsPipeline;
    static objectsBind;
    static skydomePipeline;
    static skydomeBind;
    static sunPipeline;
    static sunBind;
    static blankPipeline;
    static blankBind;
    static fogPipeline;
    static fogBind;
    static glarePipeline;
    static glareBind;
    static volumetricPostprocessPipeline;
    static volumetricPostprocessBind;
    static downsample4Pipeline;
    static downsample4ExtractBrightnessPipeline;
    static downsample16Pipeline;
    static downsample16ExtractDiffPipeline;
    // auto exposure
    static autoExposureTextures;
    static autoExposurePasses;
    static autoExposureBinds;
    static autoExposurePipelines;
    static autoExposureSwapchain = new Swapchain();
    static autoExposureLastStepSettings;
    static autoExposureLastStepSettingsBuffer;
    static toneMappingPipeline;
    static toneMappingSwapchain = new Swapchain();
    static screenPipeline;
    static screenBind;
    // atlases
    static atlasesTexture;
    static atlases;
    static atlasCache;
    // depth buffer
    static depthBuffer;
    static depthBufferView;
    static depthBufferPass;
    // shadow cascade depth buffers
    static shadowDepthBuffers;
    static shadowDepthBuffersView;
    static shadowDepthBufferNearView;
    static shadowDepthBufferFarView;
    static shadowNearPassDesc;
    static shadowFarPassDesc;
    static contactShadowsTexture;
    static contactShadowsTextureView;
    static contactShadowsPassDesc;
    static volumetricLightingTexture;
    static volumetricLightingTextureView;
    static volumetricLightingPassDesc;
    static volumetricLightingTextureTemp;
    static volumetricLightingTextureTempView;
    // volumetric lighting
    static volumetricLightingBuffer0;
    static volumetricLightingBuffer1;
    static volumetricLightingBufferView0;
    static volumetricLightingBufferView1;
    // render targets
    static mainPassTexture;
    static mainPassTextureView;
    static mainPassDesc;
    static fogPassTexture;
    static fogPassTextureView;
    static fogPassDesc;
    static screenPassDesc;
    static skydome;
    static dithering;
    static sun;
    static sunTexture;
    static blank;
    static glare;
    static glareTexture;
    static fullscreenPlain;
    static volumetricCurveInit;
    static volumetricCurveCompose;
    static volumetricRandomData;
    static debugTextureExample;
    static debugIsDepth;
    static debugTextureView;
    static debugTexturePlane;
    static debugTextureBind;
    static debugTexturePipeline;
    static debugDepthBind;
    static debugDepthPipeline;
    static debugFrustumMeshes;
    static debugFrustumBind;
    static debugFrustumPipeline;
    static perObjectData;
    // TODO keep list of free entries
    static nextPerObjectIndex = 0;
    // shaders
    static blankQuery;
    static blankQueryResult;
    static blankQueryResultAsync;
    static blankQueryState = BlankQueryState.None;
    static blankSamplesCount = 0;
    static glareScale = 0;
    static scene = [];
    static async init() {
        Render.projectionMatrix = create$5();
        Render.viewMatrix = create$5();
        Render.viewMatrix_inplace = create$5();
        Render.debugFrustumMeshes = [];
        Render.handleResize();
        Render.initAtlases();
        Render.setupFrameBuffers();
        Render.createPerObjectData();
        Render.compilerShaders();
        await Render.loadResources();
        Render.createUBOs();
        // await Render.setupShadowsTest()
    }
    static async setupShadowsTest() {
        // add bucket
        const bucket = new Renderable(await ResourceManager.requestMesh("bucket"), await ResourceManager.requestTexture("rock.jpg"));
        Render.setTransform(bucket, new Float32Array([
            // rotation
            -0.08335307240486145, 0.35976338386535645, 0.9053316712379456, 0.2097550332546234,
            // scale
            10,
            // position
            -1160.062744140625, -373.4453125, 182.90625,
        ]));
        Render.addRenderable(bucket);
        /*
        // add ground
        const ground = new Renderable(
            await ResourceManager.requestMesh("ground"),
            await ResourceManager.requestTexture("grass.jpg")
        )
        Render.setTransform(
            ground,
            new Float32Array([
                // rotation
                0, 0, 0, 1,
                // scale
                1,
                // position
                -654.9658203125, -588.56103515625, -85.90818786621094,
            ])
        )
        Render.addRenderable(ground)
        */
        // setup camera
        Render.setCamera(fromValues$4(0, 0, 0), fromValues$4(-0.9772039651870728, 0.1179046481847763, 0.17655348777770996));
    }
    static async loadResources() {
        Render.skydome = new ColoredMeshBuffer(await loadColoredMeshFromURL("build/skydome.cml"));
        Render.dithering = createTexture(await loadTexture("build/dithering.png"));
        Render.sun = new ColoredTexturedMeshBuffer(await loadColoredTexturedMeshFromURL("build/sun.ctml"));
        Render.sunTexture = createTexture(await loadTexture("build/sun.png"));
        Render.blank = new ColoredTexturedMeshBuffer(await loadColoredTexturedMeshFromURL("build/blank.ctml"));
        Render.glare = new ColoredTexturedMeshBuffer(await loadColoredTexturedMeshFromURL("build/glare.ctml"));
        Render.glareTexture = createTexture(await loadTexture("build/glare.png"));
        {
            const curveData = new Uint8Array(await (await fetch("build/volumetric_curve_init_data_rgba.bin")).arrayBuffer());
            const curveWidth = curveData.byteLength / 4;
            Render.volumetricCurveInit = wd.createTexture({
                size: [curveWidth, 1],
                format: "rgba8unorm",
                dimension: "2d",
                usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
            });
            wd.queue.writeTexture({ texture: Render.volumetricCurveInit }, curveData, { bytesPerRow: curveWidth * 4, rowsPerImage: 1 }, { width: curveWidth, height: 1 });
        }
        {
            const curveData = new Uint8Array(await (await fetch("build/volumetric_curve_compose_data_rgba.bin")).arrayBuffer());
            const curveWidth = curveData.byteLength / 4;
            Render.volumetricCurveCompose = wd.createTexture({
                size: [curveWidth, 1],
                format: "rgba8unorm",
                dimension: "2d",
                usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
            });
            wd.queue.writeTexture({ texture: Render.volumetricCurveCompose }, curveData, { bytesPerRow: curveWidth * 4, rowsPerImage: 1 }, { width: curveWidth, height: 1 });
        }
        const randomData = new Uint8Array(await (await fetch("build/volumetric_random_data_tighten.bin")).arrayBuffer());
        Render.volumetricRandomData = wd.createTexture({
            size: [32, 32, 32],
            format: "r8unorm",
            dimension: "3d",
            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
        });
        wd.queue.writeTexture({ texture: Render.volumetricRandomData }, randomData, { bytesPerRow: 32, rowsPerImage: 32 }, { width: 32, height: 32, depthOrArrayLayers: 32 });
        Render.debugTextureExample = wd.createTexture({
            size: [2, 2],
            format: "rgba8unorm",
            dimension: "2d",
            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
        });
        wd.queue.writeTexture({ texture: Render.debugTextureExample }, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 254, 154, 0]), { bytesPerRow: 2 * 4, rowsPerImage: 2 }, { width: 2, height: 2 });
    }
    static async setupTest() {
        Render.fullscreenPlain = new MeshBuffer(await ResourceManager.requestMesh("fullscreen_plane"));
        Render.debugTexturePlane = new MeshBuffer(ResourceManager.generatePlane(0, 0, 640, 640));
    }
    static initAtlases() {
        Render.atlasesTexture = wd.createTexture({
            size: [ATLAS_SIZE, ATLAS_SIZE, MAX_ATLASES_COUNT],
            dimension: "2d",
            format: "rgba8unorm",
            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
        });
        Render.atlases = [];
        Render.atlasCache = new Map();
    }
    static allocateNewAtlas() {
        const atlasNum = Render.atlases.length;
        const atlas = new Atlas(atlasNum, Render.atlasesTexture);
        Render.atlases.push(atlas);
        return atlas;
    }
    static getAtlasSlotForTexture(texture) {
        const slot = Render.atlasCache.get(texture.id);
        if (slot) {
            return slot;
        }
        const newSlot = Render.allocateAndCopyTextureToAtlas(texture);
        Render.atlasCache.set(texture.id, newSlot);
        return newSlot;
    }
    static allocateAndCopyTextureToAtlas(texture) {
        for (const atlas of Render.atlases) {
            const res = atlas.tryAddTexture(texture);
            if (res) {
                return [...res, atlas.num];
            }
        }
        const atlas = Render.allocateNewAtlas();
        const res = atlas.tryAddTexture(texture);
        if (!res) {
            throw new Error("Can't put texture in empty Atlas.");
        }
        return [...res, atlas.num];
    }
    static setupFrameBuffers() {
        Render.contactShadowsTexture = wd.createTexture({
            size: [canvasWebGPU.width, canvasWebGPU.height],
            format: "r32float",
            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,
        });
        Render.contactShadowsTextureView = Render.contactShadowsTexture.createView();
        Render.volumetricLightingTexture = wd.createTexture({
            size: [canvasWebGPU.width, canvasWebGPU.height],
            format: "r32float",
            usage: GPUTextureUsage.TEXTURE_BINDING |
                GPUTextureUsage.RENDER_ATTACHMENT |
                GPUTextureUsage.STORAGE_BINDING,
        });
        Render.volumetricLightingTextureView = Render.volumetricLightingTexture.createView();
        Render.volumetricLightingTextureTemp = wd.createTexture({
            size: [canvasWebGPU.width, canvasWebGPU.height],
            format: "r32float",
            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,
        });
        Render.volumetricLightingTextureTempView = Render.volumetricLightingTextureTemp.createView();
        Render.volumetricLightingBuffer0 = wd.createTexture({
            size: [VOLUMETRIC_TEX_WIDTH, VOLUMETRIC_TEX_HEIGHT, VOLUMETRIC_TEX_DEPTH],
            // FIXME supposed to be r16float, memory usage x4
            format: "rgba16float",
            dimension: "3d",
            usage: GPUTextureUsage.TEXTURE_BINDING |
                GPUTextureUsage.STORAGE_BINDING |
                GPUTextureUsage.COPY_SRC,
        });
        Render.volumetricLightingBufferView0 = Render.volumetricLightingBuffer0.createView();
        Render.volumetricLightingBuffer1 = wd.createTexture({
            size: [VOLUMETRIC_TEX_WIDTH, VOLUMETRIC_TEX_HEIGHT, VOLUMETRIC_TEX_DEPTH],
            // FIXME supposed to be r16float, memory usage x4
            format: "rgba16float",
            dimension: "3d",
            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,
        });
        Render.volumetricLightingBufferView1 = Render.volumetricLightingBuffer1.createView();
        Render.mainPassTexture = createFloatTexture(canvasWebGPU.width, canvasWebGPU.height);
        Render.mainPassTextureView = Render.mainPassTexture.createView();
        Render.depthBuffer = wd.createTexture({
            size: [canvasWebGPU.width, canvasWebGPU.height],
            format: "depth24plus",
            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,
        });
        Render.depthBufferView = Render.depthBuffer.createView();
        Render.shadowDepthBuffers = wd.createTexture({
            size: [SHADOW_RESOLUTION, SHADOW_RESOLUTION, 2],
            format: "depth24plus",
            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,
        });
        Render.shadowDepthBuffersView = Render.shadowDepthBuffers.createView();
        Render.shadowDepthBufferNearView = Render.shadowDepthBuffers.createView({
            baseArrayLayer: 0,
            arrayLayerCount: 1,
            dimension: "2d",
        });
        Render.shadowDepthBufferFarView = Render.shadowDepthBuffers.createView({
            baseArrayLayer: 1,
            arrayLayerCount: 1,
            dimension: "2d",
        });
        Render.blankQuery = wd.createQuerySet({
            type: "occlusion",
            count: 1,
        });
        Render.blankQueryResult = wd.createBuffer({
            size: QUERY_BUFFER_SIZE,
            usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC,
        });
        Render.blankQueryResultAsync = wd.createBuffer({
            size: QUERY_BUFFER_SIZE,
            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,
        });
        Render.shadowNearPassDesc = {
            colorAttachments: [],
            depthStencilAttachment: {
                view: Render.shadowDepthBufferNearView,
                depthClearValue: 1.0,
                depthLoadOp: "clear",
                depthStoreOp: "store",
            },
        };
        Render.shadowFarPassDesc = {
            colorAttachments: [],
            depthStencilAttachment: {
                view: Render.shadowDepthBufferFarView,
                depthClearValue: 1.0,
                depthLoadOp: "clear",
                depthStoreOp: "store",
            },
        };
        Render.contactShadowsPassDesc = {
            colorAttachments: [
                {
                    view: Render.contactShadowsTextureView,
                    clearValue: {
                        r: 1,
                        g: 1,
                        b: 1,
                        a: 1,
                    },
                    loadOp: "clear",
                    storeOp: "store",
                },
            ],
        };
        Render.volumetricLightingPassDesc = {
            colorAttachments: [
                {
                    view: Render.volumetricLightingTextureView,
                    clearValue: {
                        r: 1,
                        g: 1,
                        b: 1,
                        a: 1,
                    },
                    loadOp: "clear",
                    storeOp: "store",
                },
            ],
        };
        Render.mainPassDesc = {
            colorAttachments: [
                {
                    view: Render.mainPassTextureView,
                    clearValue: {
                        r: 0.284532,
                        g: 0.365823,
                        b: 0.423077,
                        a: 1.0,
                    },
                    loadOp: "clear",
                    storeOp: "store",
                },
            ],
            depthStencilAttachment: {
                view: Render.depthBufferView,
                depthClearValue: 1.0,
                depthLoadOp: "clear",
                depthStoreOp: "store",
            },
            occlusionQuerySet: Render.blankQuery,
        };
        Render.depthBufferPass = {
            colorAttachments: [],
            depthStencilAttachment: {
                view: Render.depthBufferView,
                depthClearValue: 1.0,
                depthLoadOp: "clear",
                depthStoreOp: "store",
            },
        };
        // fog pass
        Render.fogPassTexture = createFloatTexture(canvasWebGPU.width, canvasWebGPU.height);
        Render.fogPassTextureView = Render.fogPassTexture.createView();
        Render.fogPassDesc = {
            colorAttachments: [
                {
                    view: Render.fogPassTextureView,
                    clearValue: {
                        r: 0,
                        g: 0,
                        b: 0,
                        a: 1,
                    },
                    loadOp: "clear",
                    storeOp: "store",
                },
            ],
        };
        // auto exposure
        {
            Render.autoExposureTextures = [];
            Render.autoExposurePasses = [];
            let w = wg.canvas.width;
            let h = wg.canvas.height;
            let inputTexWidth = w;
            let inputTexHeight = h;
            let inputTexView = Render.fogPassTextureView;
            // eslint-disable-next-line no-constant-condition
            while (true) {
                w = Math.max(2, w / 4);
                h = Math.max(2, h / 4);
                if (w === 2 && h === 2) {
                    break;
                }
                const outputTexWidth = Math.ceil(w);
                const outputTexHeight = Math.ceil(h);
                const outputTex = createFloatTexture(outputTexWidth, outputTexHeight);
                const outputTexView = outputTex.createView();
                const pass = {
                    colorAttachments: [
                        {
                            view: outputTexView,
                            clearValue: {
                                r: 0,
                                g: 0,
                                b: 0,
                                a: 1,
                            },
                            loadOp: "clear",
                            storeOp: "store",
                        },
                    ],
                };
                Render.autoExposureTextures.push({
                    srcW: inputTexWidth,
                    srcH: inputTexHeight,
                    srcTexView: inputTexView,
                    dstW: outputTexWidth,
                    dstH: outputTexHeight,
                    dstTexView: outputTexView,
                });
                Render.autoExposurePasses.push(pass);
                inputTexWidth = outputTexWidth;
                inputTexHeight = outputTexHeight;
                inputTexView = outputTexView;
            }
            const outputTexView0 = createFloatTexture(2, 2).createView();
            const outputTexView1 = createFloatTexture(2, 2).createView();
            const pass0 = {
                colorAttachments: [
                    {
                        view: outputTexView0,
                        clearValue: {
                            r: 0,
                            g: 0,
                            b: 0,
                            a: 1,
                        },
                        loadOp: "clear",
                        storeOp: "store",
                    },
                ],
            };
            const pass1 = {
                colorAttachments: [
                    {
                        view: outputTexView1,
                        clearValue: {
                            r: 0,
                            g: 0,
                            b: 0,
                            a: 1,
                        },
                        loadOp: "clear",
                        storeOp: "store",
                    },
                ],
            };
            Render.autoExposureSwapchain.setTextureViews(outputTexView0, outputTexView1);
            Render.autoExposureSwapchain.setPasses(pass0, pass1);
        }
        // tone mapping pass
        const toneMappingPassTexture = createTextureByFormat(canvasWebGPU.width, canvasWebGPU.height, presentationFormat);
        const toneMappingPassTextureView = toneMappingPassTexture.createView();
        const toneMappingPassDesc = {
            colorAttachments: [
                {
                    view: toneMappingPassTextureView,
                    clearValue: {
                        r: 0,
                        g: 0,
                        b: 0,
                        a: 1,
                    },
                    loadOp: "clear",
                    storeOp: "store",
                },
            ],
        };
        Render.toneMappingSwapchain.setTextureView(toneMappingPassTextureView);
        Render.toneMappingSwapchain.setPass(toneMappingPassDesc);
        // screen
        Render.screenPassDesc = {
            colorAttachments: [
                {
                    view: null,
                    clearValue: {
                        r: 0,
                        g: 0,
                        b: 0,
                        a: 1,
                    },
                    loadOp: "clear",
                    storeOp: "store",
                },
            ],
        };
        // Render.debugTextureView = Render.autoExposureSwapchain.getTexView(0)
        // Render.debugTextureView = Render.contactShadowsTextureView
        // Render.debugTextureView = Render.shadowDepthBufferNearView
        // Render.debugIsDepth = true
    }
    static createPerObjectData() {
        Render.perObjectData = wd.createBuffer({
            size: PER_OBJECT_DATA_BUFFER_SIZE * PER_OBJECT_DATA_ENTRY_SIZE * 4,
            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,
        });
    }
    static allocatePerObjectInfoIndex() {
        if (Render.nextPerObjectIndex + 1 > PER_OBJECT_DATA_BUFFER_SIZE) {
            throw new Error("Out of space in PerObjectData.");
        }
        const result = Render.nextPerObjectIndex;
        Render.nextPerObjectIndex += 1;
        return result;
    }
    static updatePerObjectData(renderable) {
        if (renderable.perObjectDataIndex === undefined) {
            return;
        }
        if (renderable.atlasNum === undefined) {
            throw "Object doesn't have an atlas";
        }
        ramPerObjectDataBuffer.set([
            // pixel 0
            renderable.rotation[0],
            renderable.rotation[1],
            renderable.rotation[2],
            renderable.scale,
            // pixel 1
            renderable.position[0],
            renderable.position[1],
            renderable.position[2],
            renderable.atlasNum,
        ]);
        const i = renderable.perObjectDataIndex;
        const byteOffset = i * PER_OBJECT_DATA_ENTRY_SIZE * 4;
        wd.queue.writeBuffer(Render.perObjectData, byteOffset, ramPerObjectDataBuffer, 0, PER_OBJECT_DATA_ENTRY_SIZE);
    }
    static createUBOs() {
        const linearRepeatSampler = wd.createSampler({
            magFilter: "linear",
            minFilter: "linear",
            mipmapFilter: "linear",
            maxAnisotropy: 16,
            addressModeU: "repeat",
            addressModeV: "repeat",
        });
        const linearClampSampler = wd.createSampler({
            magFilter: "linear",
            minFilter: "linear",
            mipmapFilter: "linear",
            addressModeU: "clamp-to-edge",
            addressModeV: "clamp-to-edge",
        });
        const linearMirrorSampler = wd.createSampler({
            magFilter: "linear",
            minFilter: "linear",
            mipmapFilter: "linear",
            addressModeU: "mirror-repeat",
            addressModeV: "mirror-repeat",
        });
        const pointClampSampler = wd.createSampler({
            magFilter: "nearest",
            minFilter: "nearest",
            mipmapFilter: "nearest",
            addressModeU: "clamp-to-edge",
            addressModeV: "clamp-to-edge",
        });
        const pointRepeatSampler = wd.createSampler({
            magFilter: "nearest",
            minFilter: "nearest",
            mipmapFilter: "nearest",
            addressModeU: "repeat",
            addressModeV: "repeat",
        });
        const comparisonSampler = wd.createSampler({
            magFilter: "linear",
            minFilter: "linear",
            mipmapFilter: "linear",
            compare: "less",
            addressModeU: "clamp-to-edge",
            addressModeV: "clamp-to-edge",
        });
        Render.settingsBuffer = new Float32Array(SETTINGS_SIZE);
        Render.resolutionBuffer = new Int32Array(2);
        let pos = 0;
        Render.vp = new Float32Array(Render.settingsBuffer.buffer, pos, MAT4_FLOAT_SIZE);
        pos += MAT4_BYTE_SIZE;
        Render.vp_inplace = new Float32Array(Render.settingsBuffer.buffer, pos, MAT4_FLOAT_SIZE);
        pos += MAT4_BYTE_SIZE;
        Render.vp_sun = new Float32Array(Render.settingsBuffer.buffer, pos, MAT4_FLOAT_SIZE);
        pos += MAT4_BYTE_SIZE;
        Render.vp_glare = new Float32Array(Render.settingsBuffer.buffer, pos, MAT4_FLOAT_SIZE);
        pos += MAT4_BYTE_SIZE;
        Render.vp_shadow_near = new Float32Array(Render.settingsBuffer.buffer, pos, MAT4_FLOAT_SIZE);
        pos += MAT4_BYTE_SIZE;
        Render.vp_shadow_far = new Float32Array(Render.settingsBuffer.buffer, pos, MAT4_FLOAT_SIZE);
        pos += MAT4_BYTE_SIZE;
        Render.vp_shadow_near_uv = new Float32Array(Render.settingsBuffer.buffer, pos, MAT4_FLOAT_SIZE);
        pos += MAT4_BYTE_SIZE;
        Render.vp_shadow_far_uv = new Float32Array(Render.settingsBuffer.buffer, pos, MAT4_FLOAT_SIZE);
        pos += MAT4_BYTE_SIZE;
        Render.vp_inv = new Float32Array(Render.settingsBuffer.buffer, pos, MAT4_FLOAT_SIZE);
        pos += MAT4_BYTE_SIZE;
        Render.invScreenResolution = new Float32Array(Render.settingsBuffer.buffer, pos, VEC2_FLOAT_SIZE);
        pos += VEC2_BYTE_SIZE_ALIGN;
        Render.cameraPosition = new Float32Array(Render.settingsBuffer.buffer, pos, VEC3_FLOAT_SIZE);
        pos += VEC3_BYTE_SIZE_ALIGN;
        Render.sunDirection = new Float32Array(Render.settingsBuffer.buffer, pos, VEC3_FLOAT_SIZE);
        pos += VEC3_BYTE_SIZE_ALIGN;
        // settings for objects
        Render.settings = wd.createBuffer({
            size: SETTINGS_SIZE * 4,
            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
        });
        Render.resolution = wd.createBuffer({
            size: 2 * 4,
            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
        });
        const ditheringView = Render.dithering.createView();
        const volumetricCurveInitView = Render.volumetricCurveInit.createView();
        const volumetricCurveComposeView = Render.volumetricCurveCompose.createView();
        Render.shadowNearBind = wd.createBindGroup({
            layout: Render.shadowNearPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: Render.settings,
                    },
                },
                {
                    binding: 1,
                    resource: {
                        buffer: Render.perObjectData,
                    },
                },
            ],
        });
        Render.shadowFarBind = wd.createBindGroup({
            layout: Render.shadowFarPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: Render.settings,
                    },
                },
                {
                    binding: 1,
                    resource: {
                        buffer: Render.perObjectData,
                    },
                },
            ],
        });
        Render.volumetricInitBind = wd.createBindGroup({
            layout: Render.volumetricInitPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: Render.settings,
                    },
                },
                {
                    binding: 1,
                    resource: pointClampSampler,
                },
                {
                    binding: 2,
                    resource: linearClampSampler,
                },
                {
                    binding: 3,
                    resource: linearMirrorSampler,
                },
                {
                    binding: 4,
                    resource: Render.shadowDepthBuffersView,
                },
                {
                    binding: 5,
                    resource: volumetricCurveInitView,
                },
                {
                    binding: 6,
                    resource: Render.volumetricRandomData.createView(),
                },
                {
                    binding: 7,
                    resource: Render.volumetricLightingBufferView0,
                },
                {
                    binding: 8,
                    resource: Render.volumetricLightingBufferView1,
                },
            ],
        });
        Render.volumetricAddBinds = [];
        const swapChain = [
            Render.volumetricLightingBufferView0,
            Render.volumetricLightingBufferView1,
        ];
        for (let i = 0; i < VOLUMETRIC_TEX_DEPTH; i++) {
            const input = swapChain[i % swapChain.length];
            const output = swapChain[(i + 1) % swapChain.length];
            const z = 1 + i;
            const zBuffer = wd.createBuffer({
                size: 4,
                usage: GPUBufferUsage.UNIFORM,
                mappedAtCreation: true,
            });
            const zData = new Uint32Array(zBuffer.getMappedRange());
            zData[0] = z;
            zBuffer.unmap();
            const bind = wd.createBindGroup({
                layout: Render.volumetricAddPipeline.getBindGroupLayout(0),
                entries: [
                    {
                        binding: 0,
                        resource: {
                            buffer: zBuffer,
                        },
                    },
                    {
                        binding: 1,
                        resource: input,
                    },
                    {
                        binding: 2,
                        resource: output,
                    },
                ],
            });
            Render.volumetricAddBinds.push(bind);
        }
        Render.volumetricHSmoothBind = wd.createBindGroup({
            layout: Render.volumetricHSmoothPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: Render.resolution,
                    },
                },
                {
                    binding: 1,
                    resource: Render.volumetricLightingTextureView,
                },
                {
                    binding: 2,
                    resource: Render.depthBufferView,
                },
                {
                    binding: 3,
                    resource: Render.volumetricLightingTextureTempView,
                },
            ],
        });
        Render.volumetricVSmoothBind = wd.createBindGroup({
            layout: Render.volumetricVSmoothPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: Render.resolution,
                    },
                },
                {
                    binding: 1,
                    resource: Render.volumetricLightingTextureTempView,
                },
                {
                    binding: 2,
                    resource: Render.depthBufferView,
                },
                {
                    binding: 3,
                    resource: Render.volumetricLightingTextureView,
                },
            ],
        });
        Render.volumetricComposeBind = wd.createBindGroup({
            layout: Render.volumetricComposePipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: pointClampSampler,
                },
                {
                    binding: 1,
                    resource: linearClampSampler,
                },
                {
                    binding: 2,
                    resource: ditheringView,
                },
                {
                    binding: 3,
                    resource: Render.depthBufferView,
                },
                {
                    binding: 4,
                    resource: Render.volumetricLightingBufferView0,
                },
                {
                    binding: 5,
                    resource: volumetricCurveComposeView,
                },
            ],
        });
        Render.contactShadowsBind = wd.createBindGroup({
            layout: Render.contactShadowsPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: Render.settings,
                    },
                },
                {
                    binding: 1,
                    resource: Render.depthBufferView,
                },
                {
                    binding: 2,
                    resource: Render.shadowDepthBuffersView,
                },
                {
                    binding: 3,
                    resource: comparisonSampler,
                },
            ],
        });
        Render.depthBufferBind = wd.createBindGroup({
            layout: Render.depthBufferPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: Render.settings,
                    },
                },
                {
                    binding: 1,
                    resource: {
                        buffer: Render.perObjectData,
                    },
                },
            ],
        });
        Render.objectsBind = wd.createBindGroup({
            layout: Render.objectsPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: Render.settings,
                    },
                },
                {
                    binding: 1,
                    resource: {
                        buffer: Render.perObjectData,
                    },
                },
                {
                    binding: 2,
                    resource: pointRepeatSampler,
                },
                {
                    binding: 3,
                    resource: Render.atlasesTexture.createView(),
                },
                {
                    binding: 4,
                    resource: Render.contactShadowsTextureView,
                },
            ],
        });
        Render.skydomeBind = wd.createBindGroup({
            layout: Render.skydomePipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: Render.settings,
                    },
                },
                {
                    binding: 1,
                    resource: pointRepeatSampler,
                },
                {
                    binding: 2,
                    resource: ditheringView,
                },
            ],
        });
        Render.sunBind = wd.createBindGroup({
            layout: Render.sunPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: Render.settings,
                    },
                },
                {
                    binding: 1,
                    resource: linearRepeatSampler,
                },
                {
                    binding: 2,
                    resource: Render.sunTexture.createView(),
                },
            ],
        });
        Render.blankBind = wd.createBindGroup({
            layout: Render.blankPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: Render.settings,
                    },
                },
            ],
        });
        Render.fogBind = wd.createBindGroup({
            layout: Render.fogPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: Render.mainPassTextureView,
                },
                {
                    binding: 1,
                    resource: Render.depthBufferView,
                },
            ],
        });
        Render.volumetricPostprocessBind = wd.createBindGroup({
            layout: Render.volumetricPostprocessPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: Render.volumetricLightingTextureView,
                },
            ],
        });
        // auto exposure
        {
            Render.autoExposureBinds = [];
            for (let i = 0; i < Render.autoExposureTextures.length; i++) {
                const { srcW, srcH, srcTexView } = Render.autoExposureTextures[i];
                const pipeline = Render.autoExposurePipelines[i];
                const invResolutionBuffer = wd.createBuffer({
                    size: 8,
                    usage: GPUBufferUsage.UNIFORM,
                    mappedAtCreation: true,
                });
                const zData = new Float32Array(invResolutionBuffer.getMappedRange());
                zData[0] = 1 / srcW;
                zData[1] = 1 / srcH;
                invResolutionBuffer.unmap();
                const bind = wd.createBindGroup({
                    layout: pipeline.getBindGroupLayout(0),
                    entries: [
                        {
                            binding: 0,
                            resource: {
                                buffer: invResolutionBuffer,
                            },
                        },
                        {
                            binding: 1,
                            resource: linearClampSampler,
                        },
                        {
                            binding: 2,
                            resource: srcTexView,
                        },
                    ],
                });
                Render.autoExposureBinds.push(bind);
            }
            // swapchain
            const { dstW, dstH, dstTexView } = Render.autoExposureTextures[Render.autoExposureTextures.length - 1];
            Render.autoExposureLastStepSettingsBuffer = new Float32Array(4);
            Render.autoExposureLastStepSettingsBuffer[0] = 1 / dstW;
            Render.autoExposureLastStepSettingsBuffer[1] = 1 / dstH;
            const settingsBuffer = wd.createBuffer({
                size: 16,
                usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
                mappedAtCreation: false,
            });
            const bind0 = wd.createBindGroup({
                layout: Render.downsample16ExtractDiffPipeline.getBindGroupLayout(0),
                entries: [
                    {
                        binding: 0,
                        resource: {
                            buffer: settingsBuffer,
                        },
                    },
                    {
                        binding: 1,
                        resource: linearClampSampler,
                    },
                    {
                        binding: 2,
                        resource: pointClampSampler,
                    },
                    {
                        binding: 3,
                        resource: dstTexView,
                    },
                    // prev texture
                    {
                        binding: 4,
                        resource: Render.autoExposureSwapchain.getTexView(1),
                    },
                ],
            });
            const bind1 = wd.createBindGroup({
                layout: Render.downsample16ExtractDiffPipeline.getBindGroupLayout(0),
                entries: [
                    {
                        binding: 0,
                        resource: {
                            buffer: settingsBuffer,
                        },
                    },
                    {
                        binding: 1,
                        resource: linearClampSampler,
                    },
                    {
                        binding: 2,
                        resource: pointClampSampler,
                    },
                    {
                        binding: 3,
                        resource: dstTexView,
                    },
                    // prev texture
                    {
                        binding: 4,
                        resource: Render.autoExposureSwapchain.getTexView(0),
                    },
                ],
            });
            Render.autoExposureSwapchain.setBinds(bind0, bind1);
            Render.autoExposureLastStepSettings = settingsBuffer;
        }
        // tone mapping
        const toneMappingBind0 = wd.createBindGroup({
            layout: Render.toneMappingPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: linearClampSampler,
                },
                {
                    binding: 1,
                    resource: Render.fogPassTextureView,
                },
                {
                    binding: 2,
                    resource: Render.autoExposureSwapchain.getTexView(0),
                },
            ],
        });
        const toneMappingBind1 = wd.createBindGroup({
            layout: Render.toneMappingPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: linearClampSampler,
                },
                {
                    binding: 1,
                    resource: Render.fogPassTextureView,
                },
                {
                    binding: 2,
                    resource: Render.autoExposureSwapchain.getTexView(1),
                },
            ],
        });
        Render.toneMappingSwapchain.setBinds(toneMappingBind0, toneMappingBind1);
        // screen
        Render.screenBind = wd.createBindGroup({
            layout: Render.screenPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: linearClampSampler,
                },
                {
                    binding: 1,
                    // resource: Render.debugTextureExample.createView(),
                    resource: Render.toneMappingSwapchain.getTexView(0),
                },
            ],
        });
        Render.glareBind = wd.createBindGroup({
            layout: Render.glarePipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: Render.settings,
                    },
                },
                {
                    binding: 1,
                    resource: linearRepeatSampler,
                },
                {
                    binding: 2,
                    resource: pointRepeatSampler,
                },
                {
                    binding: 3,
                    resource: Render.glareTexture.createView(),
                },
                {
                    binding: 4,
                    resource: ditheringView,
                },
            ],
        });
        if (Render.debugTextureView) {
            Render.debugTextureBind = wd.createBindGroup({
                layout: Render.debugTexturePipeline.getBindGroupLayout(0),
                entries: [
                    {
                        binding: 0,
                        resource: Render.debugTextureView,
                    },
                ],
            });
            Render.debugDepthBind = wd.createBindGroup({
                layout: Render.debugDepthPipeline.getBindGroupLayout(0),
                entries: [
                    {
                        binding: 0,
                        resource: linearRepeatSampler,
                    },
                    {
                        binding: 1,
                        resource: Render.debugTextureView,
                    },
                ],
            });
        }
        Render.debugFrustumBind = wd.createBindGroup({
            layout: Render.debugFrustumPipeline.getBindGroupLayout(0),
            entries: [
                {
                    binding: 0,
                    resource: {
                        buffer: Render.settings,
                    },
                },
            ],
        });
    }
    static compilerShaders() {
        const primitive = {
            topology: "triangle-list",
            cullMode: "back",
            unclippedDepth: true,
        };
        const passthroughShaderVert = wd.createShaderModule({ code: passthroughVert });
        const passthroughShaderFrag = wd.createShaderModule({ code: passthroughFrag });
        const passthroughShaderFrag_Debug = wd.createShaderModule({ code: passthroughFrag_Debug });
        // objects
        const objectsShadowNearShaderVert = wd.createShaderModule({ code: objectsShadowNearVert });
        Render.shadowNearPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: objectsShadowNearShaderVert,
                entryPoint: "main",
                buffers: BufferChunk.buffers,
            },
            depthStencil: {
                depthWriteEnabled: true,
                depthCompare: "less",
                format: "depth24plus",
                depthBiasClamp: -100,
            },
            primitive,
        });
        const objectsShadowFarShaderVert = wd.createShaderModule({ code: objectsShadowFarVert });
        Render.shadowFarPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: objectsShadowFarShaderVert,
                entryPoint: "main",
                buffers: BufferChunk.buffers,
            },
            depthStencil: {
                depthWriteEnabled: true,
                depthCompare: "less",
                format: "depth24plus",
                depthBiasClamp: -100,
            },
            primitive,
        });
        // volumetric lighting
        const volumetricInitShaderComp = wd.createShaderModule({ code: volumetricInitComp });
        Render.volumetricInitPipeline = wd.createComputePipeline({
            layout: "auto",
            compute: {
                module: volumetricInitShaderComp,
                entryPoint: "main",
            },
        });
        const volumetricAddShaderComp = wd.createShaderModule({ code: volumetricAddComp });
        Render.volumetricAddPipeline = wd.createComputePipeline({
            layout: "auto",
            compute: {
                module: volumetricAddShaderComp,
                entryPoint: "main",
            },
        });
        const volumetricComposeShaderFrag = wd.createShaderModule({ code: volumetricComposeFrag });
        Render.volumetricComposePipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: passthroughShaderVert,
                entryPoint: "main",
                buffers: MeshBuffer.buffers,
            },
            fragment: {
                module: volumetricComposeShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "r32float",
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            primitive,
        });
        const volumetricHSmoothShaderComp = wd.createShaderModule({
            code: volumetricHSmoothComp,
        });
        Render.volumetricHSmoothPipeline = wd.createComputePipeline({
            layout: "auto",
            compute: {
                module: volumetricHSmoothShaderComp,
                entryPoint: "main",
            },
        });
        const volumetricVSmoothShaderComp = wd.createShaderModule({
            code: volumetricVSmoothComp,
        });
        Render.volumetricVSmoothPipeline = wd.createComputePipeline({
            layout: "auto",
            compute: {
                module: volumetricVSmoothShaderComp,
                entryPoint: "main",
            },
        });
        // contact shadows
        const contactShadowsShaderFrag = wd.createShaderModule({ code: contactShadowsFrag });
        Render.contactShadowsPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: passthroughShaderVert,
                entryPoint: "main",
                buffers: MeshBuffer.buffers,
            },
            fragment: {
                module: contactShadowsShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "r32float",
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            primitive,
        });
        const objectsDepthBufferShaderVert = wd.createShaderModule({ code: objectsDepthBufferVert });
        Render.depthBufferPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: objectsDepthBufferShaderVert,
                entryPoint: "main",
                buffers: BufferChunk.buffers,
            },
            depthStencil: {
                depthWriteEnabled: true,
                depthCompare: "less",
                format: "depth24plus",
                depthBiasClamp: -100,
            },
            primitive,
        });
        const objectsShaderVert = wd.createShaderModule({ code: objectsVert });
        const objectsShaderFrag = wd.createShaderModule({ code: objectsFrag });
        Render.objectsPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: objectsShaderVert,
                entryPoint: "main",
                buffers: BufferChunk.buffers,
            },
            fragment: {
                module: objectsShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "rg11b10ufloat",
                        writeMask: GPUColorWrite.RED | GPUColorWrite.GREEN | GPUColorWrite.BLUE,
                        blend: {
                            color: {
                                operation: "add",
                                srcFactor: "src-alpha",
                                dstFactor: "one-minus-src-alpha",
                            },
                            alpha: {
                                operation: "add",
                                srcFactor: "src-alpha",
                                dstFactor: "one-minus-src-alpha",
                            },
                        },
                    },
                ],
            },
            depthStencil: {
                depthWriteEnabled: true,
                depthCompare: "less",
                format: "depth24plus",
            },
            primitive,
        });
        const skydomeShaderVert = wd.createShaderModule({ code: skydomeVert });
        const skydomeShaderFrag = wd.createShaderModule({ code: skydomeFrag });
        Render.skydomePipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: skydomeShaderVert,
                entryPoint: "main",
                buffers: ColoredMeshBuffer.buffers,
            },
            fragment: {
                module: skydomeShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "rg11b10ufloat",
                        blend: {
                            color: {
                                operation: "add",
                                srcFactor: "src-alpha",
                                dstFactor: "one-minus-src-alpha",
                            },
                            alpha: {
                                operation: "add",
                                srcFactor: "src-alpha",
                                dstFactor: "one-minus-src-alpha",
                            },
                        },
                        writeMask: GPUColorWrite.RED | GPUColorWrite.GREEN | GPUColorWrite.BLUE,
                    },
                ],
            },
            depthStencil: {
                depthWriteEnabled: false,
                depthCompare: "always",
                format: "depth24plus",
            },
            primitive,
        });
        const sunShaderVert = wd.createShaderModule({ code: sunVert });
        const sunShaderFrag = wd.createShaderModule({ code: sunFrag });
        Render.sunPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: sunShaderVert,
                entryPoint: "main",
                buffers: ColoredTexturedMeshBuffer.buffers,
            },
            fragment: {
                module: sunShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "rg11b10ufloat",
                        blend: {
                            color: {
                                operation: "add",
                                srcFactor: "src-alpha",
                                dstFactor: "one",
                            },
                            alpha: {
                                operation: "add",
                                srcFactor: "src-alpha",
                                dstFactor: "one",
                            },
                        },
                        writeMask: GPUColorWrite.RED | GPUColorWrite.GREEN | GPUColorWrite.BLUE,
                    },
                ],
            },
            depthStencil: {
                depthWriteEnabled: false,
                depthCompare: "always",
                format: "depth24plus",
            },
            primitive,
        });
        const blankShaderVert = wd.createShaderModule({ code: blankVert });
        const blankShaderFrag = wd.createShaderModule({ code: blankFrag });
        Render.blankPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: blankShaderVert,
                entryPoint: "main",
                buffers: ColoredTexturedMeshBuffer.buffers,
            },
            fragment: {
                module: blankShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "rg11b10ufloat",
                        blend: {
                            color: {
                                operation: "add",
                                srcFactor: "src-alpha",
                                dstFactor: "one",
                            },
                            alpha: {
                                operation: "add",
                                srcFactor: "src-alpha",
                                dstFactor: "one",
                            },
                        },
                        writeMask: GPUColorWrite.RED | GPUColorWrite.GREEN | GPUColorWrite.BLUE,
                    },
                ],
            },
            depthStencil: {
                depthWriteEnabled: false,
                depthCompare: "less-equal",
                format: "depth24plus",
            },
            primitive,
        });
        const fogShaderFrag = wd.createShaderModule({ code: fogFrag });
        Render.fogPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: passthroughShaderVert,
                entryPoint: "main",
                buffers: MeshBuffer.buffers,
            },
            fragment: {
                module: fogShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "rg11b10ufloat",
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            primitive,
        });
        const glareShaderVert = wd.createShaderModule({ code: glareVert });
        const glareShaderFrag = wd.createShaderModule({ code: glareFrag });
        Render.glarePipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: glareShaderVert,
                entryPoint: "main",
                buffers: ColoredTexturedMeshBuffer.buffers,
            },
            fragment: {
                module: glareShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "rg11b10ufloat",
                        blend: {
                            color: {
                                operation: "add",
                                srcFactor: "src-alpha",
                                dstFactor: "one",
                            },
                            alpha: {
                                operation: "add",
                                srcFactor: "src-alpha",
                                dstFactor: "one",
                            },
                        },
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            primitive,
        });
        const volumetricPostprocessShaderFrag = wd.createShaderModule({
            code: volumetricPostprocessFrag,
        });
        Render.volumetricPostprocessPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: passthroughShaderVert,
                entryPoint: "main",
                buffers: MeshBuffer.buffers,
            },
            fragment: {
                module: volumetricPostprocessShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "rg11b10ufloat",
                        blend: {
                            color: {
                                operation: "add",
                                srcFactor: "one",
                                dstFactor: "one",
                            },
                            alpha: {
                                operation: "add",
                                srcFactor: "one",
                                dstFactor: "one",
                            },
                        },
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            primitive,
        });
        const downsample4ShaderFrag = wd.createShaderModule({ code: downsample4Frag });
        Render.downsample4Pipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: passthroughShaderVert,
                entryPoint: "main",
                buffers: MeshBuffer.buffers,
            },
            fragment: {
                module: downsample4ShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "rg11b10ufloat",
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            primitive,
        });
        const downsample4ExtractBrightnessShaderFrag = wd.createShaderModule({
            code: downsample4ExtractBrightnessFrag,
        });
        Render.downsample4ExtractBrightnessPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: passthroughShaderVert,
                entryPoint: "main",
                buffers: MeshBuffer.buffers,
            },
            fragment: {
                module: downsample4ExtractBrightnessShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "rg11b10ufloat",
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            primitive,
        });
        const downsample16ShaderFrag = wd.createShaderModule({ code: downsample16Frag });
        Render.downsample16Pipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: passthroughShaderVert,
                entryPoint: "main",
                buffers: MeshBuffer.buffers,
            },
            fragment: {
                module: downsample16ShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "rg11b10ufloat",
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            primitive,
        });
        const downsample16ExtractDiffShaderFrag = wd.createShaderModule({
            code: downsample16ExtractDiffFrag,
        });
        Render.downsample16ExtractDiffPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: passthroughShaderVert,
                entryPoint: "main",
                buffers: MeshBuffer.buffers,
            },
            fragment: {
                module: downsample16ExtractDiffShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "rg11b10ufloat",
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            primitive,
        });
        // autoexposure
        Render.autoExposurePipelines = new Array(Render.autoExposurePasses.length);
        Render.autoExposurePipelines[0] = Render.downsample4Pipeline;
        Render.autoExposurePipelines[1] = Render.downsample4ExtractBrightnessPipeline;
        for (let i = 2; i < Render.autoExposurePipelines.length; i++) {
            Render.autoExposurePipelines[i] = Render.downsample16Pipeline;
        }
        // tone mapping
        const toneMappingShaderFrag = wd.createShaderModule({
            code: toneMappingFrag,
        });
        Render.toneMappingPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: passthroughShaderVert,
                entryPoint: "main",
                buffers: MeshBuffer.buffers,
            },
            fragment: {
                module: toneMappingShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: presentationFormat,
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            primitive,
        });
        // screen
        Render.screenPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: passthroughShaderVert,
                entryPoint: "main",
                buffers: MeshBuffer.buffers,
            },
            fragment: {
                // module: passthroughShaderFrag_Debug,
                module: passthroughShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: presentationFormat,
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            primitive,
        });
        const passthroughTexShaderFrag = wd.createShaderModule({ code: passthroughTexFrag });
        Render.debugTexturePipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: passthroughShaderVert,
                entryPoint: "main",
                buffers: MeshBuffer.buffers,
            },
            fragment: {
                module: passthroughTexShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: presentationFormat,
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            primitive,
        });
        const passthroughDepthShaderFrag = wd.createShaderModule({ code: passthroughDepthFrag });
        Render.debugDepthPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: passthroughShaderVert,
                entryPoint: "main",
                buffers: MeshBuffer.buffers,
            },
            fragment: {
                module: passthroughDepthShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: presentationFormat,
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            primitive,
        });
        const debugFrustumShaderVert = wd.createShaderModule({ code: debugFrustumVert });
        const debugFrustumShaderFrag = wd.createShaderModule({ code: debugFrustumFrag });
        Render.debugFrustumPipeline = wd.createRenderPipeline({
            layout: "auto",
            vertex: {
                module: debugFrustumShaderVert,
                entryPoint: "main",
                buffers: MeshBuffer.buffers,
            },
            fragment: {
                module: debugFrustumShaderFrag,
                entryPoint: "main",
                targets: [
                    {
                        format: "rg11b10ufloat",
                        blend: {
                            color: {
                                operation: "add",
                                srcFactor: "src-alpha",
                                dstFactor: "one",
                            },
                            alpha: {
                                operation: "add",
                                srcFactor: "src-alpha",
                                dstFactor: "one",
                            },
                        },
                        writeMask: GPUColorWrite.ALL,
                    },
                ],
            },
            depthStencil: {
                depthWriteEnabled: false,
                depthCompare: "less-equal",
                format: "depth24plus",
            },
            primitive,
        });
    }
    // entities
    static allocateNewBufferChunk() {
        const chunk = new BufferChunk();
        Render.scene.push(chunk);
        return chunk;
    }
    static addRenderable(renderable) {
        let chunk = Render.scene[Render.scene.length - 1];
        if (!chunk || !chunk.tryAddRenderable(renderable)) {
            chunk = Render.allocateNewBufferChunk();
            if (!chunk.tryAddRenderable(renderable)) {
                throw new Error("shit");
            }
        }
        Render.updatePerObjectData(renderable);
    }
    static setTransform(renderable, transformData) {
        renderable.rotation[0] = transformData[0];
        renderable.rotation[1] = transformData[1];
        renderable.rotation[2] = transformData[2];
        renderable.rotation[3] = transformData[3];
        renderable.scale = transformData[4];
        renderable.position[0] = transformData[5];
        renderable.position[1] = transformData[6];
        renderable.position[2] = transformData[7];
        Render.updatePerObjectData(renderable);
    }
    // camera
    static UP = fromValues$4(0, 0, 1);
    static setCamera(pos, lookAt) {
        lookAt$1(Render.viewMatrix, pos, lookAt, Render.UP);
        copy$5(Render.viewMatrix_inplace, Render.viewMatrix);
        // clear translation
        Render.viewMatrix_inplace[12] = 0;
        Render.viewMatrix_inplace[13] = 0;
        Render.viewMatrix_inplace[14] = 0;
        Render.viewMatrix_inplace[15] = 1;
        identity$2(Render.vp);
        multiply$5(Render.vp, Render.vp, Render.projectionMatrix);
        copy$5(Render.vp_inplace, Render.vp);
        multiply$5(Render.vp, Render.vp, Render.viewMatrix);
        multiply$5(Render.vp_inplace, Render.vp_inplace, Render.viewMatrix_inplace);
        copy$4(Render.cameraPosition, pos);
        invert$2(Render.vp_inv, Render.vp);
    }
    // utils
    static NEAR = 15;
    static FAR = 353840;
    static handleResize() {
        const dpr = devicePixelRatio;
        const newWidth = Math.ceil(document.body.clientWidth * dpr);
        const newHeight = Math.ceil(document.body.clientHeight * dpr);
        // newWidth = 3840
        // newHeight = 2160
        if (canvasWebGPU.width === newWidth && canvasWebGPU.height === newHeight) {
            return;
        }
        console.log(`resize: ${document.body.clientWidth}x${document.body.clientHeight}x${dpr}`);
        ctx$1.canvas.style.width = document.body.clientWidth + "px";
        ctx$1.canvas.style.height = document.body.clientHeight + "px";
        ctx$1.canvas.width = newWidth;
        ctx$1.canvas.height = newHeight;
        const glCanvas = canvasWebGPU;
        glCanvas.style.width = document.body.clientWidth + "px";
        glCanvas.style.height = document.body.clientHeight + "px";
        canvasWebGPU.width = newWidth;
        canvasWebGPU.height = newHeight;
        ctx$1.resetTransform();
        ctx$1.scale(dpr, dpr);
        perspectiveZO(Render.projectionMatrix, (50 * Math.PI) / 180, canvasWebGPU.width / canvasWebGPU.height, Render.NEAR, Render.FAR);
    }
    static applyCameraRotationToModelMatrix(model) {
        const q = create$2();
        getRotation(q, Render.viewMatrix);
        const objQ = create$2();
        getRotation(objQ, model);
        mul$2(q, q, objQ);
        invert$1(q, q);
        const p = fromValues$4(0, 1, 0);
        transformQuat$1(p, p, q);
        const a = Math.atan2(p[1], p[0]);
        rotateZ$3(model, model, a);
    }
    static rotateModelUpfront(model) {
        rotateX$3(model, model, Math.PI);
        rotateZ$3(model, model, -Math.PI / 2);
    }
    static calcGlareScale(dt) {
        const MIN_SAMPLES = 750;
        const MAX_SAMPLES = 1500;
        const MIN_GLARE_SCALE = 0.25;
        const MAX_GLARE_SCALE = 1;
        let glareTargetScale;
        if (Render.blankSamplesCount > MIN_SAMPLES) {
            const t = Math.min((Render.blankSamplesCount - MIN_SAMPLES) / (MAX_SAMPLES - MIN_SAMPLES), 1);
            glareTargetScale = MIN_GLARE_SCALE + t * (MAX_GLARE_SCALE - MIN_GLARE_SCALE);
        }
        else {
            glareTargetScale = 0;
        }
        const GLARE_SPEED = 1 / 0.075;
        if (glareTargetScale - Render.glareScale) {
            const direction = Math.sign(glareTargetScale - Render.glareScale);
            Render.glareScale += GLARE_SPEED * direction * dt;
            Render.glareScale =
                Math.min(glareTargetScale * direction, Render.glareScale * direction) * direction;
        }
    }
    static getQuasiLogDepth(linearDepth) {
        return (1 / linearDepth - 1 / Render.NEAR) / (1 / Render.FAR - 1 / Render.NEAR);
    }
    static getShadowProjection(shadowView, near, far) {
        const points = [-1, 1, 1, 1, -1, -1, 1, -1];
        const min = fromValues$4(Infinity, Infinity, Infinity);
        const max = fromValues$4(-Infinity, -Infinity, -Infinity);
        const v = create$3();
        for (const z of [near, far]) {
            for (let i = 0; i < points.length; i += 2) {
                // setup frustum point
                set$3(v, points[i], points[i + 1], z, 1);
                transformMat4$1(v, v, Render.vp_inv);
                scale$3(v, v, 1 / v[3]);
                transformMat4$1(v, v, shadowView);
                scale$3(v, v, 1 / v[3]);
                for (let j = 0; j < 3; j++) {
                    min[j] = Math.min(min[j], v[j]);
                    max[j] = Math.max(max[j], v[j]);
                }
            }
        }
        const projection = create$5();
        orthoZO(projection, min[0], max[0], min[1], max[1], -max[2], -min[2]);
        return projection;
    }
    static sunYAngle = Math.PI * 1.55;
    static calcSunTransform(dt) {
        // Render.sunYAngle += dt * 0.5
        /*
        Render.sunYAngle = 0.0

        const sunPosition = vec3.fromValues(
            -0.732571005821228,
            0.0899626091122627,
            0.674719572067261
        )
        // TODO check out sun trajectory and sun scale, which appears to be dynamic
        vec3.scale(sunPosition, sunPosition, 350)
        */
        const sunPosition = fromValues$4(20.6666469573975, 77.4717559814453, 341.035034179687);
        const sunModel = create$5();
        rotateY$3(sunModel, sunModel, Render.sunYAngle);
        translate$1(sunModel, sunModel, sunPosition);
        const transformedPos = fromValues$3(0, 0, 0, 1);
        transformMat4$1(transformedPos, transformedPos, sunModel);
        identity$2(sunModel);
        translate$1(sunModel, sunModel, transformedPos);
        // calc near/far shadow frustums
        const UP_SHADOW = fromValues$4(0, 1, 0);
        const SHADOW_CAMERA_DISTANCE = 15000;
        const sunDirection = Render.sunDirection;
        set$4(sunDirection, 0, 0, 0);
        transformMat4$2(sunDirection, sunDirection, sunModel);
        normalize$4(sunDirection, sunDirection);
        negate$2(sunDirection, sunDirection);
        const shadowCameraPos = clone$4(Render.cameraPosition);
        const temp = clone$4(sunDirection);
        negate$2(temp, temp);
        scale$4(temp, temp, SHADOW_CAMERA_DISTANCE);
        add$4(shadowCameraPos, shadowCameraPos, temp);
        const shadowView = create$5();
        lookAt$1(shadowView, shadowCameraPos, Render.cameraPosition, UP_SHADOW);
        const inv_shadowView = clone$5(shadowView);
        inv_shadowView[12] = 0;
        inv_shadowView[13] = 0;
        inv_shadowView[14] = 0;
        inv_shadowView[15] = 1;
        invert$2(inv_shadowView, inv_shadowView);
        mul$5(sunModel, sunModel, inv_shadowView);
        Render.applyCameraRotationToModelMatrix(sunModel);
        Render.rotateModelUpfront(sunModel);
        const CASCADE_DISTANCES = [
            0,
            Render.getQuasiLogDepth(1133.5),
            Render.getQuasiLogDepth(10100),
        ];
        const shadowNearProjection = Render.getShadowProjection(shadowView, CASCADE_DISTANCES[0], CASCADE_DISTANCES[1]);
        identity$2(Render.vp_shadow_near);
        multiply$5(Render.vp_shadow_near, Render.vp_shadow_near, shadowNearProjection);
        multiply$5(Render.vp_shadow_near, Render.vp_shadow_near, shadowView);
        const shadowFarProjection = Render.getShadowProjection(shadowView, 0, CASCADE_DISTANCES[2]);
        identity$2(Render.vp_shadow_far);
        multiply$5(Render.vp_shadow_far, Render.vp_shadow_far, shadowFarProjection);
        multiply$5(Render.vp_shadow_far, Render.vp_shadow_far, shadowView);
        /*
        const toUV = mat4.create()
        mat4.scale(toUV, toUV, vec3.fromValues(0.5, 0.5, 1))
        mat4.translate(toUV, toUV, vec3.fromValues(1, 1, 0))

        mat4.mul(Render.vp_shadow_near_uv, toUV, Render.vp_shadow_near)
        mat4.mul(Render.vp_shadow_far_uv, toUV, Render.vp_shadow_far)
        */
        set(Render.invScreenResolution, 1 / canvasWebGPU.width, 1 / canvasWebGPU.height);
        /*
        if (Render.debugFrustumMeshes.length < 1) {
            Render.debugFrustumMeshes.push(
                new MeshBuffer(
                    ResourceManager.generateCubeFromTransform(
                        mat4.invert(mat4.create(), Render.vp_shadow_near),
                        0,
                        1,
                        0,
                        1
                    )
                )
            )

            Render.debugFrustumMeshes.push(
                new MeshBuffer(
                    ResourceManager.generateCubeFromTransform(
                        mat4.invert(mat4.create(), Render.vp_shadow_far),
                        0,
                        1,
                        1,
                        0
                    )
                )
            )

            Render.debugFrustumMeshes.push(
                new MeshBuffer(
                    ResourceManager.generateCubeFromTransform(
                        Render.vp_inv,
                        1,
                        0,
                        CASCADE_DISTANCES[1],
                        CASCADE_DISTANCES[2]
                    )
                )
            )
        }
        */
        //
        const glareScale = Render.glareScale;
        const glareScale3 = fromValues$4(glareScale, glareScale, glareScale);
        const glareModel = clone$5(sunModel);
        scale$5(glareModel, glareModel, glareScale3);
        copy$5(Render.vp_sun, Render.vp_inplace);
        multiply$5(Render.vp_sun, Render.vp_sun, sunModel);
        copy$5(Render.vp_glare, Render.vp_inplace);
        multiply$5(Render.vp_glare, Render.vp_glare, glareModel);
    }
    static calcTimeCoeffs(dt) {
        const MIN_DT = 0.05;
        const MAX_DT = 0.166;
        const MIN_START_TIME = 10.21;
        const MIN_MUL = 4.2;
        const MIN_POWER = 0.56;
        const MAX_START_TIME = 45.65722;
        const MAX_MUL = 18.8;
        const MAX_POWER = 0.56;
        const clamped_high = Math.min(dt, MAX_DT);
        const clamped_dt = Math.max(MIN_DT, clamped_high);
        const calcTau = (startTime, mul, pow) => startTime + (clamped_dt - MIN_DT) ** pow * mul;
        const calcTimeCoeff = (dt, tau) => 1.0 - Math.exp(-(dt * tau));
        const minTau = calcTau(MIN_START_TIME, MIN_MUL, MIN_POWER);
        const maxTau = calcTau(MAX_START_TIME, MAX_MUL, MAX_POWER);
        return fromValues(calcTimeCoeff(clamped_high, minTau), calcTimeCoeff(clamped_high, maxTau));
    }
    static render(dt) {
        Render.handleResize();
        // objects color pass
        Render.calcGlareScale(dt);
        Render.calcSunTransform(dt);
        Render.resolutionBuffer[0] = canvasWebGPU.width;
        Render.resolutionBuffer[1] = canvasWebGPU.height;
        // TODO implement easing of dt
        const timeCoeffs = Render.calcTimeCoeffs(dt);
        Render.autoExposureLastStepSettingsBuffer[2] = timeCoeffs[0];
        Render.autoExposureLastStepSettingsBuffer[3] = timeCoeffs[1];
        wd.queue.writeBuffer(Render.settings, 0, Render.settingsBuffer);
        wd.queue.writeBuffer(Render.resolution, 0, Render.resolutionBuffer);
        wd.queue.writeBuffer(Render.autoExposureLastStepSettings, 0, Render.autoExposureLastStepSettingsBuffer);
        const commandEncoder = wd.createCommandEncoder();
        {
            // shadow near pass
            const passEncoder = commandEncoder.beginRenderPass(Render.depthBufferPass);
            passEncoder.setBindGroup(0, Render.depthBufferBind);
            passEncoder.setPipeline(Render.depthBufferPipeline);
            for (const chunk of Render.scene) {
                passEncoder.setVertexBuffer(0, chunk.vertices);
                passEncoder.setIndexBuffer(chunk.indices, "uint32");
                passEncoder.drawIndexed(chunk.indexPos);
            }
            passEncoder.end();
        }
        {
            // shadow near pass
            const passEncoder = commandEncoder.beginRenderPass(Render.shadowNearPassDesc);
            passEncoder.setBindGroup(0, Render.shadowNearBind);
            passEncoder.setPipeline(Render.shadowNearPipeline);
            for (const chunk of Render.scene) {
                passEncoder.setVertexBuffer(0, chunk.vertices);
                passEncoder.setIndexBuffer(chunk.indices, "uint32");
                passEncoder.drawIndexed(chunk.indexPos);
            }
            passEncoder.end();
        }
        {
            // shadow far pass
            const passEncoder = commandEncoder.beginRenderPass(Render.shadowFarPassDesc);
            passEncoder.setBindGroup(0, Render.shadowFarBind);
            passEncoder.setPipeline(Render.shadowFarPipeline);
            for (const chunk of Render.scene) {
                passEncoder.setVertexBuffer(0, chunk.vertices);
                passEncoder.setIndexBuffer(chunk.indices, "uint32");
                passEncoder.drawIndexed(chunk.indexPos);
            }
            passEncoder.end();
        }
        {
            const passEncoder = commandEncoder.beginComputePass();
            passEncoder.setPipeline(Render.volumetricInitPipeline);
            passEncoder.setBindGroup(0, Render.volumetricInitBind);
            passEncoder.dispatchWorkgroups(VOLUMETRIC_DISPATCH_X, VOLUMETRIC_DISPATCH_Y, VOLUMETRIC_DISPATCH_Z);
            passEncoder.setPipeline(Render.volumetricAddPipeline);
            for (let i = 0; i < VOLUMETRIC_TEX_DEPTH; i++) {
                passEncoder.setBindGroup(0, Render.volumetricAddBinds[i]);
                passEncoder.dispatchWorkgroups(VOLUMETRIC_DISPATCH_X, VOLUMETRIC_DISPATCH_Y, 1);
            }
            passEncoder.end();
        }
        // screen space volumetric lighting pass
        {
            const passEncoder = commandEncoder.beginRenderPass(Render.volumetricLightingPassDesc);
            passEncoder.setBindGroup(0, Render.volumetricComposeBind);
            passEncoder.setPipeline(Render.volumetricComposePipeline);
            passEncoder.setVertexBuffer(0, Render.fullscreenPlain.vertices);
            passEncoder.setIndexBuffer(Render.fullscreenPlain.indices, "uint16");
            passEncoder.drawIndexed(Render.fullscreenPlain.indexCount);
            passEncoder.end();
        }
        // screen space volumetric lighting smoothing (both horizontal and vertical)
        {
            const passEncoder = commandEncoder.beginComputePass();
            passEncoder.setPipeline(Render.volumetricHSmoothPipeline);
            passEncoder.setBindGroup(0, Render.volumetricHSmoothBind);
            passEncoder.dispatchWorkgroups(Math.ceil(canvasWebGPU.width / 960), canvasWebGPU.height, 1);
            passEncoder.setPipeline(Render.volumetricVSmoothPipeline);
            passEncoder.setBindGroup(0, Render.volumetricVSmoothBind);
            passEncoder.dispatchWorkgroups(canvasWebGPU.width, Math.ceil(canvasWebGPU.height / 540), 1);
            passEncoder.end();
        }
        {
            // screen space shadow reconstruction pass
            const passEncoder = commandEncoder.beginRenderPass(Render.contactShadowsPassDesc);
            passEncoder.setBindGroup(0, Render.contactShadowsBind);
            passEncoder.setPipeline(Render.contactShadowsPipeline);
            passEncoder.setVertexBuffer(0, Render.fullscreenPlain.vertices);
            passEncoder.setIndexBuffer(Render.fullscreenPlain.indices, "uint16");
            passEncoder.drawIndexed(Render.fullscreenPlain.indexCount);
            passEncoder.end();
        }
        {
            const passEncoder = commandEncoder.beginRenderPass(Render.mainPassDesc);
            passEncoder.setBindGroup(0, Render.skydomeBind);
            passEncoder.setPipeline(Render.skydomePipeline);
            passEncoder.setVertexBuffer(0, Render.skydome.vertices);
            passEncoder.setIndexBuffer(Render.skydome.indices, "uint16");
            passEncoder.drawIndexed(Render.skydome.indexCount);
            passEncoder.setBindGroup(0, Render.sunBind);
            passEncoder.setPipeline(Render.sunPipeline);
            passEncoder.setVertexBuffer(0, Render.sun.vertices);
            passEncoder.setIndexBuffer(Render.sun.indices, "uint16");
            passEncoder.drawIndexed(Render.sun.indexCount);
            passEncoder.setBindGroup(0, Render.objectsBind);
            passEncoder.setPipeline(Render.objectsPipeline);
            for (const chunk of Render.scene) {
                passEncoder.setVertexBuffer(0, chunk.vertices);
                passEncoder.setIndexBuffer(chunk.indices, "uint32");
                passEncoder.drawIndexed(chunk.indexPos);
            }
            if (Render.blankQueryState === BlankQueryState.None) {
                passEncoder.setBindGroup(0, Render.blankBind);
                passEncoder.setPipeline(Render.blankPipeline);
                passEncoder.setVertexBuffer(0, Render.blank.vertices);
                passEncoder.setIndexBuffer(Render.blank.indices, "uint16");
                passEncoder.beginOcclusionQuery(0);
                passEncoder.drawIndexed(Render.blank.indexCount);
                passEncoder.endOcclusionQuery();
                Render.blankQueryState = BlankQueryState.Requested;
            }
            if (Render.debugFrustumMeshes.length > 0) {
                passEncoder.setBindGroup(0, Render.debugFrustumBind);
                passEncoder.setPipeline(Render.debugFrustumPipeline);
                for (const debugFrustumMesh of Render.debugFrustumMeshes) {
                    passEncoder.setVertexBuffer(0, debugFrustumMesh.vertices);
                    passEncoder.setIndexBuffer(debugFrustumMesh.indices, "uint16");
                    passEncoder.drawIndexed(debugFrustumMesh.indexCount);
                }
            }
            passEncoder.end();
        }
        if (Render.blankQueryState === BlankQueryState.Requested) {
            commandEncoder.resolveQuerySet(Render.blankQuery, 0, 1, Render.blankQueryResult, 0);
            commandEncoder.copyBufferToBuffer(Render.blankQueryResult, 0, Render.blankQueryResultAsync, 0, QUERY_BUFFER_SIZE);
        }
        {
            const passEncoder = commandEncoder.beginRenderPass(Render.fogPassDesc);
            passEncoder.setBindGroup(0, Render.fogBind);
            passEncoder.setPipeline(Render.fogPipeline);
            passEncoder.setVertexBuffer(0, Render.fullscreenPlain.vertices);
            passEncoder.setIndexBuffer(Render.fullscreenPlain.indices, "uint16");
            passEncoder.drawIndexed(Render.fullscreenPlain.indexCount);
            if (Render.glareScale > 10e-6) {
                passEncoder.setBindGroup(0, Render.glareBind);
                passEncoder.setPipeline(Render.glarePipeline);
                passEncoder.setVertexBuffer(0, Render.glare.vertices);
                passEncoder.setIndexBuffer(Render.glare.indices, "uint16");
                passEncoder.drawIndexed(Render.glare.indexCount);
            }
            passEncoder.setBindGroup(0, Render.volumetricPostprocessBind);
            passEncoder.setPipeline(Render.volumetricPostprocessPipeline);
            passEncoder.setVertexBuffer(0, Render.fullscreenPlain.vertices);
            passEncoder.setIndexBuffer(Render.fullscreenPlain.indices, "uint16");
            passEncoder.drawIndexed(Render.fullscreenPlain.indexCount);
            passEncoder.end();
        }
        // auto-exposure
        {
            Render.autoExposureSwapchain.swap();
            for (let i = 0; i < Render.autoExposurePasses.length; i++) {
                const pass = Render.autoExposurePasses[i];
                const bind = Render.autoExposureBinds[i];
                const pipeline = Render.autoExposurePipelines[i];
                const passEncoder = commandEncoder.beginRenderPass(pass);
                passEncoder.setBindGroup(0, bind);
                passEncoder.setPipeline(pipeline);
                passEncoder.setVertexBuffer(0, Render.fullscreenPlain.vertices);
                passEncoder.setIndexBuffer(Render.fullscreenPlain.indices, "uint16");
                passEncoder.drawIndexed(Render.fullscreenPlain.indexCount);
                passEncoder.end();
            }
            const passEncoder = commandEncoder.beginRenderPass(Render.autoExposureSwapchain.pass);
            passEncoder.setBindGroup(0, Render.autoExposureSwapchain.bind);
            passEncoder.setPipeline(Render.downsample16ExtractDiffPipeline);
            passEncoder.setVertexBuffer(0, Render.fullscreenPlain.vertices);
            passEncoder.setIndexBuffer(Render.fullscreenPlain.indices, "uint16");
            passEncoder.drawIndexed(Render.fullscreenPlain.indexCount);
            passEncoder.end();
        }
        // tone mapping
        {
            Render.toneMappingSwapchain.swap();
            const passEncoder = commandEncoder.beginRenderPass(Render.toneMappingSwapchain.pass);
            passEncoder.setBindGroup(0, Render.toneMappingSwapchain.bind);
            passEncoder.setPipeline(Render.toneMappingPipeline);
            passEncoder.setVertexBuffer(0, Render.fullscreenPlain.vertices);
            passEncoder.setIndexBuffer(Render.fullscreenPlain.indices, "uint16");
            passEncoder.drawIndexed(Render.fullscreenPlain.indexCount);
            passEncoder.end();
        }
        // @ts-expect-error here we need to render to frame that is currently assign to next frame
        // we need Render because WebGPU may use frame buffering to smooth out FPS
        // so each frame may have different texture assigned
        Render.screenPassDesc.colorAttachments[0].view = wg.getCurrentTexture().createView();
        {
            const passEncoder = commandEncoder.beginRenderPass(Render.screenPassDesc);
            passEncoder.setBindGroup(0, Render.screenBind);
            passEncoder.setPipeline(Render.screenPipeline);
            passEncoder.setVertexBuffer(0, Render.fullscreenPlain.vertices);
            passEncoder.setIndexBuffer(Render.fullscreenPlain.indices, "uint16");
            passEncoder.drawIndexed(Render.fullscreenPlain.indexCount);
            // DEBUG
            if (Render.debugTextureView) {
                if (Render.debugIsDepth) {
                    passEncoder.setBindGroup(0, Render.debugDepthBind);
                    passEncoder.setPipeline(Render.debugDepthPipeline);
                }
                else {
                    passEncoder.setBindGroup(0, Render.debugTextureBind);
                    passEncoder.setPipeline(Render.debugTexturePipeline);
                }
                passEncoder.setVertexBuffer(0, Render.debugTexturePlane.vertices);
                passEncoder.setIndexBuffer(Render.debugTexturePlane.indices, "uint16");
                passEncoder.drawIndexed(Render.debugTexturePlane.indexCount);
            }
            passEncoder.end();
        }
        wd.queue.submit([commandEncoder.finish()]);
        if (Render.blankQueryState === BlankQueryState.Requested) {
            Render.blankQueryState = BlankQueryState.Pending;
            Render.blankQueryResultAsync.mapAsync(GPUMapMode.READ).then(function () {
                const data = new Uint32Array(Render.blankQueryResultAsync.getMappedRange(0, QUERY_BUFFER_SIZE));
                const result = data[0] !== 0 || data[1] !== 0;
                Render.blankSamplesCount = result ? 30000 : 0;
                Render.blankQueryResultAsync.unmap();
                Render.blankQueryState = BlankQueryState.None;
            });
        }
    }
    static finalize() {
        //
    }
}

const pos = create$4();
const lookAt = create$4();
function SetCameraHandler(ptr) {
    readToFloatArray(ptr, pos);
    readToFloatArray(ptr, lookAt);
    Render.setCamera(pos, lookAt);
}
registerOutputHandler(OutputMessageId.SET_CAMERA, SetCameraHandler);
async function CreateRenderableHandler(ptr) {
    const meshHandle = readU64(ptr);
    const textureHandle = readU64(ptr);
    const mesh = Queues.getResultSync(meshHandle) || (await Queues.getResultAsync(meshHandle));
    const texture = Queues.getResultSync(textureHandle) ||
        (await Queues.getResultAsync(textureHandle));
    const renderable = new Renderable(mesh, texture);
    return renderable;
}
registerOutputHandler(OutputMessageId.CREATE_RENDERABLE, CreateRenderableHandler);
async function SetTransformHandler(ptr) {
    const renderableHandle = readU64(ptr);
    const transformData = new Float32Array(4 + 1 + 3);
    readToFloatArray(ptr, transformData);
    const renderable = Queues.getResultSync(renderableHandle) ||
        (await Queues.getResultAsync(renderableHandle));
    Render.setTransform(renderable, transformData);
}
registerOutputHandler(OutputMessageId.SET_TRANSFORM, SetTransformHandler);
async function AddRenderableHandler(ptr) {
    const renderableHandle = readU64(ptr);
    const renderable = Queues.getResultSync(renderableHandle) ||
        (await Queues.getResultAsync(renderableHandle));
    Render.addRenderable(renderable);
}
registerOutputHandler(OutputMessageId.ADD_RENDERABLE, AddRenderableHandler);
const MAX_NAME_LENGTH = 64;
async function RequestTexture(ptr) {
    const texName = readString(ptr, MAX_NAME_LENGTH);
    const texture = await ResourceManager.requestTexture(texName);
    return texture;
}
registerOutputHandler(OutputMessageId.REQUEST_TEXTURE, RequestTexture);
async function RequestMesh(ptr) {
    const meshName = readString(ptr, MAX_NAME_LENGTH);
    const mesh = await ResourceManager.requestMesh(meshName);
    return mesh;
}
registerOutputHandler(OutputMessageId.REQUEST_MESH, RequestMesh);
async function CreateGeneratedMesh(ptr) {
    const vertexCount = readU32(ptr);
    const indexCount = readU32(ptr);
    const data = readPointer(ptr);
    const vertices = new Float32Array(Engine.HEAPU8.buffer, data, vertexCount);
    const indices = new Uint16Array(Engine.HEAPU8.buffer, data + vertexCount * Float32Array.BYTES_PER_ELEMENT, indexCount);
    const model = new Mesh(vertices, indices);
    return model;
}
registerOutputHandler(OutputMessageId.CREATE_GENERATED_MESH, CreateGeneratedMesh);
async function GenerateOneColorTexture( /*ptr: SeekablePtr*/) {
    // TODO
}
registerOutputHandler(OutputMessageId.GENERATE_ONE_COLOR_TEXTURE, GenerateOneColorTexture);

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getDefaultExportFromNamespaceIfPresent (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;
}

function getDefaultExportFromNamespaceIfNotNamed (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
}

function getAugmentedNamespace(n) {
	if (n.__esModule) return n;
	var a = Object.defineProperty({}, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

function commonjsRequire (path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var tsDeferred = {};

"use strict";
/**
 * Copyright (c) 2016 shogogg <shogo@studofly.net>
 *
 * This software is released under the MIT License.
 * http://opensource.org/licenses/mit-license.php
 */
var Deferred = (function () {
    function Deferred() {
        var _this = this;
        this.resolve = function (value) {
            _this._resolve(value);
        };
        this.reject = function (reason) {
            _this._reject(reason);
        };
        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });
    }
    Object.defineProperty(Deferred.prototype, "promise", {
        get: function () {
            return this._promise;
        },
        enumerable: true,
        configurable: true
    });
    return Deferred;
}());
var Deferred_1 = tsDeferred.Deferred = Deferred;

/* eslint-disable @typescript-eslint/no-explicit-any */
const QUEUE_BUFFER_SIZE = 3 * 1024 * 1024;
// Queues
let inputQueue;
let outputQueue;
const ptr = new SeekablePtr(0);
const results = new Map();
const resultListeners = new Map();
class Queues {
    static nextHandle = 1;
    static init() {
        inputQueue = Engine._get_input_queue_ptr();
        outputQueue = Engine._get_output_queue_ptr();
    }
    static registerResult(handle, result) {
        results.set(handle, result);
        if (result instanceof Promise) {
            result.then(value => {
                if (value !== undefined) {
                    results.set(handle, value);
                }
                else {
                    results.delete(handle);
                }
                // resolve all listeners
                const listeners = resultListeners.get(handle);
                if (listeners) {
                    for (const listener of listeners) {
                        listener.resolve(value);
                    }
                    resultListeners.delete(handle);
                }
            });
        }
    }
    static getResultAsync(handle) {
        const result = new Deferred_1();
        const value = results.get(handle);
        if (value === undefined) {
            result.reject("Result not found");
        }
        else if (value instanceof Promise) {
            let listeners = resultListeners.get(handle);
            if (listeners === undefined) {
                listeners = [];
                resultListeners.set(handle, listeners);
            }
            listeners.push(result);
        }
        else {
            result.resolve(value);
        }
        return result.promise;
    }
    static getResultSync(handle) {
        const value = results.get(handle);
        if (value instanceof Promise) {
            return undefined;
        }
        else {
            return value;
        }
    }
    static processOutputQueue() {
        ptr.value = outputQueue;
        const messagesCount = readU32(ptr);
        /*const bytesAvailable = */ readU32(ptr);
        for (let messageIndex = 0; messageIndex < messagesCount; messageIndex++) {
            const id = readU32(ptr);
            const size = readU32(ptr);
            const handle = readU64(ptr);
            const handler = getOutputMessageHandler(id);
            if (handler === undefined) {
                throw new Error("Output message have no handler.");
            }
            const dataPtr = ptr.value;
            const result = handler(ptr, handle, id);
            if (result !== undefined) {
                Queues.registerResult(handle, result);
            }
            if (ptr.value > dataPtr + size) {
                throw new Error("Overflow while reading message");
            }
            ptr.value = dataPtr + size;
        }
        ptr.value = outputQueue;
        writeU32(ptr, 0);
        writeU32(ptr, 0);
    }
    static pushMessage(id, writer, ...args) {
        ptr.value = inputQueue;
        const messagesCount = readU32(ptr);
        const bytesWritten = readU32(ptr);
        ptr.value += bytesWritten;
        const handle = Queues.nextHandle++;
        const messagePtr = ptr.value;
        writeU32(ptr, id);
        const sizePtr = ptr.value;
        // size place older
        writeU32(ptr, 0);
        writeU64(ptr, handle);
        const dataPtr = ptr.value;
        writer(id, ptr, ...args);
        const messageBodySize = ptr.value - dataPtr;
        const messageSize = ptr.value - messagePtr;
        if (bytesWritten + messageSize > QUEUE_BUFFER_SIZE) {
            // TODO here we have already have written out of bounds, we need to prevent this
            throw new Error("Input queue buffer overflow.");
        }
        // update message header (size)
        ptr.value = sizePtr;
        writeU32(ptr, messageBodySize);
        // update queue header
        ptr.value = inputQueue;
        writeU32(ptr, messagesCount + 1);
        writeU32(ptr, bytesWritten + messageSize);
        return handle;
    }
    static finalize() {
        //
    }
}

var KeyboardKey;
(function (KeyboardKey) {
    KeyboardKey[KeyboardKey["KEY_0"] = 1] = "KEY_0";
    KeyboardKey[KeyboardKey["KEY_1"] = 2] = "KEY_1";
    KeyboardKey[KeyboardKey["KEY_2"] = 3] = "KEY_2";
    KeyboardKey[KeyboardKey["KEY_3"] = 4] = "KEY_3";
    KeyboardKey[KeyboardKey["KEY_4"] = 5] = "KEY_4";
    KeyboardKey[KeyboardKey["KEY_5"] = 6] = "KEY_5";
    KeyboardKey[KeyboardKey["KEY_6"] = 7] = "KEY_6";
    KeyboardKey[KeyboardKey["KEY_7"] = 8] = "KEY_7";
    KeyboardKey[KeyboardKey["KEY_8"] = 9] = "KEY_8";
    KeyboardKey[KeyboardKey["KEY_9"] = 10] = "KEY_9";
    KeyboardKey[KeyboardKey["KEY_A"] = 11] = "KEY_A";
    KeyboardKey[KeyboardKey["KEY_B"] = 12] = "KEY_B";
    KeyboardKey[KeyboardKey["KEY_C"] = 13] = "KEY_C";
    KeyboardKey[KeyboardKey["KEY_D"] = 14] = "KEY_D";
    KeyboardKey[KeyboardKey["KEY_E"] = 15] = "KEY_E";
    KeyboardKey[KeyboardKey["KEY_F"] = 16] = "KEY_F";
    KeyboardKey[KeyboardKey["KEY_G"] = 17] = "KEY_G";
    KeyboardKey[KeyboardKey["KEY_H"] = 18] = "KEY_H";
    KeyboardKey[KeyboardKey["KEY_I"] = 19] = "KEY_I";
    KeyboardKey[KeyboardKey["KEY_J"] = 20] = "KEY_J";
    KeyboardKey[KeyboardKey["KEY_K"] = 21] = "KEY_K";
    KeyboardKey[KeyboardKey["KEY_L"] = 22] = "KEY_L";
    KeyboardKey[KeyboardKey["KEY_M"] = 23] = "KEY_M";
    KeyboardKey[KeyboardKey["KEY_N"] = 24] = "KEY_N";
    KeyboardKey[KeyboardKey["KEY_O"] = 25] = "KEY_O";
    KeyboardKey[KeyboardKey["KEY_P"] = 26] = "KEY_P";
    KeyboardKey[KeyboardKey["KEY_Q"] = 27] = "KEY_Q";
    KeyboardKey[KeyboardKey["KEY_R"] = 28] = "KEY_R";
    KeyboardKey[KeyboardKey["KEY_S"] = 29] = "KEY_S";
    KeyboardKey[KeyboardKey["KEY_T"] = 30] = "KEY_T";
    KeyboardKey[KeyboardKey["KEY_U"] = 31] = "KEY_U";
    KeyboardKey[KeyboardKey["KEY_V"] = 32] = "KEY_V";
    KeyboardKey[KeyboardKey["KEY_W"] = 33] = "KEY_W";
    KeyboardKey[KeyboardKey["KEY_X"] = 34] = "KEY_X";
    KeyboardKey[KeyboardKey["KEY_Y"] = 35] = "KEY_Y";
    KeyboardKey[KeyboardKey["KEY_Z"] = 36] = "KEY_Z";
    KeyboardKey[KeyboardKey["KEY_SPACE"] = 37] = "KEY_SPACE";
    KeyboardKey[KeyboardKey["KEY_LSHIFT"] = 38] = "KEY_LSHIFT";
    KeyboardKey[KeyboardKey["KEY_RSHIFT"] = 39] = "KEY_RSHIFT";
    KeyboardKey[KeyboardKey["KEY_LCONTROL"] = 40] = "KEY_LCONTROL";
    KeyboardKey[KeyboardKey["KEY_RCONTROL"] = 41] = "KEY_RCONTROL";
})(KeyboardKey || (KeyboardKey = {}));
const CODE_TO_KEY = {
    Digit0: KeyboardKey.KEY_0,
    Digit1: KeyboardKey.KEY_1,
    Digit2: KeyboardKey.KEY_2,
    Digit3: KeyboardKey.KEY_3,
    Digit4: KeyboardKey.KEY_4,
    Digit5: KeyboardKey.KEY_5,
    Digit6: KeyboardKey.KEY_6,
    Digit7: KeyboardKey.KEY_7,
    Digit8: KeyboardKey.KEY_8,
    Digit9: KeyboardKey.KEY_9,
    KeyA: KeyboardKey.KEY_A,
    KeyB: KeyboardKey.KEY_B,
    KeyC: KeyboardKey.KEY_C,
    KeyD: KeyboardKey.KEY_D,
    KeyE: KeyboardKey.KEY_E,
    KeyF: KeyboardKey.KEY_F,
    KeyG: KeyboardKey.KEY_G,
    KeyH: KeyboardKey.KEY_H,
    KeyI: KeyboardKey.KEY_I,
    KeyJ: KeyboardKey.KEY_J,
    KeyK: KeyboardKey.KEY_K,
    KeyL: KeyboardKey.KEY_L,
    KeyM: KeyboardKey.KEY_M,
    KeyN: KeyboardKey.KEY_N,
    KeyO: KeyboardKey.KEY_O,
    KeyP: KeyboardKey.KEY_P,
    KeyQ: KeyboardKey.KEY_Q,
    KeyR: KeyboardKey.KEY_R,
    KeyS: KeyboardKey.KEY_S,
    KeyT: KeyboardKey.KEY_T,
    KeyU: KeyboardKey.KEY_U,
    KeyV: KeyboardKey.KEY_V,
    KeyW: KeyboardKey.KEY_W,
    KeyX: KeyboardKey.KEY_X,
    KeyY: KeyboardKey.KEY_Y,
    KeyZ: KeyboardKey.KEY_Z,
    Space: KeyboardKey.KEY_SPACE,
    ShiftLeft: KeyboardKey.KEY_LSHIFT,
    ShiftRight: KeyboardKey.KEY_RSHIFT,
    ControlLeft: KeyboardKey.KEY_LCONTROL,
    ControlRight: KeyboardKey.KEY_RCONTROL,
};
function KeyboardKeyMessage(_id, ptr, key) {
    writeU32(ptr, key);
}
var MouseButton;
(function (MouseButton) {
    MouseButton[MouseButton["NONE"] = 0] = "NONE";
    MouseButton[MouseButton["LEFT"] = 1] = "LEFT";
    MouseButton[MouseButton["MIDDLE"] = 2] = "MIDDLE";
    MouseButton[MouseButton["RIGHT"] = 3] = "RIGHT";
})(MouseButton || (MouseButton = {}));
const CODE_TO_BUTTON = {
    0: MouseButton.LEFT,
    1: MouseButton.MIDDLE,
    2: MouseButton.RIGHT,
};
function MouseButtonMessage(_id, ptr, button, x, y, dx, dy, isCaptured) {
    writeU32(ptr, button);
    writeFloat(ptr, x);
    writeFloat(ptr, y);
    writeFloat(ptr, dx);
    writeFloat(ptr, dy);
    writeU32(ptr, isCaptured ? 1 : 0);
}

class InputManager {
    static init() {
        InputManager.attachEvents();
    }
    static finalize() {
        //
    }
    static attachEvents() {
        canvasWebGPU.addEventListener("click", InputManager.clickHandler);
        canvasWebGPU.addEventListener("mousemove", InputManager.mouseHandler, { passive: true });
        canvasWebGPU.addEventListener("mouseup", InputManager.mouseHandler, { passive: true });
        canvasWebGPU.addEventListener("mousedown", InputManager.mouseHandler, { passive: true });
        window.addEventListener("keyup", InputManager.keyHandler);
        window.addEventListener("keydown", InputManager.keyHandler);
    }
    static clickHandler() {
        canvasWebGPU.requestPointerLock();
    }
    static mouseHandler(e) {
        const button = CODE_TO_BUTTON[e.button];
        if (button === undefined) {
            // button is not supported
            return;
        }
        const x = e.clientX * devicePixelRatio;
        const y = e.clientY * devicePixelRatio;
        const dx = e.movementX * devicePixelRatio;
        const dy = e.movementY * devicePixelRatio;
        const isCaptured = document.pointerLockElement === canvasWebGPU;
        const id = {
            mousedown: InputMessageId.MOUSE_DOWN,
            mousemove: InputMessageId.MOUSE_MOVE,
            mouseup: InputMessageId.MOUSE_UP,
        }[e.type];
        if (id !== undefined) {
            Queues.pushMessage(id, MouseButtonMessage, button, x, y, dx, dy, isCaptured);
        }
    }
    static keyHandler(e) {
        const key = CODE_TO_KEY[e.code];
        if (key === undefined) {
            // key is not supported
            return;
        }
        const id = {
            keydown: InputMessageId.KEY_DOWN,
            keyup: InputMessageId.KEY_UP,
        }[e.type];
        if (id !== undefined) {
            Queues.pushMessage(id, KeyboardKeyMessage, key);
        }
    }
}

class Services {
    static async init() {
        await loadEngine();
        await initWebGPU();
        Queues.init();
        ResourceManager.init();
        await Render.init();
        InputManager.init();
        GameLoop.init(Services.process);
        Engine._init();
        await Render.setupTest();
    }
    static process(dt) {
        // console.log("TICK")
        // engine tick
        Engine._tick(dt);
        // resolve output queue messages
        Queues.processOutputQueue();
        // render
        Render.render(dt);
    }
    static finalize() {
        Engine._finalize();
        GameLoop.finalize();
        InputManager.finalize();
        Render.finalize();
        ResourceManager.finalize();
        Queues.finalize();
        Engine._print_memory_stats();
    }
}

async function main() {
    await Services.init();
    GameLoop.start();
}
main();
//# sourceMappingURL=index.js.map
