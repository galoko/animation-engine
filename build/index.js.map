{"version":3,"file":"index.js","sources":["../src/src/ts/surface-generation/biomes/biomes.ts","../src/src/ts/surface-generation/biomes/climate.ts","../src/src/ts/surface-generation/biomes/consumer.ts","../src/src/ts/surface-generation/biomes/overworld-biome-builder.ts","../src/src/ts/index.ts"],"sourcesContent":["export enum Biomes {\r\n    THE_VOID = \"the_void\",\r\n    PLAINS = \"plains\",\r\n    SUNFLOWER_PLAINS = \"sunflower_plains\",\r\n    SNOWY_PLAINS = \"snowy_plains\",\r\n    ICE_SPIKES = \"ice_spikes\",\r\n    DESERT = \"desert\",\r\n    SWAMP = \"swamp\",\r\n    FOREST = \"forest\",\r\n    FLOWER_FOREST = \"flower_forest\",\r\n    BIRCH_FOREST = \"birch_forest\",\r\n    DARK_FOREST = \"dark_forest\",\r\n    OLD_GROWTH_BIRCH_FOREST = \"old_growth_birch_forest\",\r\n    OLD_GROWTH_PINE_TAIGA = \"old_growth_pine_taiga\",\r\n    OLD_GROWTH_SPRUCE_TAIGA = \"old_growth_spruce_taiga\",\r\n    TAIGA = \"taiga\",\r\n    SNOWY_TAIGA = \"snowy_taiga\",\r\n    SAVANNA = \"savanna\",\r\n    SAVANNA_PLATEAU = \"savanna_plateau\",\r\n    WINDSWEPT_HILLS = \"windswept_hills\",\r\n    WINDSWEPT_GRAVELLY_HILLS = \"windswept_gravelly_hills\",\r\n    WINDSWEPT_FOREST = \"windswept_forest\",\r\n    WINDSWEPT_SAVANNA = \"windswept_savanna\",\r\n    JUNGLE = \"jungle\",\r\n    SPARSE_JUNGLE = \"sparse_jungle\",\r\n    BAMBOO_JUNGLE = \"bamboo_jungle\",\r\n    BADLANDS = \"badlands\",\r\n    ERODED_BADLANDS = \"eroded_badlands\",\r\n    WOODED_BADLANDS = \"wooded_badlands\",\r\n    MEADOW = \"meadow\",\r\n    GROVE = \"grove\",\r\n    SNOWY_SLOPES = \"snowy_slopes\",\r\n    FROZEN_PEAKS = \"frozen_peaks\",\r\n    JAGGED_PEAKS = \"jagged_peaks\",\r\n    STONY_PEAKS = \"stony_peaks\",\r\n    RIVER = \"river\",\r\n    FROZEN_RIVER = \"frozen_river\",\r\n    BEACH = \"beach\",\r\n    SNOWY_BEACH = \"snowy_beach\",\r\n    STONY_SHORE = \"stony_shore\",\r\n    WARM_OCEAN = \"warm_ocean\",\r\n    LUKEWARM_OCEAN = \"lukewarm_ocean\",\r\n    DEEP_LUKEWARM_OCEAN = \"deep_lukewarm_ocean\",\r\n    OCEAN = \"ocean\",\r\n    DEEP_OCEAN = \"deep_ocean\",\r\n    COLD_OCEAN = \"cold_ocean\",\r\n    DEEP_COLD_OCEAN = \"deep_cold_ocean\",\r\n    FROZEN_OCEAN = \"frozen_ocean\",\r\n    DEEP_FROZEN_OCEAN = \"deep_frozen_ocean\",\r\n    MUSHROOM_FIELDS = \"mushroom_fields\",\r\n    DRIPSTONE_CAVES = \"dripstone_caves\",\r\n    LUSH_CAVES = \"lush_caves\",\r\n    NETHER_WASTES = \"nether_wastes\",\r\n    WARPED_FOREST = \"warped_forest\",\r\n    CRIMSON_FOREST = \"crimson_forest\",\r\n    SOUL_SAND_VALLEY = \"soul_sand_valley\",\r\n    BASALT_DELTAS = \"basalt_deltas\",\r\n    THE_END = \"the_end\",\r\n    END_HIGHLANDS = \"end_highlands\",\r\n    END_MIDLANDS = \"end_midlands\",\r\n    SMALL_END_ISLANDS = \"small_end_islands\",\r\n    END_BARRENS = \"end_barrens\",\r\n}\r\n","/* eslint-disable @typescript-eslint/no-namespace */\r\n\r\nimport { Pair } from \"./consumer\"\r\n\r\nexport namespace Climate {\r\n    export interface Sampler {\r\n        sample(x: number, y: number, z: number): TargetPoint\r\n    }\r\n\r\n    export class Parameter {\r\n        constructor(public min: number, public max: number) {}\r\n\r\n        static span(min: Parameter, max: Parameter): Parameter\r\n        static span(min: number, max: number): Parameter\r\n        static span(min: number | Parameter, max: number | Parameter): Parameter {\r\n            if (typeof min === \"number\") {\r\n                if (typeof max !== \"number\") {\r\n                    throw new Error(\"\")\r\n                }\r\n                return new Parameter(quantizeCoord(min), quantizeCoord(max))\r\n            } else {\r\n                if (typeof max === \"number\") {\r\n                    throw new Error(\"\")\r\n                }\r\n                return new Parameter(min.min, max.max)\r\n            }\r\n        }\r\n\r\n        static point(value: number): Parameter {\r\n            return Parameter.span(value, value)\r\n        }\r\n\r\n        distance(value: number): number {\r\n            const v0 = value - this.max\r\n            const v1 = this.min - value\r\n            return v0 > 0 ? v0 : Math.max(v1, 0)\r\n        }\r\n\r\n        get center(): number {\r\n            return (this.min + this.max) * 0.5\r\n        }\r\n\r\n        get length(): number {\r\n            return this.max - this.min\r\n        }\r\n    }\r\n\r\n    export class TargetPoint {\r\n        constructor(\r\n            public temperature: number,\r\n            public humidity: number,\r\n            public continentalness: number,\r\n            public erosion: number,\r\n            public depth: number,\r\n            public weirdness: number\r\n        ) {}\r\n    }\r\n\r\n    export class ParameterPoint {\r\n        constructor(\r\n            public temperature: Parameter,\r\n            public humidity: Parameter,\r\n            public continentalness: Parameter,\r\n            public erosion: Parameter,\r\n            public depth: Parameter,\r\n            public weirdness: Parameter,\r\n            public offset: number\r\n        ) {}\r\n\r\n        fitness(targetPoint: TargetPoint): number {\r\n            const temperatureDistance = this.temperature.distance(targetPoint.temperature)\r\n            const humidityDistance = this.humidity.distance(targetPoint.humidity)\r\n            const continentalnessDistance = this.continentalness.distance(\r\n                targetPoint.continentalness\r\n            )\r\n            const erosionDistance = this.erosion.distance(targetPoint.erosion)\r\n            const depthDistance = this.depth.distance(targetPoint.depth)\r\n            const weirdnessDistance = this.weirdness.distance(targetPoint.weirdness)\r\n            const offsetDistance = 0 - this.offset\r\n\r\n            return (\r\n                temperatureDistance * temperatureDistance +\r\n                humidityDistance * humidityDistance +\r\n                continentalnessDistance * continentalnessDistance +\r\n                erosionDistance * erosionDistance +\r\n                depthDistance * depthDistance +\r\n                weirdnessDistance * weirdnessDistance +\r\n                offsetDistance * offsetDistance\r\n            )\r\n        }\r\n    }\r\n\r\n    const QUANTIZATION_FACTOR = 10000\r\n\r\n    export function quantizeCoord(coord: number): number {\r\n        return Math.trunc(coord * QUANTIZATION_FACTOR)\r\n    }\r\n\r\n    export function unquantizeCoord(coord: number): number {\r\n        return coord / QUANTIZATION_FACTOR\r\n    }\r\n\r\n    export function parameters(\r\n        temperature: number,\r\n        humidity: number,\r\n        continentalness: number,\r\n        erosion: number,\r\n        depth: number,\r\n        weirdness: number,\r\n        offset: number\r\n    ): ParameterPoint\r\n\r\n    export function parameters(\r\n        temperature: Parameter | number,\r\n        humidity: Parameter | number,\r\n        continentalness: Parameter | number,\r\n        erosion: Parameter | number,\r\n        depth: Parameter | number,\r\n        weirdness: Parameter | number,\r\n        offset: number\r\n    ): ParameterPoint\r\n\r\n    export function parameters(\r\n        temperature: Parameter | number,\r\n        humidity: Parameter | number,\r\n        continentalness: Parameter | number,\r\n        erosion: Parameter | number,\r\n        depth: Parameter | number,\r\n        weirdness: Parameter | number,\r\n        offset: number\r\n    ): ParameterPoint {\r\n        if (typeof temperature === \"number\") {\r\n            if (\r\n                typeof temperature !== \"number\" ||\r\n                typeof humidity !== \"number\" ||\r\n                typeof continentalness !== \"number\" ||\r\n                typeof erosion !== \"number\" ||\r\n                typeof depth !== \"number\" ||\r\n                typeof weirdness !== \"number\"\r\n            ) {\r\n                throw new Error(\"\")\r\n            }\r\n\r\n            return new ParameterPoint(\r\n                Parameter.point(temperature),\r\n                Parameter.point(humidity),\r\n                Parameter.point(continentalness),\r\n                Parameter.point(erosion),\r\n                Parameter.point(depth),\r\n                Parameter.point(weirdness),\r\n                quantizeCoord(offset)\r\n            )\r\n        } else {\r\n            if (\r\n                typeof temperature === \"number\" ||\r\n                typeof humidity === \"number\" ||\r\n                typeof continentalness === \"number\" ||\r\n                typeof erosion === \"number\" ||\r\n                typeof depth === \"number\" ||\r\n                typeof weirdness === \"number\"\r\n            ) {\r\n                throw new Error(\"\")\r\n            }\r\n\r\n            return new ParameterPoint(\r\n                temperature,\r\n                humidity,\r\n                continentalness,\r\n                erosion,\r\n                depth,\r\n                weirdness,\r\n                quantizeCoord(offset)\r\n            )\r\n        }\r\n    }\r\n\r\n    export function findValueBruteForce<T>(\r\n        targetPoint: TargetPoint,\r\n        values: Pair<ParameterPoint, T>[]\r\n    ): T {\r\n        let minDistance = Infinity\r\n        let result: T | undefined\r\n\r\n        for (const pair of values) {\r\n            const distance = pair.first.fitness(targetPoint)\r\n            if (distance < minDistance) {\r\n                minDistance = distance\r\n                result = pair.second\r\n            }\r\n        }\r\n\r\n        if (result === undefined) {\r\n            throw new Error(\"Result not found.\")\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    export function target(\r\n        temperature: number,\r\n        humidity: number,\r\n        continentalness: number,\r\n        erosion: number,\r\n        depth: number,\r\n        weirdness: number\r\n    ): TargetPoint {\r\n        return new TargetPoint(\r\n            quantizeCoord(temperature),\r\n            quantizeCoord(humidity),\r\n            quantizeCoord(continentalness),\r\n            quantizeCoord(erosion),\r\n            quantizeCoord(depth),\r\n            quantizeCoord(weirdness)\r\n        )\r\n    }\r\n}\r\n","export class Pair<T, K> {\r\n    constructor(public first: T, public second: K) {}\r\n\r\n    static of<T, K>(first: T, second: K): Pair<T, K> {\r\n        return new Pair(first, second)\r\n    }\r\n}\r\n\r\nexport type Supplier<T> = () => T\r\n","import { Biomes } from \"./biomes\"\r\nimport { Climate } from \"./climate\"\r\nimport { Pair } from \"./consumer\"\r\n\r\nconst VALLEY_SIZE = 0.05\r\nconst LOW_START = 0.26666668\r\nconst HIGH_START = 0.4\r\nconst HIGH_END = 0.93333334\r\nconst PEAK_SIZE = 0.1\r\nconst PEAK_START = 0.56666666\r\nconst PEAK_END = 0.7666667\r\nconst NEAR_INLAND_START = -0.11\r\nconst MID_INLAND_START = 0.03\r\nconst FAR_INLAND_START = 0.3\r\nconst EROSION_INDEX_1_START = -0.78\r\nconst EROSION_INDEX_2_START = -0.375\r\n\r\nconst FULL_RANGE = Climate.Parameter.span(-1, 1)\r\n\r\nconst temperatures = [\r\n    Climate.Parameter.span(-1.0, -0.45),\r\n    Climate.Parameter.span(-0.45, -0.15),\r\n    Climate.Parameter.span(-0.15, 0.2),\r\n    Climate.Parameter.span(0.2, 0.55),\r\n    Climate.Parameter.span(0.55, 1.0),\r\n]\r\n\r\nconst humidities = [\r\n    Climate.Parameter.span(-1.0, -0.35),\r\n    Climate.Parameter.span(-0.35, -PEAK_SIZE),\r\n    Climate.Parameter.span(-PEAK_SIZE, PEAK_SIZE),\r\n    Climate.Parameter.span(PEAK_SIZE, FAR_INLAND_START),\r\n    Climate.Parameter.span(FAR_INLAND_START, 1.0),\r\n]\r\n\r\nconst erosions = [\r\n    Climate.Parameter.span(-1.0, EROSION_INDEX_1_START),\r\n    Climate.Parameter.span(EROSION_INDEX_1_START, EROSION_INDEX_2_START),\r\n    Climate.Parameter.span(EROSION_INDEX_2_START, -0.2225),\r\n    Climate.Parameter.span(-0.2225, VALLEY_SIZE),\r\n    Climate.Parameter.span(VALLEY_SIZE, 0.45),\r\n    Climate.Parameter.span(0.45, 0.55),\r\n    Climate.Parameter.span(0.55, 1.0),\r\n]\r\n\r\nconst FROZEN_RANGE = temperatures[0]\r\nconst UNFROZEN_RANGE = Climate.Parameter.span(temperatures[1], temperatures[4])\r\nconst mushroomFieldsContinentalness = Climate.Parameter.span(-1.2, -1.05)\r\nconst deepOceanContinentalness = Climate.Parameter.span(-1.05, -0.455)\r\nconst oceanContinentalness = Climate.Parameter.span(-0.455, -0.19)\r\nconst coastContinentalness = Climate.Parameter.span(-0.19, NEAR_INLAND_START)\r\nconst inlandContinentalness = Climate.Parameter.span(NEAR_INLAND_START, 0.55)\r\nconst nearInlandContinentalness = Climate.Parameter.span(NEAR_INLAND_START, MID_INLAND_START)\r\nconst midInlandContinentalness = Climate.Parameter.span(MID_INLAND_START, FAR_INLAND_START)\r\nconst farInlandContinentalness = Climate.Parameter.span(FAR_INLAND_START, 1.0)\r\n\r\nconst OCEANS = [\r\n    [\r\n        Biomes.DEEP_FROZEN_OCEAN,\r\n        Biomes.DEEP_COLD_OCEAN,\r\n        Biomes.DEEP_OCEAN,\r\n        Biomes.DEEP_LUKEWARM_OCEAN,\r\n        Biomes.WARM_OCEAN,\r\n    ],\r\n    [\r\n        Biomes.FROZEN_OCEAN,\r\n        Biomes.COLD_OCEAN,\r\n        Biomes.OCEAN,\r\n        Biomes.LUKEWARM_OCEAN,\r\n        Biomes.WARM_OCEAN,\r\n    ],\r\n]\r\n\r\nconst MIDDLE_BIOMES = [\r\n    [\r\n        Biomes.SNOWY_PLAINS,\r\n        Biomes.SNOWY_PLAINS,\r\n        Biomes.SNOWY_PLAINS,\r\n        Biomes.SNOWY_TAIGA,\r\n        Biomes.TAIGA,\r\n    ],\r\n    [Biomes.PLAINS, Biomes.PLAINS, Biomes.FOREST, Biomes.TAIGA, Biomes.OLD_GROWTH_SPRUCE_TAIGA],\r\n    [Biomes.FLOWER_FOREST, Biomes.PLAINS, Biomes.FOREST, Biomes.BIRCH_FOREST, Biomes.DARK_FOREST],\r\n    [Biomes.SAVANNA, Biomes.SAVANNA, Biomes.FOREST, Biomes.JUNGLE, Biomes.JUNGLE],\r\n    [Biomes.DESERT, Biomes.DESERT, Biomes.DESERT, Biomes.DESERT, Biomes.DESERT],\r\n]\r\n\r\nconst MIDDLE_BIOMES_VARIANT = [\r\n    [Biomes.ICE_SPIKES, null, Biomes.SNOWY_TAIGA, null, null],\r\n    [null, null, null, null, Biomes.OLD_GROWTH_PINE_TAIGA],\r\n    [Biomes.SUNFLOWER_PLAINS, null, null, Biomes.OLD_GROWTH_BIRCH_FOREST, null],\r\n    [null, null, Biomes.PLAINS, Biomes.SPARSE_JUNGLE, Biomes.BAMBOO_JUNGLE],\r\n    [null, null, null, null, null],\r\n]\r\n\r\nconst PLATEAU_BIOMES = [\r\n    [\r\n        Biomes.SNOWY_PLAINS,\r\n        Biomes.SNOWY_PLAINS,\r\n        Biomes.SNOWY_PLAINS,\r\n        Biomes.SNOWY_TAIGA,\r\n        Biomes.SNOWY_TAIGA,\r\n    ],\r\n    [Biomes.MEADOW, Biomes.MEADOW, Biomes.FOREST, Biomes.TAIGA, Biomes.OLD_GROWTH_SPRUCE_TAIGA],\r\n    [Biomes.MEADOW, Biomes.MEADOW, Biomes.MEADOW, Biomes.MEADOW, Biomes.DARK_FOREST],\r\n    [Biomes.SAVANNA_PLATEAU, Biomes.SAVANNA_PLATEAU, Biomes.FOREST, Biomes.FOREST, Biomes.JUNGLE],\r\n    [\r\n        Biomes.BADLANDS,\r\n        Biomes.BADLANDS,\r\n        Biomes.BADLANDS,\r\n        Biomes.WOODED_BADLANDS,\r\n        Biomes.WOODED_BADLANDS,\r\n    ],\r\n]\r\n\r\nconst PLATEAU_BIOMES_VARIANT = [\r\n    [Biomes.ICE_SPIKES, null, null, null, null],\r\n    [null, null, Biomes.MEADOW, Biomes.MEADOW, Biomes.OLD_GROWTH_PINE_TAIGA],\r\n    [null, null, Biomes.FOREST, Biomes.BIRCH_FOREST, null],\r\n    [null, null, null, null, null],\r\n    [Biomes.ERODED_BADLANDS, Biomes.ERODED_BADLANDS, null, null, null],\r\n]\r\n\r\nconst EXTREME_HILLS = [\r\n    [\r\n        Biomes.WINDSWEPT_GRAVELLY_HILLS,\r\n        Biomes.WINDSWEPT_GRAVELLY_HILLS,\r\n        Biomes.WINDSWEPT_HILLS,\r\n        Biomes.WINDSWEPT_FOREST,\r\n        Biomes.WINDSWEPT_FOREST,\r\n    ],\r\n    [\r\n        Biomes.WINDSWEPT_GRAVELLY_HILLS,\r\n        Biomes.WINDSWEPT_GRAVELLY_HILLS,\r\n        Biomes.WINDSWEPT_HILLS,\r\n        Biomes.WINDSWEPT_FOREST,\r\n        Biomes.WINDSWEPT_FOREST,\r\n    ],\r\n    [\r\n        Biomes.WINDSWEPT_HILLS,\r\n        Biomes.WINDSWEPT_HILLS,\r\n        Biomes.WINDSWEPT_HILLS,\r\n        Biomes.WINDSWEPT_FOREST,\r\n        Biomes.WINDSWEPT_FOREST,\r\n    ],\r\n    [null, null, null, null, null],\r\n    [null, null, null, null, null],\r\n]\r\n\r\nexport type BuilderOutput = Pair<Climate.ParameterPoint, Biomes>[]\r\n\r\nexport class OverworldBiomeBuilder {\r\n    // high order methods\r\n\r\n    addBiomes(biomes: BuilderOutput): void {\r\n        this.addOffCoastBiomes(biomes)\r\n        this.addInlandBiomes(biomes)\r\n        this.addUndergroundBiomes(biomes)\r\n    }\r\n\r\n    private addOffCoastBiomes(biomes: BuilderOutput): void {\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            mushroomFieldsContinentalness,\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            0.0,\r\n            Biomes.MUSHROOM_FIELDS\r\n        )\r\n\r\n        for (let i = 0; i < temperatures.length; ++i) {\r\n            const temperature = temperatures[i]\r\n            this.addSurfaceBiome(\r\n                biomes,\r\n                temperature,\r\n                FULL_RANGE,\r\n                deepOceanContinentalness,\r\n                FULL_RANGE,\r\n                FULL_RANGE,\r\n                0.0,\r\n                OCEANS[0][i]\r\n            )\r\n            this.addSurfaceBiome(\r\n                biomes,\r\n                temperature,\r\n                FULL_RANGE,\r\n                oceanContinentalness,\r\n                FULL_RANGE,\r\n                FULL_RANGE,\r\n                0.0,\r\n                OCEANS[1][i]\r\n            )\r\n        }\r\n    }\r\n\r\n    private addInlandBiomes(biomes: BuilderOutput): void {\r\n        this.addMidSlice(biomes, Climate.Parameter.span(-1.0, -HIGH_END))\r\n        this.addHighSlice(biomes, Climate.Parameter.span(-HIGH_END, -PEAK_END))\r\n        this.addPeaks(biomes, Climate.Parameter.span(-PEAK_END, -PEAK_START))\r\n        this.addHighSlice(biomes, Climate.Parameter.span(-PEAK_START, -HIGH_START))\r\n        this.addMidSlice(biomes, Climate.Parameter.span(-HIGH_START, -LOW_START))\r\n        this.addLowSlice(biomes, Climate.Parameter.span(-LOW_START, -VALLEY_SIZE))\r\n        this.addValleys(biomes, Climate.Parameter.span(-VALLEY_SIZE, VALLEY_SIZE))\r\n        this.addLowSlice(biomes, Climate.Parameter.span(VALLEY_SIZE, LOW_START))\r\n        this.addMidSlice(biomes, Climate.Parameter.span(LOW_START, HIGH_START))\r\n        this.addHighSlice(biomes, Climate.Parameter.span(HIGH_START, PEAK_START))\r\n        this.addPeaks(biomes, Climate.Parameter.span(PEAK_START, PEAK_END))\r\n        this.addHighSlice(biomes, Climate.Parameter.span(PEAK_END, HIGH_END))\r\n        this.addMidSlice(biomes, Climate.Parameter.span(HIGH_END, 1.0))\r\n    }\r\n\r\n    // specific type biomes\r\n\r\n    private addPeaks(biomes: BuilderOutput, weirdness: Climate.Parameter): void {\r\n        for (let temperatureIndex = 0; temperatureIndex < temperatures.length; ++temperatureIndex) {\r\n            const temperature = temperatures[temperatureIndex]\r\n\r\n            for (let humidityIndex = 0; humidityIndex < humidities.length; ++humidityIndex) {\r\n                const humidity = humidities[humidityIndex]\r\n                const middleBiome = this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n                const middleOrBadlands = this.pickMiddleBiomeOrBadlandsIfHot(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const middleOrBadlandsOrSlope = this.pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const plateauBiome = this.pickPlateauBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const extremeHillsBiome = this.pickExtremeHillsBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const maybeShattered = this.maybePickShatteredBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness,\r\n                    extremeHillsBiome\r\n                )\r\n                const peakyBiome = this.pickPeakBiome(temperatureIndex, humidityIndex, weirdness)\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n                    erosions[0],\r\n                    weirdness,\r\n                    0.0,\r\n                    peakyBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, nearInlandContinentalness),\r\n                    erosions[1],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlandsOrSlope\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[1],\r\n                    weirdness,\r\n                    0.0,\r\n                    peakyBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, nearInlandContinentalness),\r\n                    Climate.Parameter.span(erosions[2], erosions[3]),\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[2],\r\n                    weirdness,\r\n                    0.0,\r\n                    plateauBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    midInlandContinentalness,\r\n                    erosions[3],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlands\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    farInlandContinentalness,\r\n                    erosions[3],\r\n                    weirdness,\r\n                    0.0,\r\n                    plateauBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n                    erosions[4],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, nearInlandContinentalness),\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    maybeShattered\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    extremeHillsBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n                    erosions[6],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private addHighSlice(biomes: BuilderOutput, weirdness: Climate.Parameter): void {\r\n        for (let temperatureIndex = 0; temperatureIndex < temperatures.length; ++temperatureIndex) {\r\n            const temperature = temperatures[temperatureIndex]\r\n\r\n            for (let humidityIndex = 0; humidityIndex < humidities.length; ++humidityIndex) {\r\n                const humidity = humidities[humidityIndex]\r\n                const middleBiome = this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n                const middleOrBadlands = this.pickMiddleBiomeOrBadlandsIfHot(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const middleOrBadlandsOrSlope = this.pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const plateauBiome = this.pickPlateauBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const extremeHillsBiome = this.pickExtremeHillsBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const maybeShattered = this.maybePickShatteredBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness,\r\n                    middleBiome\r\n                )\r\n                const slopeBiome = this.pickSlopeBiome(temperatureIndex, humidityIndex, weirdness)\r\n                const peakyBiome = this.pickPeakBiome(temperatureIndex, humidityIndex, weirdness)\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    coastContinentalness,\r\n                    Climate.Parameter.span(erosions[0], erosions[1]),\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    erosions[0],\r\n                    weirdness,\r\n                    0.0,\r\n                    slopeBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[0],\r\n                    weirdness,\r\n                    0.0,\r\n                    peakyBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    erosions[1],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlandsOrSlope\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[1],\r\n                    weirdness,\r\n                    0.0,\r\n                    slopeBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, nearInlandContinentalness),\r\n                    Climate.Parameter.span(erosions[2], erosions[3]),\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[2],\r\n                    weirdness,\r\n                    0.0,\r\n                    plateauBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    midInlandContinentalness,\r\n                    erosions[3],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlands\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    farInlandContinentalness,\r\n                    erosions[3],\r\n                    weirdness,\r\n                    0.0,\r\n                    plateauBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n                    erosions[4],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, nearInlandContinentalness),\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    maybeShattered\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    extremeHillsBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n                    erosions[6],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private addMidSlice(biomes: BuilderOutput, weirdness: Climate.Parameter): void {\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            coastContinentalness,\r\n            Climate.Parameter.span(erosions[0], erosions[2]),\r\n            weirdness,\r\n            0.0,\r\n            Biomes.STONY_SHORE\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n            erosions[6],\r\n            weirdness,\r\n            0.0,\r\n            Biomes.SWAMP\r\n        )\r\n\r\n        for (let temperatureIndex = 0; temperatureIndex < temperatures.length; ++temperatureIndex) {\r\n            const temperature = temperatures[temperatureIndex]\r\n\r\n            for (let humidityIndex = 0; humidityIndex < humidities.length; ++humidityIndex) {\r\n                const humidity = humidities[humidityIndex]\r\n                const middleBiome = this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n                const middleOrBadlands = this.pickMiddleBiomeOrBadlandsIfHot(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const middleOrBadlandsOrSlope = this.pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const extremeHillsBiome = this.pickExtremeHillsBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const plateauBiome = this.pickPlateauBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const beachBiome = this.pickBeachBiome(temperatureIndex)\r\n                const maybeShattered = this.maybePickShatteredBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness,\r\n                    middleBiome\r\n                )\r\n                const shatteredCoastBiome = this.pickShatteredCoastBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const slopeBiome = this.pickSlopeBiome(temperatureIndex, humidityIndex, weirdness)\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n                    erosions[0],\r\n                    weirdness,\r\n                    0.0,\r\n                    slopeBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(nearInlandContinentalness, midInlandContinentalness),\r\n                    erosions[1],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlandsOrSlope\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    farInlandContinentalness,\r\n                    erosions[1],\r\n                    weirdness,\r\n                    0.0,\r\n                    temperatureIndex == 0 ? slopeBiome : plateauBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    erosions[2],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    midInlandContinentalness,\r\n                    erosions[2],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlands\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    farInlandContinentalness,\r\n                    erosions[2],\r\n                    weirdness,\r\n                    0.0,\r\n                    plateauBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, nearInlandContinentalness),\r\n                    erosions[3],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[3],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlands\r\n                )\r\n                if (weirdness.max < 0) {\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        coastContinentalness,\r\n                        erosions[4],\r\n                        weirdness,\r\n                        0.0,\r\n                        beachBiome\r\n                    )\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n                        erosions[4],\r\n                        weirdness,\r\n                        0.0,\r\n                        middleBiome\r\n                    )\r\n                } else {\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n                        erosions[4],\r\n                        weirdness,\r\n                        0.0,\r\n                        middleBiome\r\n                    )\r\n                }\r\n\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    coastContinentalness,\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    shatteredCoastBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    maybeShattered\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    extremeHillsBiome\r\n                )\r\n                if (weirdness.max < 0) {\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        coastContinentalness,\r\n                        erosions[6],\r\n                        weirdness,\r\n                        0.0,\r\n                        beachBiome\r\n                    )\r\n                } else {\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        coastContinentalness,\r\n                        erosions[6],\r\n                        weirdness,\r\n                        0.0,\r\n                        middleBiome\r\n                    )\r\n                }\r\n\r\n                if (temperatureIndex == 0) {\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n                        erosions[6],\r\n                        weirdness,\r\n                        0.0,\r\n                        middleBiome\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private addLowSlice(biomes: BuilderOutput, weirdness: Climate.Parameter): void {\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            coastContinentalness,\r\n            Climate.Parameter.span(erosions[0], erosions[2]),\r\n            weirdness,\r\n            0.0,\r\n            Biomes.STONY_SHORE\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n            erosions[6],\r\n            weirdness,\r\n            0.0,\r\n            Biomes.SWAMP\r\n        )\r\n\r\n        for (let temperatureIndex = 0; temperatureIndex < temperatures.length; ++temperatureIndex) {\r\n            const temperature = temperatures[temperatureIndex]\r\n\r\n            for (let humidityIndex = 0; humidityIndex < humidities.length; ++humidityIndex) {\r\n                const humidity = humidities[humidityIndex]\r\n                const resourcekey = this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n                const resourcekey1 = this.pickMiddleBiomeOrBadlandsIfHot(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const resourcekey2 = this.pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const resourcekey3 = this.pickBeachBiome(temperatureIndex)\r\n                const resourcekey4 = this.maybePickShatteredBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness,\r\n                    resourcekey\r\n                )\r\n                const resourcekey5 = this.pickShatteredCoastBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    Climate.Parameter.span(erosions[0], erosions[1]),\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey1\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    Climate.Parameter.span(erosions[0], erosions[1]),\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey2\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    Climate.Parameter.span(erosions[2], erosions[3]),\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    Climate.Parameter.span(erosions[2], erosions[3]),\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey1\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    coastContinentalness,\r\n                    Climate.Parameter.span(erosions[3], erosions[4]),\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey3\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n                    erosions[4],\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    coastContinentalness,\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey5\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey4\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    coastContinentalness,\r\n                    erosions[6],\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey3\r\n                )\r\n                if (temperatureIndex == 0) {\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n                        erosions[6],\r\n                        weirdness,\r\n                        0.0,\r\n                        resourcekey\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private addValleys(biomes: BuilderOutput, wierdness: Climate.Parameter): void {\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FROZEN_RANGE,\r\n            FULL_RANGE,\r\n            coastContinentalness,\r\n            Climate.Parameter.span(erosions[0], erosions[1]),\r\n            wierdness,\r\n            0.0,\r\n            wierdness.max < 0 ? Biomes.STONY_SHORE : Biomes.FROZEN_RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            coastContinentalness,\r\n            Climate.Parameter.span(erosions[0], erosions[1]),\r\n            wierdness,\r\n            0.0,\r\n            wierdness.max < 0 ? Biomes.STONY_SHORE : Biomes.RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FROZEN_RANGE,\r\n            FULL_RANGE,\r\n            nearInlandContinentalness,\r\n            Climate.Parameter.span(erosions[0], erosions[1]),\r\n            wierdness,\r\n            0.0,\r\n            Biomes.FROZEN_RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            nearInlandContinentalness,\r\n            Climate.Parameter.span(erosions[0], erosions[1]),\r\n            wierdness,\r\n            0.0,\r\n            Biomes.RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FROZEN_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n            Climate.Parameter.span(erosions[2], erosions[5]),\r\n            wierdness,\r\n            0.0,\r\n            Biomes.FROZEN_RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n            Climate.Parameter.span(erosions[2], erosions[5]),\r\n            wierdness,\r\n            0.0,\r\n            Biomes.RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FROZEN_RANGE,\r\n            FULL_RANGE,\r\n            coastContinentalness,\r\n            erosions[6],\r\n            wierdness,\r\n            0.0,\r\n            Biomes.FROZEN_RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            coastContinentalness,\r\n            erosions[6],\r\n            wierdness,\r\n            0.0,\r\n            Biomes.RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(inlandContinentalness, farInlandContinentalness),\r\n            erosions[6],\r\n            wierdness,\r\n            0.0,\r\n            Biomes.SWAMP\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FROZEN_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(inlandContinentalness, farInlandContinentalness),\r\n            erosions[6],\r\n            wierdness,\r\n            0.0,\r\n            Biomes.FROZEN_RIVER\r\n        )\r\n\r\n        for (let temperatureIndex = 0; temperatureIndex < temperatures.length; ++temperatureIndex) {\r\n            const temperature = temperatures[temperatureIndex]\r\n\r\n            for (let humidityIndex = 0; humidityIndex < humidities.length; ++humidityIndex) {\r\n                const humidity = humidities[humidityIndex]\r\n                const resourcekey = this.pickMiddleBiomeOrBadlandsIfHot(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    wierdness\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    Climate.Parameter.span(erosions[0], erosions[1]),\r\n                    wierdness,\r\n                    0.0,\r\n                    resourcekey\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private addUndergroundBiomes(biomes: BuilderOutput): void {\r\n        this.addUndergroundBiome(\r\n            biomes,\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(0.8, 1.0),\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            0.0,\r\n            Biomes.DRIPSTONE_CAVES\r\n        )\r\n        this.addUndergroundBiome(\r\n            biomes,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(0.7, 1.0),\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            0.0,\r\n            Biomes.LUSH_CAVES\r\n        )\r\n    }\r\n\r\n    // biome pickers\r\n\r\n    private pickMiddleBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        if (weirdness.max < 0) {\r\n            return MIDDLE_BIOMES[temperatureIndex][humidityIndex]\r\n        } else {\r\n            const resourcekey = MIDDLE_BIOMES_VARIANT[temperatureIndex][humidityIndex]\r\n            return resourcekey == null\r\n                ? MIDDLE_BIOMES[temperatureIndex][humidityIndex]\r\n                : resourcekey\r\n        }\r\n    }\r\n\r\n    private pickMiddleBiomeOrBadlandsIfHot(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        return temperatureIndex == 4\r\n            ? this.pickBadlandsBiome(humidityIndex, weirdness)\r\n            : this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n    }\r\n\r\n    private pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        return temperatureIndex == 0\r\n            ? this.pickSlopeBiome(temperatureIndex, humidityIndex, weirdness)\r\n            : this.pickMiddleBiomeOrBadlandsIfHot(temperatureIndex, humidityIndex, weirdness)\r\n    }\r\n\r\n    private maybePickShatteredBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter,\r\n        defaultBiome: Biomes\r\n    ): Biomes {\r\n        return temperatureIndex > 1 && humidityIndex < 4 && weirdness.max >= 0\r\n            ? Biomes.WINDSWEPT_SAVANNA\r\n            : defaultBiome\r\n    }\r\n\r\n    private pickShatteredCoastBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        const biome =\r\n            weirdness.max >= 0\r\n                ? this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n                : this.pickBeachBiome(temperatureIndex)\r\n        return this.maybePickShatteredBiome(temperatureIndex, humidityIndex, weirdness, biome)\r\n    }\r\n\r\n    private pickBeachBiome(temperatureIndex: number): Biomes {\r\n        if (temperatureIndex == 0) {\r\n            return Biomes.SNOWY_BEACH\r\n        } else {\r\n            return temperatureIndex == 4 ? Biomes.DESERT : Biomes.BEACH\r\n        }\r\n    }\r\n\r\n    private pickBadlandsBiome(humidityIndex: number, weirdness: Climate.Parameter): Biomes {\r\n        if (humidityIndex < 2) {\r\n            return weirdness.max < 0 ? Biomes.ERODED_BADLANDS : Biomes.BADLANDS\r\n        } else {\r\n            return humidityIndex < 3 ? Biomes.BADLANDS : Biomes.WOODED_BADLANDS\r\n        }\r\n    }\r\n\r\n    private pickPlateauBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        if (weirdness.max < 0) {\r\n            return PLATEAU_BIOMES[temperatureIndex][humidityIndex]\r\n        } else {\r\n            const biome = PLATEAU_BIOMES_VARIANT[temperatureIndex][humidityIndex]\r\n            return biome == null ? PLATEAU_BIOMES[temperatureIndex][humidityIndex] : biome\r\n        }\r\n    }\r\n\r\n    private pickPeakBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        if (temperatureIndex <= 2) {\r\n            return weirdness.max < 0 ? Biomes.JAGGED_PEAKS : Biomes.FROZEN_PEAKS\r\n        } else {\r\n            return temperatureIndex == 3\r\n                ? Biomes.STONY_PEAKS\r\n                : this.pickBadlandsBiome(humidityIndex, weirdness)\r\n        }\r\n    }\r\n\r\n    private pickSlopeBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        if (temperatureIndex >= 3) {\r\n            return this.pickPlateauBiome(temperatureIndex, humidityIndex, weirdness)\r\n        } else {\r\n            return humidityIndex <= 1 ? Biomes.SNOWY_SLOPES : Biomes.GROVE\r\n        }\r\n    }\r\n\r\n    private pickExtremeHillsBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        const extremeHillsBiome = EXTREME_HILLS[temperatureIndex][humidityIndex]\r\n        return extremeHillsBiome == null\r\n            ? this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n            : extremeHillsBiome\r\n    }\r\n\r\n    // push result\r\n\r\n    private addSurfaceBiome(\r\n        biomes: BuilderOutput,\r\n        temperature: Climate.Parameter,\r\n        humidity: Climate.Parameter,\r\n        continentalness: Climate.Parameter,\r\n        erosion: Climate.Parameter,\r\n        weirdness: Climate.Parameter,\r\n        offset: number,\r\n        biome: Biomes\r\n    ) {\r\n        biomes.push(\r\n            Pair.of(\r\n                Climate.parameters(\r\n                    temperature,\r\n                    humidity,\r\n                    continentalness,\r\n                    erosion,\r\n                    Climate.Parameter.point(0.0),\r\n                    weirdness,\r\n                    offset\r\n                ),\r\n                biome\r\n            )\r\n        )\r\n        biomes.push(\r\n            Pair.of(\r\n                Climate.parameters(\r\n                    temperature,\r\n                    humidity,\r\n                    continentalness,\r\n                    erosion,\r\n                    Climate.Parameter.point(1.0),\r\n                    weirdness,\r\n                    offset\r\n                ),\r\n                biome\r\n            )\r\n        )\r\n    }\r\n\r\n    private addUndergroundBiome(\r\n        biomes: BuilderOutput,\r\n        temperature: Climate.Parameter,\r\n        humidity: Climate.Parameter,\r\n        continentalness: Climate.Parameter,\r\n        erosion: Climate.Parameter,\r\n        weirdness: Climate.Parameter,\r\n        offset: number,\r\n        biome: Biomes\r\n    ) {\r\n        biomes.push(\r\n            Pair.of(\r\n                Climate.parameters(\r\n                    temperature,\r\n                    humidity,\r\n                    continentalness,\r\n                    erosion,\r\n                    Climate.Parameter.span(0.2, 0.9),\r\n                    weirdness,\r\n                    offset\r\n                ),\r\n                biome\r\n            )\r\n        )\r\n    }\r\n}\r\n","/*\r\nimport { ServicesClass } from \"./managers/services-class\"\r\nimport { Services, setServices } from \"./managers/services\"\r\n*/\r\nimport Cpp, { EmscriptenModule } from \"../wasm/cpp\"\r\nimport CppWasm from \"../wasm/cpp.wasm\"\r\nimport { Biomes } from \"./surface-generation/biomes/biomes\"\r\nimport { Climate } from \"./surface-generation/biomes/climate\"\r\nimport { Pair } from \"./surface-generation/biomes/consumer\"\r\nimport { OverworldBiomeBuilder } from \"./surface-generation/biomes/overworld-biome-builder\"\r\n\r\n/*\r\nasync function main() {\r\n    const ammo = await Ammo()\r\n\r\n    setServices(new ServicesClass({ ammo }))\r\n\r\n    await Services.start()\r\n}\r\n*/\r\n\r\nasync function loadWASM(): Promise<EmscriptenModule> {\r\n    return Cpp({\r\n        wasmBinary: CppWasm,\r\n        print: console.log.bind(console),\r\n        locateFile: (path: string) => `/build/wasm/${path}`,\r\n        mainScriptUrlOrBlob: \"/build/wasm/cpp.js\",\r\n    })\r\n}\r\n\r\nasync function test_cpp() {\r\n    const module = await loadWASM()\r\n    module._init()\r\n}\r\n\r\ntest_cpp()\r\n\r\nfunction test_js() {\r\n    const builder = new OverworldBiomeBuilder()\r\n\r\n    const biomes = [] as Pair<Climate.ParameterPoint, Biomes>[]\r\n    builder.addBiomes(biomes)\r\n\r\n    for (const pair of biomes) {\r\n        console.log(pair.second)\r\n    }\r\n\r\n    console.log(\"done\")\r\n}\r\n\r\ntest_js()\r\n\r\n// main()\r\n"],"names":["Cpp"],"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"}