{"version":3,"file":"index.js","sources":["../src/src/ts/engine-bridge/module.ts","../src/src/ts/engine-bridge/read-write-utils.ts","../src/src/ts/engine-bridge/queue-messages.ts","../src/src/ts/engine-bridge/messages/output-messages.ts","../src/src/ts/engine-bridge/queues.ts","../src/src/ts/external-services/services.ts","../src/src/ts/external-services/game-loop.ts","../src/src/ts/browser-main.ts"],"sourcesContent":["import EngineStartup, { EmscriptenModule } from \"../../wasm/engine\"\r\nimport EngineWasm from \"../../wasm/engine.wasm\"\r\n\r\nexport let Engine: EmscriptenModule\r\n\r\nexport async function loadEngine(): Promise<void> {\r\n    Engine = await EngineStartup({\r\n        wasmBinary: EngineWasm,\r\n        print: console.log.bind(console),\r\n        locateFile: (path: string) => `/build/wasm/${path}`,\r\n        mainScriptUrlOrBlob: \"/build/wasm/engine.js\",\r\n    })\r\n\r\n    return\r\n}\r\n","import { Engine } from \"./module\"\r\n\r\nexport function writeU32(ptr: number, value: number): void {\r\n    if (ptr % 4 !== 0) {\r\n        throw new Error(\"TODO implement not aligned writeU32\")\r\n    }\r\n    Engine.HEAPU32[ptr / 4] = value\r\n}\r\n\r\nexport function readU32(ptr: number): number {\r\n    if (ptr % 4 !== 0) {\r\n        throw new Error(\"TODO implement not aligned readU32\")\r\n    }\r\n    return Engine.HEAPU32[ptr / 4]\r\n}\r\n","import { readU32, writeU32 } from \"./read-write-utils\"\r\n\r\nexport const MESSAGES_SIZE_IN_BYTES = 64\r\nexport const MESSAGES_BODY_SIZE_IN_BYTES = MESSAGES_SIZE_IN_BYTES - 4\r\n\r\nexport enum InputMessageId {\r\n    NULL_ID = 0,\r\n\r\n    // Input\r\n    MOUSE_MOVE,\r\n    MOUSE_DOWN,\r\n    MOUSE_UP,\r\n}\r\n\r\nexport abstract class InputMessage {\r\n    static ID = InputMessageId.NULL_ID\r\n\r\n    private ptr: number | undefined = undefined\r\n    private size = 0\r\n\r\n    protected writeU32(value: number) {\r\n        if (this.ptr === undefined) {\r\n            throw new Error(\"InputMessage ptr is not set.\")\r\n        }\r\n\r\n        writeU32(this.ptr, value)\r\n        this.seek(4)\r\n    }\r\n\r\n    private seek(amount: number): void {\r\n        if (this.ptr === undefined) {\r\n            throw new Error(\"InputMessage ptr is not set.\")\r\n        }\r\n\r\n        if (this.size + amount > MESSAGES_BODY_SIZE_IN_BYTES) {\r\n            throw new Error(\"Message body exceeds size.\")\r\n        }\r\n\r\n        this.ptr += amount\r\n        this.size += amount\r\n    }\r\n\r\n    public setPtr(ptr: number) {\r\n        this.ptr = ptr\r\n    }\r\n\r\n    public abstract serialize(): void\r\n}\r\n\r\nexport type InputMessageClass = {\r\n    new (ptr: number): InputMessage\r\n    ID: InputMessageId\r\n}\r\n\r\nexport enum OutputMessageId {\r\n    NULL_ID = 0,\r\n\r\n    // Render\r\n    ADD_OBJECT,\r\n    REMOVE_OBJECT,\r\n\r\n    // Resources\r\n    REQUEST_TEXTURE,\r\n    REQUEST_MODEL,\r\n    REQUEST_ANIMATION,\r\n\r\n    // Test\r\n\r\n    TEST_CALLBACK,\r\n}\r\n\r\nexport abstract class OutputMessage {\r\n    static ID = OutputMessageId.NULL_ID\r\n\r\n    private avaiableBytesCount = MESSAGES_BODY_SIZE_IN_BYTES\r\n\r\n    constructor(private ptr: number) {}\r\n\r\n    protected readU32(): number {\r\n        const result = readU32(this.ptr)\r\n        this.seek(4)\r\n        return result\r\n    }\r\n\r\n    private seek(amount: number): void {\r\n        if (this.avaiableBytesCount < amount) {\r\n            throw new Error(\"OutputMessage out of range.\")\r\n        }\r\n\r\n        this.ptr += amount\r\n        this.avaiableBytesCount -= amount\r\n    }\r\n\r\n    abstract deserialize(): void\r\n    abstract apply(): void\r\n}\r\n\r\ntype OutputMessageClass = {\r\n    new (ptr: number): OutputMessage\r\n    ID: OutputMessageId\r\n}\r\n\r\nconst OUTPUT_CLASSES: {\r\n    [key in OutputMessageId]?: OutputMessageClass\r\n} = {}\r\n\r\nexport function registerOutputClass(clazz: OutputMessageClass): void {\r\n    const id = clazz.ID\r\n\r\n    if (id === OutputMessageId.NULL_ID) {\r\n        throw new Error(\"ID for OutputMessage is not set.\")\r\n    }\r\n\r\n    if (OUTPUT_CLASSES[id] !== undefined) {\r\n        throw new Error(\"Output class is already registered.\")\r\n    }\r\n\r\n    OUTPUT_CLASSES[id] = clazz\r\n}\r\n\r\nexport function getOutputMessageClass(id: OutputMessageId): OutputMessageClass | undefined {\r\n    return OUTPUT_CLASSES[id]\r\n}\r\n","import { OutputMessage, OutputMessageId, registerOutputClass } from \"../queue-messages\"\r\n\r\nclass TestCallback extends OutputMessage {\r\n    static ID = OutputMessageId.TEST_CALLBACK\r\n\r\n    test_num: number | undefined\r\n    test_str_ptr: number | undefined\r\n    test_callback_ptr: number | undefined\r\n\r\n    deserialize(): void {\r\n        this.test_num = this.readU32()\r\n        this.test_str_ptr = this.readU32()\r\n        this.test_callback_ptr = this.readU32()\r\n    }\r\n\r\n    apply(): void {\r\n        debugger\r\n    }\r\n}\r\n\r\nregisterOutputClass(TestCallback)\r\n","// Queues\r\n\r\nimport { Engine } from \"./module\"\r\nimport {\r\n    InputMessage,\r\n    getOutputMessageClass,\r\n    InputMessageId,\r\n    MESSAGES_SIZE_IN_BYTES,\r\n    OutputMessageId,\r\n    InputMessageClass,\r\n} from \"./queue-messages\"\r\nimport { readU32, writeU32 } from \"./read-write-utils\"\r\nimport \"./messages/output-messages\"\r\n\r\n// Queues\r\n\r\nconst MESSAGES_MAX_COUNT = 1024\r\n\r\nlet inputQueue: number\r\nlet outputQueue: number\r\n\r\nexport class Queues {\r\n    static init(): void {\r\n        inputQueue = Engine._get_input_queue_ptr()\r\n        outputQueue = Engine._get_output_queue_ptr()\r\n    }\r\n\r\n    static processOutputQueue(): void {\r\n        const messagesCount = readU32(outputQueue)\r\n\r\n        for (let messageIndex = 0; messageIndex < messagesCount; messageIndex++) {\r\n            const msgPtr = outputQueue + 4 + messageIndex * MESSAGES_SIZE_IN_BYTES\r\n\r\n            const id = readU32(msgPtr) as OutputMessageId\r\n            const clazz = getOutputMessageClass(id)\r\n\r\n            if (clazz === undefined) {\r\n                throw new Error(\"Output message class is not registered.\")\r\n            }\r\n\r\n            const message = new clazz(msgPtr + 4)\r\n            message.deserialize()\r\n            message.apply()\r\n        }\r\n    }\r\n\r\n    static pushMessage<T extends InputMessage>(data: T) {\r\n        const id = (data.constructor as InputMessageClass).ID\r\n        if (id === InputMessageId.NULL_ID) {\r\n            throw new Error(\"ID for InputMessage is not set.\")\r\n        }\r\n\r\n        const messagesCount = readU32(inputQueue)\r\n        if (messagesCount >= MESSAGES_MAX_COUNT) {\r\n            throw new Error(\"Input queue is full.\")\r\n        }\r\n\r\n        const msgPtr = inputQueue + 4 + messagesCount * MESSAGES_SIZE_IN_BYTES\r\n        writeU32(msgPtr, id as number)\r\n\r\n        data.setPtr(msgPtr + 4)\r\n        data.serialize()\r\n\r\n        writeU32(inputQueue, messagesCount + 1)\r\n    }\r\n}\r\n","import { Queues } from \"../engine-bridge/queues\"\r\n\r\nexport class Services {\r\n    static init(): void {\r\n        Queues.init()\r\n    }\r\n\r\n    static process(dt: number): void {=\r\n        Queues.processOutputQueue()\r\n    }\r\n}\r\n","import { Services } from \"./services\"\r\n\r\nlet lastTickTime: number | undefined = undefined\r\n\r\nexport class GameLoop {\r\n    static start(): void {\r\n        requestAnimationFrame(GameLoop.tick)\r\n    }\r\n\r\n    static pause(): void {\r\n        //\r\n    }\r\n\r\n    static stop(): void {\r\n        //\r\n    }\r\n\r\n    static tick(time: number): void {\r\n        if (lastTickTime === undefined) {\r\n            lastTickTime = time\r\n        }\r\n\r\n        const dt = (time - lastTickTime) / 1000\r\n        lastTickTime = time\r\n\r\n        Services.process(dt)\r\n\r\n        requestAnimationFrame(GameLoop.tick)\r\n    }\r\n}\r\n","import { Engine, loadEngine } from \"./engine-bridge/module\"\r\nimport { GameLoop } from \"./external-services/game-loop\"\r\nimport { Services } from \"./external-services/services\"\r\n\r\nasync function main() {\r\n    // load the engine first\r\n    await loadEngine()\r\n    Engine._init()\r\n\r\n    Services.init()\r\n\r\n    GameLoop.start()\r\n}\r\n\r\nfunction shutdown() {\r\n    GameLoop.stop()\r\n\r\n    Engine._finalize()\r\n    Engine._print_memory_stats()\r\n\r\n    //\r\n}\r\n\r\nmain()\r\n"],"names":["EngineStartup"],"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"}