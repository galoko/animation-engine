{"version":3,"file":"index.js","sources":["../src/utils/render-utils.ts","../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat2.js","../node_modules/gl-matrix/esm/mat2d.js","../node_modules/gl-matrix/esm/mat3.js","../node_modules/gl-matrix/esm/mat4.js","../node_modules/gl-matrix/esm/vec3.js","../node_modules/gl-matrix/esm/vec4.js","../node_modules/gl-matrix/esm/quat.js","../node_modules/gl-matrix/esm/quat2.js","../node_modules/gl-matrix/esm/vec2.js","../src/models/bone.ts","../src/managers/animation-processor.ts","../src/models/skin.ts","../src/models/model.ts","../src/components/component.ts","../src/components/transformComponent.ts","../src/components/modelComponent.ts","../src/managers/services.ts","../src/components/textureComponent.ts","../src/models/model-def.ts","../src/models/debug-line.ts","../src/managers/render.ts","../src/components/collisionComponent.ts","../src/components/phyicsComponent.ts","../src/models/physics-def.ts","../src/managers/physics.ts","../src/models/animation.ts","../src/managers/loaders.ts","../src/managers/resource-manager.ts","../src/managers/world.ts","../src/managers/gameloop.ts","../src/entities/entity.ts","../src/entities/object.ts","../src/models/collision-primitives.ts","../src/models/templates/capsule-def.ts","../src/models/templates/simple-model-def.ts","../src/surface-generation/biomes/biomes.ts","../src/surface-generation/biomes/climate.ts","../src/surface-generation/biomes/consumer.ts","../src/surface-generation/biomes/overworld-biome-builder.ts","../src/managers/map-loader.ts","../src/managers/input-manager.ts","../src/managers/services-class.ts","../src/surface-generation/biomes/blocks.ts","../src/surface-generation/biomes/mth.ts","../node_modules/crypt/crypt.js","../node_modules/charenc/charenc.js","../node_modules/is-buffer/index.js","../node_modules/md5/md5.js","../src/surface-generation/biomes/random.ts","../src/surface-generation/biomes/noise/simplex-noise.ts","../src/surface-generation/biomes/noise/improved-noise.ts","../src/surface-generation/biomes/noise/perlin-noise.ts","../src/surface-generation/biomes/noise/normal-noise.ts","../src/surface-generation/biomes/noise-data.ts","../src/surface-generation/biomes/surface-rules.ts","../src/surface-generation/biomes/cubic-spline.ts","../src/surface-generation/biomes/terrain-shaper.ts","../src/surface-generation/biomes/noise/blended-noise.ts","../src/surface-generation/biomes/pos.ts","../src/surface-generation/biomes/aquifer.ts","../src/surface-generation/biomes/surface-system.ts","../src/surface-generation/biomes/chunk-generator.ts","../node_modules/js-sha256/src/sha256.js","../src/surface-generation/biomes/biome-source.ts","../src/surface-generation/biomes/chunk-status.ts","../src/surface-generation/biomes/chunks.ts","../src/surface-generation/biomes/test.ts","../src/index.ts"],"sourcesContent":["export type CompiledShader = {\r\n    program: WebGLProgram\r\n    [key: string]: WebGLUniformLocation | number\r\n}\r\n\r\nexport function compileShader(\r\n    gl: WebGLRenderingContext,\r\n    vertText: string,\r\n    fragText: string,\r\n    parameters: Array<string>\r\n): CompiledShader {\r\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n\r\n    gl.shaderSource(vertexShader, vertText)\r\n    gl.shaderSource(fragmentShader, fragText)\r\n\r\n    gl.compileShader(vertexShader)\r\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\r\n        throw new Error(\r\n            `ERROR compiling vertex shader for ${name}! ${gl.getShaderInfoLog(vertexShader)}`\r\n        )\r\n    }\r\n\r\n    gl.compileShader(fragmentShader)\r\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n        throw new Error(\r\n            `ERROR compiling fragment shader for ${name}! ${gl.getShaderInfoLog(fragmentShader)}`\r\n        )\r\n    }\r\n\r\n    const program = gl.createProgram()!\r\n    gl.attachShader(program, vertexShader)\r\n    gl.attachShader(program, fragmentShader)\r\n    gl.linkProgram(program)\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        throw new Error(`ERROR linking program! ${gl.getProgramInfoLog(program)}`)\r\n    }\r\n    gl.validateProgram(program)\r\n    if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n        throw new Error(`ERROR validating program! ${gl.getProgramInfoLog(program)}`)\r\n    }\r\n\r\n    const result = { program }\r\n\r\n    parameters.forEach((parameter: string): void => {\r\n        const uniformLocation = gl.getUniformLocation(program, parameter)\r\n        if (uniformLocation !== null) {\r\n            result[parameter] = uniformLocation\r\n        } else {\r\n            const attributeLocation = gl.getAttribLocation(program, parameter)\r\n            if (attributeLocation !== -1) {\r\n                result[parameter] = attributeLocation\r\n            } else {\r\n                console.warn(`${parameter} is not found in shader.`)\r\n            }\r\n        }\r\n    })\r\n\r\n    return result\r\n}\r\n\r\nfunction glEnumToString(gl: WebGLRenderingContext, value: number): string {\r\n    // Optimization for the most common enum:\r\n    if (value === gl.NO_ERROR) {\r\n        return \"NO_ERROR\"\r\n    }\r\n    for (const p in gl) {\r\n        if (gl[p] === value) {\r\n            return p\r\n        }\r\n    }\r\n    return \"0x\" + value.toString(16)\r\n}\r\n\r\nfunction createGLErrorWrapper(context: WebGLRenderingContext, fname: string) {\r\n    return function (...rest) {\r\n        // eslint-disable-next-line prefer-spread\r\n        const rv = context[fname].apply(context, rest)\r\n        const err = context.getError()\r\n        if (err !== context.NO_ERROR)\r\n            throw \"GL error \" + glEnumToString(context, err) + \" in \" + fname\r\n        return rv\r\n    }\r\n}\r\n\r\nexport function create3DContextWithWrapperThatThrowsOnGLError(\r\n    context: WebGLRenderingContext\r\n): WebGLRenderingContext {\r\n    const wrap = {\r\n        getError: function () {\r\n            return context.getError()\r\n        },\r\n    }\r\n    for (const i in context) {\r\n        if (typeof context[i] === \"function\") {\r\n            wrap[i] = createGLErrorWrapper(context, i)\r\n        } else {\r\n            wrap[i] = context[i]\r\n        }\r\n    }\r\n\r\n    return wrap as WebGLRenderingContext\r\n}\r\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2\n *\n * @param {ReadonlyMat2} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2\n *\n * @param {ReadonlyMat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {ReadonlyMat2} L the lower triangular matrix\n * @param {ReadonlyMat2} D the diagonal matrix\n * @param {ReadonlyMat2} U the upper triangular matrix\n * @param {ReadonlyMat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 2x3 Matrix\n * @module mat2d\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, b,\n *  c, d,\n *  tx, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, b, 0,\n *  c, d, 0,\n *  tx, ty, 1]\n * </pre>\n * The last column is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2d} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat2d} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2d\n *\n * @param {ReadonlyMat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q a normalized quaternion\n * @param {ReadonlyVec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Creates a dual quat from a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyVec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {ReadonlyMat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} real part\n */\n\nexport var getReal = quat.copy;\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} dual part\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\n\nexport var setReal = quat.copy;\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {quat2} out\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @returns {quat2} out\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n * @function\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = quat.dot;\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Calculates the length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\n\nexport var length = quat.length;\n/**\n * Alias for {@link quat2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat2} a the first dual quaternion.\n * @param {ReadonlyQuat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat2} a the first dual quat.\n * @param {ReadonlyQuat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import { vec3, quat } from \"gl-matrix\"\r\n\r\nexport const STRIDE = 1 + 3 + 4\r\n\r\nexport const HUMAN_BONES_START = 1000\r\nexport const HUMAN_BONES_COUNT = 13\r\n\r\nconst BONE_NAME_TO_BONE_ID = [\r\n    \"Spine\",\r\n    \"UpperSpine\",\r\n    \"Neck\",\r\n    \"UpperLeg.R\",\r\n    \"LowerLeg.R\",\r\n    \"Foot.R\",\r\n    \"UpperLeg.L\",\r\n    \"LowerLeg.L\",\r\n    \"Foot.L\",\r\n    \"UpperArm.R\",\r\n    \"LowerArm.R\",\r\n    \"UpperArm.L\",\r\n    \"LowerArm.L\",\r\n]\r\n\r\nconst SPINE = boneNameToBoneId(\"Spine\")\r\nconst UPPER_SPINE = boneNameToBoneId(\"UpperSpine\")\r\nconst NECK = boneNameToBoneId(\"Neck\")\r\nconst UPPER_LEG_R = boneNameToBoneId(\"UpperLeg.R\")\r\nconst LOWER_LEG_R = boneNameToBoneId(\"LowerLeg.R\")\r\nconst FOOT_R = boneNameToBoneId(\"Foot.R\")\r\nconst UPPER_LEG_L = boneNameToBoneId(\"UpperLeg.L\")\r\nconst LOWER_LEG_L = boneNameToBoneId(\"LowerLeg.L\")\r\nconst FOOT_L = boneNameToBoneId(\"Foot.L\")\r\nconst UPPER_ARM_R = boneNameToBoneId(\"UpperArm.R\")\r\nconst LOWER_ARM_R = boneNameToBoneId(\"LowerArm.R\")\r\nconst UPPER_ARM_L = boneNameToBoneId(\"UpperArm.L\")\r\nconst LOWER_ARM_L = boneNameToBoneId(\"LowerArm.L\")\r\n\r\nexport function boneIdToBoneName(id: number): string {\r\n    return BONE_NAME_TO_BONE_ID[id - HUMAN_BONES_START]\r\n}\r\n\r\nexport function boneNameToBoneId(name: string): number {\r\n    const index = BONE_NAME_TO_BONE_ID.indexOf(name)\r\n    if (index === -1) {\r\n        throw new Error(\"Unknown bone\")\r\n    }\r\n    return HUMAN_BONES_START + index\r\n}\r\n\r\nconst HUMAN_SKELETON = new Map<number, number>()\r\nHUMAN_SKELETON.set(UPPER_SPINE, SPINE)\r\nHUMAN_SKELETON.set(NECK, UPPER_SPINE)\r\n\r\nHUMAN_SKELETON.set(LOWER_LEG_R, UPPER_LEG_R)\r\nHUMAN_SKELETON.set(FOOT_R, LOWER_LEG_R)\r\n\r\nHUMAN_SKELETON.set(LOWER_LEG_L, UPPER_LEG_L)\r\nHUMAN_SKELETON.set(FOOT_L, LOWER_LEG_L)\r\n\r\nHUMAN_SKELETON.set(UPPER_ARM_R, UPPER_SPINE)\r\nHUMAN_SKELETON.set(LOWER_ARM_R, UPPER_ARM_R)\r\n\r\nHUMAN_SKELETON.set(UPPER_ARM_L, UPPER_SPINE)\r\nHUMAN_SKELETON.set(LOWER_ARM_L, UPPER_ARM_L)\r\n\r\nexport function getHumanBoneParent(id: number): number | undefined {\r\n    return HUMAN_SKELETON.get(id)\r\n}\r\n\r\nexport class Bone {\r\n    static readonly STRIDE = STRIDE\r\n\r\n    id: number\r\n    translation: vec3\r\n    rotation: quat\r\n}\r\n","import { mat4 } from \"gl-matrix\"\r\nimport { HUMAN_BONES_COUNT, HUMAN_BONES_START } from \"../models/bone\"\r\nimport { Skin } from \"../models/skin\"\r\nimport { Animation } from \"../models/animation\"\r\n\r\nexport function calculateSkinningMatrices(\r\n    skin: Skin,\r\n    animation: Animation,\r\n    s: number,\r\n    buffer: ArrayBuffer\r\n): Float32Array {\r\n    const worldMatrices = new Array(HUMAN_BONES_COUNT)\r\n    const globalMatrices = new Array(HUMAN_BONES_COUNT)\r\n\r\n    for (let boneId = HUMAN_BONES_START; boneId < HUMAN_BONES_START + HUMAN_BONES_COUNT; boneId++) {\r\n        const boneParentIndex = skin.getBoneParentIndex(boneId)\r\n\r\n        const boneIndex = skin.getBoneIndex(boneId)\r\n        if (boneIndex === undefined) {\r\n            throw new Error(\"Unknown bone\")\r\n        }\r\n\r\n        const bone = skin.bones[boneIndex]\r\n\r\n        const invMatrix = skin.inverseMatrices[boneIndex]\r\n\r\n        const rotation = animation.getRotation(boneId, s)\r\n\r\n        const worldMatrix = mat4.create()\r\n        mat4.fromRotationTranslation(worldMatrix, rotation, bone.translation)\r\n\r\n        if (boneParentIndex !== undefined) {\r\n            const parentGlobalMatrix = globalMatrices[boneParentIndex]\r\n            mat4.mul(worldMatrix, parentGlobalMatrix, worldMatrix)\r\n        }\r\n\r\n        globalMatrices[boneIndex] = mat4.clone(worldMatrix)\r\n\r\n        mat4.mul(worldMatrix, worldMatrix, invMatrix)\r\n        worldMatrices[boneIndex] = worldMatrix\r\n    }\r\n\r\n    const result = new Float32Array(buffer, 0, skin.bones.length * 16)\r\n    for (let boneIndex = 0; boneIndex < skin.bones.length; boneIndex++) {\r\n        result.set(worldMatrices[boneIndex], boneIndex * 16)\r\n    }\r\n\r\n    return result\r\n}\r\n","import { mat4 } from \"gl-matrix\"\r\nimport type { AttributeDef } from \"../managers/render\"\r\nimport { Bone, getHumanBoneParent, HUMAN_BONES_COUNT, HUMAN_BONES_START } from \"./bone\"\r\n\r\nconst ATTRIBUTES: AttributeDef[] = [\r\n    {\r\n        name: \"p\",\r\n        size: 3,\r\n    },\r\n    {\r\n        name: \"n\",\r\n        size: 3,\r\n    },\r\n    {\r\n        name: \"uv\",\r\n        size: 2,\r\n    },\r\n    {\r\n        name: \"w\",\r\n        size: 4,\r\n    },\r\n    {\r\n        name: \"j\",\r\n        size: 4,\r\n    },\r\n]\r\nconst STRIDE = ATTRIBUTES.reduce((acum, value) => acum + value.size, 0)\r\n\r\nexport class Skin {\r\n    static readonly ATTRIBUTES = ATTRIBUTES\r\n    static readonly STRIDE = STRIDE\r\n\r\n    readonly inverseMatrices: mat4[]\r\n    readonly boneIdToBoneIndex: Map<number, number>\r\n\r\n    constructor(\r\n        readonly vertices: WebGLBuffer,\r\n        readonly vertexCount: number,\r\n        readonly indices: WebGLBuffer,\r\n        readonly indexCount: number,\r\n        readonly bones: Bone[]\r\n    ) {\r\n        this.inverseMatrices = new Array(bones.length)\r\n\r\n        this.boneIdToBoneIndex = new Map()\r\n        for (let i = 0; i < bones.length; i++) {\r\n            this.boneIdToBoneIndex.set(bones[i].id, i)\r\n        }\r\n\r\n        this.buildInverseMatrices()\r\n    }\r\n\r\n    public getBoneIndex(id: number): number | undefined {\r\n        return this.boneIdToBoneIndex.get(id)\r\n    }\r\n\r\n    public getBone(id: number): Bone | null {\r\n        const index = this.getBoneIndex(id)\r\n        if (index === undefined) {\r\n            return null\r\n        }\r\n        return this.bones[index]\r\n    }\r\n\r\n    public getBoneParent(id: number): Bone | null {\r\n        const parentId = getHumanBoneParent(id)\r\n        if (parentId === undefined) {\r\n            return null\r\n        }\r\n\r\n        const parentIndex = this.getBoneIndex(parentId)\r\n        if (parentIndex === undefined) {\r\n            throw new Error(\"Unknown bone\")\r\n        }\r\n\r\n        return this.bones[parentIndex]\r\n    }\r\n\r\n    public getBoneParentIndex(id: number): number | undefined {\r\n        const parentId = getHumanBoneParent(id)\r\n        if (parentId === undefined) {\r\n            return undefined\r\n        }\r\n\r\n        return this.getBoneIndex(parentId)\r\n    }\r\n\r\n    private buildInverseMatrices() {\r\n        for (\r\n            let boneId = HUMAN_BONES_START;\r\n            boneId < HUMAN_BONES_START + HUMAN_BONES_COUNT;\r\n            boneId++\r\n        ) {\r\n            const boneIndex = this.getBoneIndex(boneId)\r\n            if (boneIndex === undefined) {\r\n                throw new Error(\"Unknown bone\")\r\n            }\r\n\r\n            const parentBoneId = getHumanBoneParent(boneId)\r\n            const parentBoneIndex =\r\n                parentBoneId !== undefined ? this.boneIdToBoneIndex.get(parentBoneId) : undefined\r\n\r\n            const bone = this.bones[boneIndex]\r\n            const invMatrix = mat4.create()\r\n            mat4.fromRotationTranslation(invMatrix, bone.rotation, bone.translation)\r\n\r\n            if (parentBoneIndex !== undefined) {\r\n                const parentMatrix = mat4.clone(this.inverseMatrices[parentBoneIndex])\r\n                mat4.invert(parentMatrix, parentMatrix)\r\n                mat4.mul(invMatrix, parentMatrix, invMatrix)\r\n            }\r\n\r\n            mat4.invert(invMatrix, invMatrix)\r\n\r\n            this.inverseMatrices[boneIndex] = invMatrix\r\n        }\r\n    }\r\n}\r\n","import type { AttributeDef } from \"../managers/render\"\r\n\r\nconst ATTRIBUTES: AttributeDef[] = [\r\n    {\r\n        name: \"p\",\r\n        size: 3,\r\n    },\r\n    {\r\n        name: \"n\",\r\n        size: 3,\r\n    },\r\n    {\r\n        name: \"uv\",\r\n        size: 2,\r\n    },\r\n]\r\nconst STRIDE = ATTRIBUTES.reduce((acum, value) => acum + value.size, 0)\r\n\r\nexport class Model {\r\n    static readonly ATTRIBUTES = ATTRIBUTES\r\n    static readonly STRIDE = STRIDE\r\n\r\n    constructor(\r\n        readonly vertices: WebGLBuffer,\r\n        readonly vertexCount: number,\r\n        readonly indices: WebGLBuffer,\r\n        readonly indexCount: number\r\n    ) {}\r\n}\r\n","import { Entity } from \"../entities/entity\"\r\nexport abstract class Component {\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    static ID: string = undefined!\r\n    owner: Entity\r\n\r\n    constructor() {\r\n        //\r\n    }\r\n}\r\n","import { quat, vec3, vec4 } from \"gl-matrix\"\r\nimport { Component } from \"./component\"\r\n\r\nexport interface TransformData {\r\n    pos: vec3\r\n    size: vec3\r\n    rotation: quat\r\n}\r\n\r\nexport function cloneTransform(transform: TransformData): TransformData {\r\n    return {\r\n        pos: vec3.clone(transform.pos),\r\n        size: vec3.clone(transform.size),\r\n        rotation: quat.clone(transform.rotation),\r\n    }\r\n}\r\n\r\nexport class TransformComponent extends Component {\r\n    static ID = \"transform\"\r\n\r\n    constructor(public transform: TransformData) {\r\n        super()\r\n    }\r\n}\r\n","import { ModelDef } from \"../models/model-def\"\r\nimport { Component } from \"./component\"\r\n\r\nexport class ModelComponent extends Component {\r\n    static ID = \"model\"\r\n\r\n    constructor(public modelDef: ModelDef) {\r\n        super()\r\n    }\r\n}\r\n","import type { ServicesClass } from \"./services-class\"\r\n\r\nexport let Services: ServicesClass\r\n\r\nexport function setServices(value: ServicesClass): void {\r\n    if (Services != null) {\r\n        throw new Error(\"Services are set twice.\")\r\n    }\r\n    Services = value\r\n}\r\n","import { Services } from \"../managers/services\"\r\nimport { Component } from \"./component\"\r\n\r\nexport class TextureComponent extends Component {\r\n    static ID = \"texture\"\r\n\r\n    texture: WebGLTexture | undefined\r\n\r\n    constructor(texName: string) {\r\n        super()\r\n        this.loadTexture(texName)\r\n    }\r\n\r\n    private async loadTexture(texName: string): Promise<void> {\r\n        this.texture = await Services.resources.requireTexture(texName)\r\n    }\r\n}\r\n","import { vec4 } from \"gl-matrix\"\r\nimport { TransformData } from \"../components/transformComponent\"\r\nimport { Model } from \"./model\"\r\n\r\nexport type ModelOptions = {\r\n    texMul: number\r\n    colorOverride: vec4\r\n    alpha: boolean\r\n}\r\n\r\nexport type ModelDefEntry = {\r\n    model: Model\r\n    transform: TransformData\r\n    options?: Partial<ModelOptions>\r\n\r\n    tempZ?: number\r\n}\r\n\r\nconst DEFAULT_MODEL_OPTIONS = {\r\n    texMul: 1,\r\n    alpha: false,\r\n} as ModelOptions\r\n\r\nexport function getModelOptions(options?: Partial<ModelOptions>): ModelOptions {\r\n    return Object.assign({ ...DEFAULT_MODEL_OPTIONS }, options || {})\r\n}\r\n\r\nexport abstract class ModelDef {\r\n    abstract update(transform: Readonly<TransformData>): void\r\n    abstract getEntries(): ModelDefEntry[]\r\n}\r\n","import type { AttributeDef } from \"../managers/render\"\r\n\r\nconst ATTRIBUTES: AttributeDef[] = [\r\n    {\r\n        name: \"p\",\r\n        size: 3,\r\n    },\r\n    {\r\n        name: \"c\",\r\n        size: 3,\r\n    },\r\n]\r\nconst STRIDE = ATTRIBUTES.reduce((acum, value) => acum + value.size, 0)\r\n\r\nexport abstract class DebugLine {\r\n    static readonly ATTRIBUTES = ATTRIBUTES\r\n    static readonly STRIDE = STRIDE\r\n    static readonly MAX_DEBUG_LINES = 1000\r\n}\r\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport {\r\n    CompiledShader,\r\n    compileShader,\r\n    create3DContextWithWrapperThatThrowsOnGLError,\r\n} from \"../utils/render-utils\"\r\n\r\nimport generalVert from \"../shaders/general.vert\"\r\nimport generalFrag from \"../shaders/general.frag\"\r\n\r\nimport objectsVert from \"../shaders/objects.vert\"\r\nimport objectsFrag from \"../shaders/objects.frag\"\r\n\r\nimport coloredVert from \"../shaders/colored.vert\"\r\nimport coloredFrag from \"../shaders/colored.frag\"\r\n\r\nimport skinningVert from \"../shaders/skinning.vert\"\r\nimport skinningFrag from \"../shaders/skinning.frag\"\r\n\r\nimport { mat4, vec3, vec4 } from \"gl-matrix\"\r\nimport { calculateSkinningMatrices } from \"./animation-processor\"\r\nimport { Skin } from \"../models/skin\"\r\nimport { Model } from \"../models/model\"\r\nimport { Animation } from \"../models/animation\"\r\nimport { Entity } from \"../entities/entity\"\r\nimport { TransformComponent, TransformData } from \"../components/transformComponent\"\r\nimport { ModelComponent } from \"../components/modelComponent\"\r\nimport { TextureComponent } from \"../components/textureComponent\"\r\nimport { getModelOptions, ModelDefEntry, ModelOptions } from \"../models/model-def\"\r\nimport { DebugLine } from \"../models/debug-line\"\r\n\r\nconst ANIMATION_TEXTURE_SIZE = 1024\r\n\r\nconst UP = vec3.fromValues(0, 0, 1)\r\n\r\nexport type AttributeDef = {\r\n    name: string\r\n    size: number\r\n}\r\n\r\ntype DebugRect = {\r\n    start: vec3\r\n    end: vec3\r\n    vertical: number\r\n    horizontal: number\r\n    depth: number\r\n}\r\n\r\ntype Text = {\r\n    text: string\r\n    pos: vec3\r\n}\r\n\r\nexport function colorToRGBA(color: number) {\r\n    return [((color >> 16) & 0xff) / 0xff, ((color >> 8) & 0xff) / 0xff, (color & 0xff) / 0xff]\r\n}\r\nexport class Render {\r\n    public readonly gl: WebGLRenderingContext\r\n    public readonly anisotropic: EXT_texture_filter_anisotropic | null\r\n\r\n    public readonly ctx: CanvasRenderingContext2D\r\n\r\n    private readonly generalShader: CompiledShader\r\n    private readonly objectsShader: CompiledShader\r\n    private readonly coloredShader: CompiledShader\r\n    private readonly skinningShader: CompiledShader\r\n\r\n    private readonly matrices: WebGLTexture\r\n    private readonly matricesBuffer: Float32Array\r\n\r\n    private readonly viewMatrix: mat4\r\n    private readonly projectionMatrix: mat4\r\n\r\n    private readonly models: Set<Entity>\r\n    private readonly skins: Set<Entity>\r\n\r\n    private readonly debugLinesData: Float32Array\r\n    private debugLinesDataIndex: number\r\n    private readonly debugLineBuffer: WebGLBuffer\r\n\r\n    private readonly persistentDebugRects: DebugRect[] = []\r\n    private readonly texts: Text[] = []\r\n\r\n    constructor(\r\n        private readonly canvasWebGL: HTMLCanvasElement,\r\n        private readonly canvas2D: HTMLCanvasElement\r\n    ) {\r\n        this.models = new Set()\r\n        this.skins = new Set()\r\n\r\n        this.gl = this.canvasWebGL.getContext(\"webgl\", {\r\n            antialias: true,\r\n            powerPreference: \"high-performance\",\r\n        })!\r\n        this.matrices = this.gl.createTexture()!\r\n        this.matricesBuffer = new Float32Array(ANIMATION_TEXTURE_SIZE * 1 * 4)\r\n\r\n        const { gl, matrices } = this\r\n        gl.getExtension(\"OES_texture_float\")\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, matrices)\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            gl.RGBA,\r\n            ANIMATION_TEXTURE_SIZE,\r\n            1,\r\n            0,\r\n            gl.RGBA,\r\n            gl.FLOAT,\r\n            null\r\n        )\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n\r\n        this.projectionMatrix = mat4.create()\r\n        this.viewMatrix = mat4.create()\r\n\r\n        this.generalShader = compileShader(gl, generalVert, generalFrag, [\"p\", \"n\", \"mvp\"])\r\n        this.objectsShader = compileShader(gl, objectsVert, objectsFrag, [\r\n            \"p\",\r\n            \"n\",\r\n            \"uv\",\r\n            \"mvp\",\r\n            \"texture\",\r\n            \"model\",\r\n            \"texMul\",\r\n            \"useTexture\",\r\n            \"color\",\r\n        ])\r\n        this.coloredShader = compileShader(gl, coloredVert, coloredFrag, [\r\n            \"p\",\r\n            \"c\",\r\n            \"mvp\",\r\n            \"texture\",\r\n        ])\r\n        this.skinningShader = compileShader(gl, skinningVert, skinningFrag, [\r\n            \"p\",\r\n            \"n\",\r\n            \"uv\",\r\n            \"w\",\r\n            \"j\",\r\n            \"mvp\",\r\n            \"matrices\",\r\n            \"texture\",\r\n        ])\r\n\r\n        gl.clearColor(0.3, 0.4, 1.0, 1.0)\r\n\r\n        gl.enable(gl.CULL_FACE)\r\n        gl.enable(gl.DEPTH_TEST)\r\n\r\n        gl.enable(gl.BLEND)\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n\r\n        this.anisotropic = gl.getExtension(\"EXT_texture_filter_anisotropic\")\r\n\r\n        this.debugLinesData = new Float32Array(DebugLine.MAX_DEBUG_LINES * DebugLine.STRIDE)\r\n\r\n        this.debugLineBuffer = gl.createBuffer()!\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.debugLineBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.debugLinesData.byteLength, gl.DYNAMIC_DRAW)\r\n\r\n        this.debugLinesDataIndex = 0\r\n\r\n        this.ctx = this.canvas2D.getContext(\"2d\")!\r\n    }\r\n\r\n    private handleResize() {\r\n        const { canvasWebGL, canvas2D, gl } = this\r\n\r\n        const dpr = devicePixelRatio\r\n\r\n        const newWidth = Math.floor(document.body.clientWidth * dpr)\r\n        const newHeight = Math.floor(document.body.clientHeight * dpr)\r\n\r\n        if (canvasWebGL.width === newWidth && canvasWebGL.height === newHeight) {\r\n            return\r\n        }\r\n\r\n        canvas2D.style.width = newWidth / dpr + \"px\"\r\n        canvas2D.style.height = newHeight / dpr + \"px\"\r\n        canvas2D.width = newWidth\r\n        canvas2D.height = newHeight\r\n\r\n        canvasWebGL.style.width = newWidth / dpr + \"px\"\r\n        canvasWebGL.style.height = newHeight / dpr + \"px\"\r\n        canvasWebGL.width = newWidth\r\n        canvasWebGL.height = newHeight\r\n\r\n        this.ctx.resetTransform()\r\n        this.ctx.scale(dpr, dpr)\r\n\r\n        gl.viewport(0, 0, canvasWebGL.width, canvasWebGL.height)\r\n\r\n        mat4.perspective(\r\n            this.projectionMatrix,\r\n            (45 * Math.PI) / 180,\r\n            canvasWebGL.width / canvasWebGL.height,\r\n            0.1,\r\n            100\r\n        )\r\n    }\r\n\r\n    private defineVertexBuffer(\r\n        gl: WebGLRenderingContext,\r\n        shader: CompiledShader,\r\n        attributes: AttributeDef[],\r\n        stride: number\r\n    ): void {\r\n        let offset = 0\r\n        for (const attr of attributes) {\r\n            const attrNum = shader[attr.name] as number\r\n            if (attrNum !== undefined) {\r\n                gl.vertexAttribPointer(\r\n                    attrNum,\r\n                    attr.size,\r\n                    gl.FLOAT,\r\n                    false,\r\n                    stride * Float32Array.BYTES_PER_ELEMENT,\r\n                    offset * Float32Array.BYTES_PER_ELEMENT\r\n                )\r\n                gl.enableVertexAttribArray(attrNum)\r\n            }\r\n\r\n            offset += attr.size\r\n        }\r\n    }\r\n\r\n    setCamera(pos: vec3, lookAt: vec3): void {\r\n        mat4.lookAt(this.viewMatrix, pos, lookAt, UP)\r\n    }\r\n\r\n    private drawModel(\r\n        model: Model,\r\n        tex: WebGLTexture,\r\n        options: ModelOptions,\r\n        transform: TransformData\r\n    ) {\r\n        const { gl, objectsShader } = this\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, model.vertices)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.indices)\r\n\r\n        this.defineVertexBuffer(gl, objectsShader, Model.ATTRIBUTES, Model.STRIDE)\r\n\r\n        gl.useProgram(objectsShader.program)\r\n\r\n        const modelMatrix = mat4.create()\r\n        mat4.fromRotationTranslationScale(\r\n            modelMatrix,\r\n            transform.rotation,\r\n            transform.pos,\r\n            transform.size\r\n        )\r\n\r\n        const mvp = mat4.create()\r\n        mat4.multiply(mvp, mvp, this.projectionMatrix)\r\n        mat4.multiply(mvp, mvp, this.viewMatrix)\r\n        mat4.multiply(mvp, mvp, modelMatrix)\r\n\r\n        gl.activeTexture(gl.TEXTURE0)\r\n        gl.bindTexture(gl.TEXTURE_2D, tex)\r\n\r\n        gl.uniformMatrix4fv(objectsShader.mvp, false, mvp)\r\n        gl.uniformMatrix4fv(objectsShader.model, false, modelMatrix)\r\n        gl.uniform1i(objectsShader.texture, 0)\r\n        gl.uniform1f(objectsShader.texMul, options.texMul)\r\n        if (options.colorOverride) {\r\n            gl.uniform1f(objectsShader.useTexture, 0)\r\n            gl.uniform4fv(objectsShader.color, options.colorOverride)\r\n        } else {\r\n            gl.uniform1f(objectsShader.useTexture, 1)\r\n        }\r\n\r\n        gl.drawElements(gl.TRIANGLES, model.indexCount, gl.UNSIGNED_SHORT, 0)\r\n    }\r\n\r\n    private drawSkin(\r\n        skin: Skin,\r\n        tex: WebGLTexture,\r\n        animation: Animation,\r\n        s: number,\r\n        position: vec3\r\n    ) {\r\n        const { gl, skinningShader } = this\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, skin.vertices)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, skin.indices)\r\n\r\n        this.defineVertexBuffer(gl, skinningShader, Skin.ATTRIBUTES, Skin.STRIDE)\r\n\r\n        gl.useProgram(skinningShader.program)\r\n\r\n        const mvp = mat4.create()\r\n        mat4.multiply(mvp, mvp, this.projectionMatrix)\r\n        mat4.multiply(mvp, mvp, this.viewMatrix)\r\n        mat4.translate(mvp, mvp, position)\r\n\r\n        gl.activeTexture(gl.TEXTURE0)\r\n        gl.bindTexture(gl.TEXTURE_2D, tex)\r\n\r\n        gl.activeTexture(gl.TEXTURE1)\r\n        gl.bindTexture(gl.TEXTURE_2D, this.matrices)\r\n\r\n        const matricesData = calculateSkinningMatrices(\r\n            skin,\r\n            animation,\r\n            s,\r\n            this.matricesBuffer.buffer\r\n        )\r\n        gl.texSubImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            0,\r\n            0,\r\n            matricesData.length / 4,\r\n            1,\r\n            gl.RGBA,\r\n            gl.FLOAT,\r\n            matricesData\r\n        )\r\n\r\n        gl.uniformMatrix4fv(skinningShader.mvp, false, mvp)\r\n        gl.uniform1i(skinningShader.texture, 0)\r\n        gl.uniform1i(skinningShader.matrices, 1)\r\n\r\n        gl.drawElements(gl.TRIANGLES, skin.indexCount, gl.UNSIGNED_SHORT, 0)\r\n    }\r\n\r\n    add(entity: Entity): void {\r\n        const transform = entity.get(TransformComponent)\r\n        const model = entity.get(ModelComponent)\r\n        const texture = entity.get(TextureComponent)\r\n\r\n        if (transform && model && texture) {\r\n            this.models.add(entity)\r\n        }\r\n    }\r\n\r\n    addDebugRect(\r\n        start: vec3,\r\n        end: vec3,\r\n        vertical: number,\r\n        horizontal: number,\r\n        depth: number\r\n    ): void {\r\n        this.persistentDebugRects.push({\r\n            start,\r\n            end,\r\n            vertical,\r\n            horizontal,\r\n            depth,\r\n        })\r\n    }\r\n\r\n    addText(text: string, pos: vec3) {\r\n        this.texts.push({\r\n            text,\r\n            pos,\r\n        })\r\n    }\r\n\r\n    drawDebugRect(start: vec3, end: vec3, v: number, h: number, d: number): void {\r\n        const points = [\r\n            start, // 0\r\n            vec3.fromValues(start[0], start[1], end[2]), // 1\r\n            vec3.fromValues(start[0], end[1], start[2]), // 2\r\n            vec3.fromValues(end[0], start[1], start[2]), // 3\r\n\r\n            end, // 4\r\n            vec3.fromValues(end[0], end[1], start[2]), // 5\r\n            vec3.fromValues(end[0], start[1], end[2]), // 6\r\n            vec3.fromValues(start[0], end[1], end[2]), // 7\r\n        ]\r\n\r\n        this.drawDebugLine(points[0], points[1], v, v)\r\n        this.drawDebugLine(points[0], points[2], d, d)\r\n        this.drawDebugLine(points[0], points[3], h, h)\r\n\r\n        this.drawDebugLine(points[2], points[7], v, v)\r\n        this.drawDebugLine(points[3], points[6], v, v)\r\n        this.drawDebugLine(points[1], points[6], h, h)\r\n        this.drawDebugLine(points[2], points[5], h, h)\r\n        this.drawDebugLine(points[1], points[7], d, d)\r\n        this.drawDebugLine(points[3], points[5], d, d)\r\n\r\n        this.drawDebugLine(points[4], points[5], v, v)\r\n        this.drawDebugLine(points[4], points[6], d, d)\r\n        this.drawDebugLine(points[4], points[7], h, h)\r\n    }\r\n\r\n    drawDebugLine(start: vec3, end: vec3, color1: number, color2: number): void {\r\n        if (this.debugLinesDataIndex + 2 > DebugLine.MAX_DEBUG_LINES) {\r\n            throw new Error(\"Too many debug lines.\")\r\n        }\r\n\r\n        const [r1, g1, b1] = colorToRGBA(color1)\r\n        const [r2, g2, b2] = colorToRGBA(color2)\r\n\r\n        const i = this.debugLinesDataIndex * DebugLine.STRIDE\r\n\r\n        this.debugLinesData[i + 0] = start[0]\r\n        this.debugLinesData[i + 1] = start[1]\r\n        this.debugLinesData[i + 2] = start[2]\r\n        this.debugLinesData[i + 3] = r1\r\n        this.debugLinesData[i + 4] = g1\r\n        this.debugLinesData[i + 5] = b1\r\n\r\n        this.debugLinesData[i + 6] = end[0]\r\n        this.debugLinesData[i + 7] = end[1]\r\n        this.debugLinesData[i + 8] = end[2]\r\n        this.debugLinesData[i + 9] = r2\r\n        this.debugLinesData[i + 10] = g2\r\n        this.debugLinesData[i + 11] = b2\r\n\r\n        this.debugLinesDataIndex += 2\r\n    }\r\n\r\n    draw(): void {\r\n        const { ctx, gl } = this\r\n\r\n        this.handleResize()\r\n\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\r\n        const mvp = mat4.create()\r\n        mat4.multiply(mvp, mvp, this.projectionMatrix)\r\n        mat4.multiply(mvp, mvp, this.viewMatrix)\r\n        const pos = vec4.create()\r\n\r\n        const transparentModels = [] as { entity: Entity; modelEntry: ModelDefEntry }[]\r\n\r\n        for (const entity of this.models) {\r\n            const transform = entity.get(TransformComponent)!\r\n            const model = entity.get(ModelComponent)!\r\n            const texture = entity.get(TextureComponent)!\r\n\r\n            model.modelDef.update(transform.transform)\r\n\r\n            const modelEntities = model.modelDef.getEntries()\r\n\r\n            // first draw all opaque objects\r\n            for (const modelEntry of modelEntities) {\r\n                if (modelEntry.options?.alpha !== true) {\r\n                    this.drawModel(\r\n                        modelEntry.model,\r\n                        texture.texture!,\r\n                        getModelOptions(modelEntry.options),\r\n                        modelEntry.transform\r\n                    )\r\n                } else {\r\n                    transparentModels.push({ entity, modelEntry })\r\n                }\r\n            }\r\n        }\r\n\r\n        // then sort all transparent objects by depth\r\n\r\n        for (const entry of transparentModels) {\r\n            const p = entry.modelEntry.transform.pos\r\n            vec4.transformMat4(pos, vec4.fromValues(p[0], p[1], p[2], 1), mvp)\r\n            const z = pos[2] / pos[3]\r\n\r\n            entry.modelEntry.tempZ = z\r\n        }\r\n\r\n        transparentModels.sort((a, b) => b.modelEntry.tempZ! - a.modelEntry.tempZ!)\r\n\r\n        // then draw all transparent objects from far to near\r\n        for (const entry of transparentModels) {\r\n            const { entity, modelEntry } = entry\r\n\r\n            const texture = entity.get(TextureComponent)!\r\n\r\n            this.drawModel(\r\n                modelEntry.model,\r\n                texture.texture!,\r\n                getModelOptions(modelEntry.options),\r\n                modelEntry.transform\r\n            )\r\n        }\r\n\r\n        for (const debugRect of this.persistentDebugRects) {\r\n            this.drawDebugRect(\r\n                debugRect.start,\r\n                debugRect.end,\r\n                debugRect.vertical,\r\n                debugRect.horizontal,\r\n                debugRect.depth\r\n            )\r\n        }\r\n\r\n        if (this.debugLinesDataIndex > 0) {\r\n            // gl.disable(gl.DEPTH_TEST)\r\n\r\n            const { coloredShader } = this\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.debugLineBuffer)\r\n\r\n            this.defineVertexBuffer(gl, coloredShader, DebugLine.ATTRIBUTES, DebugLine.STRIDE)\r\n\r\n            gl.useProgram(coloredShader.program)\r\n\r\n            const mvp = mat4.create()\r\n            mat4.multiply(mvp, mvp, this.projectionMatrix)\r\n            mat4.multiply(mvp, mvp, this.viewMatrix)\r\n\r\n            gl.uniformMatrix4fv(coloredShader.mvp, false, mvp)\r\n\r\n            const filledDebugLinesData = new Float32Array(\r\n                this.debugLinesData.buffer,\r\n                0,\r\n                this.debugLinesDataIndex * DebugLine.STRIDE\r\n            )\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, 0, filledDebugLinesData)\r\n\r\n            gl.drawArrays(gl.LINES, 0, this.debugLinesDataIndex)\r\n\r\n            this.debugLinesDataIndex = 0\r\n\r\n            // gl.enable(gl.DEPTH_TEST)\r\n        }\r\n\r\n        ctx.clearRect(0, 0, this.canvas2D.width, this.canvas2D.height)\r\n        ctx.textAlign = \"center\"\r\n        ctx.textBaseline = \"middle\"\r\n        ctx.strokeStyle = \"white\"\r\n        ctx.lineWidth = 3\r\n        ctx.font = \"25px Roboto\"\r\n        ctx.globalAlpha = 0.5\r\n        for (const text of this.texts) {\r\n            const p = text.pos\r\n            vec4.transformMat4(pos, vec4.fromValues(p[0], p[1], p[2], 1), mvp)\r\n\r\n            let x = pos[0] / pos[3]\r\n            let y = pos[1] / pos[3]\r\n\r\n            y = (-y + 1) / 2\r\n            x = (x + 1) / 2\r\n\r\n            ctx.strokeText(text.text, x * this.canvas2D.clientWidth, y * this.canvas2D.clientHeight)\r\n            ctx.fillText(text.text, x * this.canvas2D.clientWidth, y * this.canvas2D.clientHeight)\r\n        }\r\n    }\r\n}\r\n","import { CollisionPrimitive } from \"../models/collision-primitives\"\r\nimport { Component } from \"./component\"\r\n\r\nexport class CollisionComponent extends Component {\r\n    static ID = \"collision\"\r\n\r\n    constructor(readonly collisionPrimitive: CollisionPrimitive) {\r\n        super()\r\n    }\r\n}\r\n","import { PhysicsDef } from \"../models/physics-def\"\r\nimport { Component } from \"./component\"\r\n\r\nexport class PhysicsComponent extends Component {\r\n    static ID = \"physics\"\r\n\r\n    body: Ammo.btRigidBody | undefined\r\n\r\n    constructor(readonly physicsDef: PhysicsDef) {\r\n        super()\r\n    }\r\n}\r\n","export enum CollisionGroups {\r\n    STATIC = 2,\r\n    PLAYER = 4,\r\n}\r\n\r\nexport type PhysicsOptions = {\r\n    isStatic: boolean\r\n    noRotation: boolean\r\n    mass: number\r\n    friction: number\r\n    bakedTransform: boolean\r\n    collisionGroup: number\r\n}\r\n\r\nconst DEFAULT_PHYSICS_OPTIONS = {\r\n    isStatic: false,\r\n    noRotation: false,\r\n    mass: 1,\r\n    friction: 0.5,\r\n    bakedTransform: false,\r\n    collisionGroup: CollisionGroups.STATIC,\r\n} as PhysicsOptions\r\n\r\nexport function getPhysicsOptions(options: Partial<PhysicsOptions>): PhysicsOptions {\r\n    return Object.assign({ ...DEFAULT_PHYSICS_OPTIONS }, options || {})\r\n}\r\n\r\nexport class PhysicsDef {\r\n    constructor(public readonly options: Partial<PhysicsOptions>) {\r\n        //\r\n    }\r\n}\r\n","import { vec3 } from \"gl-matrix\"\r\nimport { CollisionComponent } from \"../components/collisionComponent\"\r\nimport { PhysicsComponent } from \"../components/phyicsComponent\"\r\nimport { TransformComponent } from \"../components/transformComponent\"\r\nimport { Entity } from \"../entities/entity\"\r\nimport { CollisionGroups, getPhysicsOptions } from \"../models/physics-def\"\r\n\r\ntype RaycastResult = {\r\n    distance: number\r\n    normal: vec3\r\n    hit: boolean\r\n}\r\n\r\nexport class Physics {\r\n    private dynamicsWorld: Ammo.btDiscreteDynamicsWorld\r\n    private entities: Set<Entity> = new Set()\r\n    private readonly tempTransform = new Ammo.btTransform()\r\n\r\n    constructor(private ammo: typeof Ammo) {\r\n        // ammo init (wow)\r\n        const collisionConfiguration = new Ammo.btDefaultCollisionConfiguration()\r\n        const dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration)\r\n        const overlappingPairCache = new Ammo.btDbvtBroadphase()\r\n        const solver = new Ammo.btSequentialImpulseConstraintSolver()\r\n\r\n        this.dynamicsWorld = new Ammo.btDiscreteDynamicsWorld(\r\n            dispatcher,\r\n            overlappingPairCache,\r\n            solver,\r\n            collisionConfiguration\r\n        )\r\n        this.dynamicsWorld.setGravity(new Ammo.btVector3(0, 0, -9.8))\r\n    }\r\n\r\n    add(entity: Entity): void {\r\n        const physics = entity.get(PhysicsComponent)\r\n        const collision = entity.get(CollisionComponent)\r\n        const transfrom = entity.get(TransformComponent)\r\n\r\n        if (physics && collision && transfrom) {\r\n            const shape = collision.collisionPrimitive.getAmmoShape(transfrom.transform)\r\n\r\n            const options = getPhysicsOptions(physics.physicsDef.options)\r\n            const { isStatic, noRotation } = options\r\n\r\n            const localInertia = new Ammo.btVector3(0, 0, 0)\r\n            const mass = isStatic ? 0 : options.mass\r\n\r\n            if (!isStatic && !noRotation) {\r\n                shape.calculateLocalInertia(mass, localInertia)\r\n            }\r\n\r\n            let bodyTransform = new Ammo.btTransform()\r\n            bodyTransform.setIdentity()\r\n            if (!options.bakedTransform) {\r\n                bodyTransform.setOrigin(\r\n                    new Ammo.btVector3(\r\n                        transfrom.transform.pos[0],\r\n                        transfrom.transform.pos[1],\r\n                        transfrom.transform.pos[2]\r\n                    )\r\n                )\r\n                bodyTransform.setRotation(\r\n                    new Ammo.btQuaternion(\r\n                        transfrom.transform.rotation[0],\r\n                        transfrom.transform.rotation[1],\r\n                        transfrom.transform.rotation[2],\r\n                        transfrom.transform.rotation[3]\r\n                    )\r\n                )\r\n            }\r\n\r\n            const additionalTransform = collision.collisionPrimitive.getTransfrom()\r\n            if (additionalTransform) {\r\n                bodyTransform = bodyTransform.op_mul(additionalTransform)\r\n            }\r\n\r\n            const myMotionState = new Ammo.btDefaultMotionState(bodyTransform)\r\n\r\n            const rbInfo = new Ammo.btRigidBodyConstructionInfo(\r\n                mass,\r\n                myMotionState,\r\n                shape,\r\n                localInertia\r\n            )\r\n            const body = new Ammo.btRigidBody(rbInfo)\r\n            body.setFriction(options.friction)\r\n\r\n            this.dynamicsWorld.addRigidBody(body, options.collisionGroup, 0xff)\r\n\r\n            this.entities.add(entity)\r\n\r\n            physics.body = body\r\n        }\r\n    }\r\n\r\n    raycast(p0: vec3, p1: vec3): RaycastResult {\r\n        const from = new Ammo.btVector3(p0[0], p0[1], p0[2])\r\n        const to = new Ammo.btVector3(p1[0], p1[1], p1[2])\r\n        const callback = new Ammo.ClosestRayResultCallback(from, to)\r\n        callback.set_m_collisionFilterGroup(CollisionGroups.STATIC)\r\n        this.dynamicsWorld.rayTest(from, to, callback)\r\n\r\n        const dist = vec3.distance(p0, p1)\r\n\r\n        const ammoNormal = callback.get_m_hitNormalWorld()\r\n        const normal = vec3.fromValues(ammoNormal.x(), ammoNormal.y(), ammoNormal.z())\r\n\r\n        return {\r\n            distance: dist * callback.get_m_closestHitFraction(),\r\n            normal,\r\n            hit: callback.hasHit(),\r\n        }\r\n    }\r\n\r\n    private syncBodies() {\r\n        for (const entity of this.entities) {\r\n            const physics = entity.get(PhysicsComponent)\r\n            const transfrom = entity.get(TransformComponent)\r\n            if (physics && transfrom && physics.body) {\r\n                const body = physics.body\r\n\r\n                const options = getPhysicsOptions(physics.physicsDef.options)\r\n                if (options.isStatic) {\r\n                    continue\r\n                }\r\n\r\n                body.getMotionState().getWorldTransform(this.tempTransform)\r\n                const origin = this.tempTransform.getOrigin()\r\n                transfrom.transform.pos[0] = origin.x()\r\n                transfrom.transform.pos[1] = origin.y()\r\n                transfrom.transform.pos[2] = origin.z()\r\n                const rotation = this.tempTransform.getRotation()\r\n                transfrom.transform.rotation[0] = rotation.x()\r\n                transfrom.transform.rotation[1] = rotation.y()\r\n                transfrom.transform.rotation[2] = rotation.z()\r\n                transfrom.transform.rotation[3] = rotation.w()\r\n            }\r\n        }\r\n    }\r\n\r\n    tick(dt: number): void {\r\n        this.dynamicsWorld.stepSimulation(dt, 1)\r\n\r\n        this.syncBodies()\r\n    }\r\n}\r\n","import { quat } from \"gl-matrix\"\r\n\r\nexport class Animation {\r\n    constructor(readonly timings: number[], readonly values: Map<number, quat[]>) {}\r\n\r\n    private findTimingNextIndex(s: number): number {\r\n        let index = 1\r\n        while (this.timings[index] <= s && index < this.timings.length) {\r\n            index++\r\n        }\r\n\r\n        console.assert(index < this.timings.length)\r\n\r\n        return index\r\n    }\r\n\r\n    getRotation(boneId: number, s: number): quat {\r\n        const first = this.timings[0]\r\n        const last = this.timings[this.timings.length - 1]\r\n        const duration = last - first\r\n\r\n        s = first + ((s - first) % duration)\r\n\r\n        const rotation = quat.create()\r\n\r\n        const rotations = this.values.get(boneId)\r\n\r\n        if (rotations !== undefined) {\r\n            const nextIndex = this.findTimingNextIndex(s)\r\n            const prevIndex = nextIndex - 1\r\n\r\n            const s0 = this.timings[prevIndex]\r\n            const s1 = this.timings[nextIndex]\r\n\r\n            const t = (s - s0) / (s1 - s0)\r\n\r\n            const r0 = rotations[prevIndex]\r\n            const r1 = rotations[nextIndex]\r\n\r\n            quat.slerp(rotation, r0, r1, t)\r\n        }\r\n\r\n        return rotation\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport { vec3, quat } from \"gl-matrix\"\r\nimport { Bone } from \"../models/bone\"\r\nimport { Skin } from \"../models/skin\"\r\nimport { Animation } from \"../models/animation\"\r\nimport { Model } from \"../models/model\"\r\n\r\nexport function loadSkin(gl: WebGLRenderingContext, data: ArrayBuffer): Skin {\r\n    const header = new Uint32Array(data, 0, 3)\r\n    const [vertexCount, indexCount, boneCount] = header\r\n    const indices = new Uint16Array(data, 3 * 4, indexCount)\r\n    const floatPosition = Math.ceil((3 * 4 + indexCount * 2) / 4) * 4\r\n    const vertices = new Float32Array(data, floatPosition, Skin.STRIDE * vertexCount)\r\n    const boneData = new Float32Array(\r\n        data,\r\n        floatPosition + Skin.STRIDE * vertexCount * 4,\r\n        boneCount * Bone.STRIDE\r\n    )\r\n\r\n    const bones: Bone[] = []\r\n    for (let i = 0; i < boneCount; i++) {\r\n        const bone = new Bone()\r\n        bone.id = Math.trunc(boneData[i * Bone.STRIDE + 0])\r\n        bone.translation = vec3.fromValues(\r\n            boneData[i * Bone.STRIDE + 1],\r\n            boneData[i * Bone.STRIDE + 2],\r\n            boneData[i * Bone.STRIDE + 3]\r\n        )\r\n        bone.rotation = quat.fromValues(\r\n            boneData[i * Bone.STRIDE + 4],\r\n            boneData[i * Bone.STRIDE + 5],\r\n            boneData[i * Bone.STRIDE + 6],\r\n            boneData[i * Bone.STRIDE + 7]\r\n        )\r\n\r\n        bones.push(bone)\r\n    }\r\n\r\n    const vertexBuffer = gl.createBuffer()!\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\r\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW)\r\n\r\n    const indexBuffer = gl.createBuffer()!\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer)\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW)\r\n\r\n    const skin = new Skin(vertexBuffer, vertexCount, indexBuffer, indexCount, bones)\r\n\r\n    return skin\r\n}\r\n\r\nexport async function loadSkinFromURL(gl: WebGLRenderingContext, url: string): Promise<Skin> {\r\n    const data = await (await fetch(url)).arrayBuffer()\r\n    return loadSkin(gl, data)\r\n}\r\n\r\nexport function loadAnimation(data: ArrayBuffer) {\r\n    const floats = new Float32Array(data)\r\n    const keyframeCount = Math.trunc(floats[0])\r\n    const bonesCount = Math.trunc(floats[1])\r\n\r\n    const timings = [] as number[]\r\n    for (let i = 0; i < keyframeCount; i++) {\r\n        timings.push(floats[2 + i])\r\n    }\r\n\r\n    const map = new Map<number, quat[]>()\r\n\r\n    const valuesPos = 2 + keyframeCount\r\n    const VALUES_STRIDE = 1 + 4 * keyframeCount\r\n    for (let i = 0; i < bonesCount; i++) {\r\n        const pos = valuesPos + i * VALUES_STRIDE\r\n\r\n        const boneId = Math.trunc(floats[pos + 0])\r\n\r\n        const rotations = [] as quat[]\r\n        for (let j = 0; j < keyframeCount; j++) {\r\n            const rotation = quat.fromValues(\r\n                floats[pos + 1 + j * 4 + 0],\r\n                floats[pos + 1 + j * 4 + 1],\r\n                floats[pos + 1 + j * 4 + 2],\r\n                floats[pos + 1 + j * 4 + 3]\r\n            )\r\n            rotations.push(rotation)\r\n        }\r\n\r\n        map.set(boneId, rotations)\r\n    }\r\n\r\n    const animation = new Animation(timings, map)\r\n\r\n    return animation\r\n}\r\n\r\nexport async function loadAnimationFromURL(url: string): Promise<Animation> {\r\n    const data = await (await fetch(url)).arrayBuffer()\r\n    return loadAnimation(data)\r\n}\r\n\r\nexport async function loadTexture(\r\n    gl: WebGLRenderingContext,\r\n    anisotropic: EXT_texture_filter_anisotropic | null,\r\n    url: string\r\n): Promise<WebGLTexture> {\r\n    return new Promise(resolve => {\r\n        const image = new Image()\r\n        image.onload = () => {\r\n            const texture = gl.createTexture()!\r\n            gl.bindTexture(gl.TEXTURE_2D, texture)\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image)\r\n\r\n            const isPowerOf2 =\r\n                Math.ceil(Math.log2(image.width)) == Math.floor(Math.log2(image.width)) &&\r\n                Math.ceil(Math.log2(image.height)) == Math.floor(Math.log2(image.height))\r\n\r\n            if (isPowerOf2) {\r\n                gl.generateMipmap(gl.TEXTURE_2D)\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR)\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\r\n            }\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT)\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT)\r\n\r\n            if (anisotropic) {\r\n                const max = gl.getParameter(anisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)\r\n                gl.texParameterf(gl.TEXTURE_2D, anisotropic.TEXTURE_MAX_ANISOTROPY_EXT, max)\r\n            }\r\n\r\n            resolve(texture)\r\n        }\r\n        image.src = url\r\n    })\r\n}\r\n\r\nexport function loadModel(gl: WebGLRenderingContext, data: ArrayBuffer): Model {\r\n    const header = new Uint32Array(data, 0, 2)\r\n    const [vertexCount, indexCount] = header\r\n\r\n    const indices = new Uint16Array(data, 2 * 4, indexCount)\r\n    const floatPosition = Math.ceil((2 * 4 + indexCount * 2) / 4) * 4\r\n    const vertices = new Float32Array(data, floatPosition, Model.STRIDE * vertexCount)\r\n\r\n    const vertexBuffer = gl.createBuffer()!\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\r\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW)\r\n\r\n    const indexBuffer = gl.createBuffer()!\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer)\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW)\r\n\r\n    const model = new Model(vertexBuffer, vertexCount, indexBuffer, indexCount)\r\n\r\n    return model\r\n}\r\n\r\nexport async function loadModelFromURL(gl: WebGLRenderingContext, url: string): Promise<Model> {\r\n    const data = await (await fetch(url)).arrayBuffer()\r\n    return loadModel(gl, data)\r\n}\r\n","import { Model } from \"../models/model\"\r\nimport { Skin } from \"../models/skin\"\r\nimport { Animation } from \"../models/animation\"\r\nimport { loadAnimationFromURL, loadModelFromURL, loadSkinFromURL, loadTexture } from \"./loaders\"\r\nimport { Services } from \"./services\"\r\n\r\nexport enum ResourceType {\r\n    Texture,\r\n    Model,\r\n    Skin,\r\n    Animation,\r\n}\r\n\r\n// TODO implement cache\r\nexport class ResourceManager {\r\n    private pendingList: Map<string, Promise<unknown>> = new Map()\r\n\r\n    private getUrl(name: string, ext: string): string {\r\n        return `build/${name}.${ext}`\r\n    }\r\n\r\n    async require<T>(url: string, requestMaker: () => Promise<T>): Promise<T> {\r\n        let promise = this.pendingList.get(url)\r\n        if (promise === undefined) {\r\n            promise = requestMaker()\r\n            this.pendingList.set(url, promise)\r\n        }\r\n\r\n        return promise as Promise<T>\r\n    }\r\n\r\n    async requireTexture(name: string): Promise<WebGLTexture> {\r\n        let ext = \"png\"\r\n\r\n        const extIndex = name.lastIndexOf(\".\")\r\n        if (extIndex !== -1) {\r\n            ext = name.slice(extIndex + 1)\r\n            name = name.slice(0, extIndex)\r\n        }\r\n\r\n        const url = this.getUrl(name, ext)\r\n\r\n        return this.require(url, () =>\r\n            loadTexture(Services.render.gl, Services.render.anisotropic, url)\r\n        )\r\n    }\r\n\r\n    async requireModel(name: string): Promise<Model> {\r\n        const url = this.getUrl(name, \"mdl\")\r\n        return this.require(url, () => loadModelFromURL(Services.render.gl, url))\r\n    }\r\n\r\n    async requireSkin(name: string): Promise<Skin> {\r\n        const url = this.getUrl(name, \"skn\")\r\n        return this.require(url, () => loadSkinFromURL(Services.render.gl, url))\r\n    }\r\n\r\n    async requireAnimation(name: string): Promise<Animation> {\r\n        const url = this.getUrl(name, \"anm\")\r\n        return this.require(url, () => loadAnimationFromURL(url))\r\n    }\r\n\r\n    async waitForLoading(): Promise<void> {\r\n        return Promise.all(this.pendingList.values()) as unknown as Promise<void>\r\n    }\r\n}\r\n","import { Entity } from \"../entities/entity\"\r\nimport { Services } from \"./services\"\r\n\r\nexport class World {\r\n    add(entity: Entity): void {\r\n        Services.render.add(entity)\r\n        Services.physics.add(entity)\r\n    }\r\n}\r\n","import { Services } from \"./services\"\r\n\r\nexport class GameLoop {\r\n    private prevTime: number | undefined\r\n\r\n    private tickBind = this.tick.bind(this)\r\n\r\n    start(): void {\r\n        requestAnimationFrame(this.tickBind)\r\n    }\r\n\r\n    private tick(time: number): void {\r\n        // const dt = this.prevTime != undefined ? time - this.prevTime : 0\r\n        const dt = 1000 / 60\r\n\r\n        Services.inputManager.tick(dt)\r\n        Services.physics.tick(dt)\r\n        Services.inputManager.postPhysics()\r\n        Services.render.draw()\r\n\r\n        this.prevTime = time\r\n        requestAnimationFrame(this.tickBind)\r\n    }\r\n}\r\n","import { Component } from \"../components/component\"\r\n\r\ninterface ComponentClass<T> {\r\n    new (...args): T\r\n    ID: string\r\n}\r\n\r\nexport class Entity {\r\n    private components: Component[] = []\r\n\r\n    protected registerComponent(component: Component): void {\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        // @ts-ignore\r\n        const id = component.constructor.ID\r\n\r\n        if (this.components[id] != null) {\r\n            throw new Error(\"Component is already registered.\")\r\n        }\r\n        this.components[id] = component\r\n    }\r\n\r\n    get<T extends Component>(c: ComponentClass<T>): T | null {\r\n        const id = c.ID\r\n\r\n        return (this.components[id] as T) || null\r\n    }\r\n}\r\n","import { ModelComponent } from \"../components/modelComponent\"\r\nimport { CollisionComponent } from \"../components/collisionComponent\"\r\nimport { TextureComponent } from \"../components/textureComponent\"\r\nimport { TransformComponent, TransformData } from \"../components/transformComponent\"\r\nimport { CollisionPrimitive } from \"../models/collision-primitives\"\r\nimport { ModelDef } from \"../models/model-def\"\r\nimport { PhysicsDef } from \"../models/physics-def\"\r\nimport { Entity } from \"./entity\"\r\nimport { PhysicsComponent } from \"../components/phyicsComponent\"\r\n\r\nexport class SimpleObject extends Entity {\r\n    constructor(\r\n        transform: TransformData,\r\n        modelDef: ModelDef,\r\n        textureName: string,\r\n        physicsDef?: PhysicsDef,\r\n        collisionPrimitive?: CollisionPrimitive\r\n    ) {\r\n        super()\r\n\r\n        this.registerComponent(new TransformComponent(transform))\r\n        this.registerComponent(new ModelComponent(modelDef))\r\n        this.registerComponent(new TextureComponent(textureName))\r\n        if (physicsDef && collisionPrimitive) {\r\n            this.registerComponent(new PhysicsComponent(physicsDef))\r\n            this.registerComponent(new CollisionComponent(collisionPrimitive))\r\n        }\r\n    }\r\n}\r\n","import { quat, vec3 } from \"gl-matrix\"\r\nimport { TransformData } from \"../components/transformComponent\"\r\n\r\nexport abstract class CollisionPrimitive {\r\n    private ammoShape: Ammo.btCollisionShape\r\n\r\n    getAmmoShape(transform: TransformData): Ammo.btCollisionShape {\r\n        if (this.ammoShape === undefined) {\r\n            this.ammoShape = this.update(transform)\r\n        }\r\n        return this.ammoShape\r\n    }\r\n\r\n    getTransfrom(): Ammo.btTransform | undefined {\r\n        return undefined\r\n    }\r\n\r\n    protected abstract update(transform: Readonly<TransformData>): Ammo.btCollisionShape\r\n}\r\n\r\nexport class Capsule extends CollisionPrimitive {\r\n    update(transform: Readonly<TransformData>): Ammo.btCollisionShape {\r\n        const { size } = transform\r\n\r\n        return new Ammo.btCapsuleShapeZ(0.5 * size[0], size[2] - size[0])\r\n    }\r\n}\r\n\r\nexport class Box extends CollisionPrimitive {\r\n    update(transform: Readonly<TransformData>): Ammo.btCollisionShape {\r\n        const { size } = transform\r\n\r\n        const ammoSize = new Ammo.btVector3(size[0] * 0.5, size[1] * 0.5, size[2] * 0.5)\r\n\r\n        return new Ammo.btBoxShape(ammoSize)\r\n    }\r\n}\r\n\r\nexport class Sphere extends CollisionPrimitive {\r\n    update(transform: Readonly<TransformData>): Ammo.btCollisionShape {\r\n        const { size } = transform\r\n\r\n        return new Ammo.btSphereShape(0.5 * size[0])\r\n    }\r\n}\r\n\r\nexport class Plane extends CollisionPrimitive {\r\n    update(transform: Readonly<TransformData>): Ammo.btCollisionShape {\r\n        const { pos, size, rotation } = transform\r\n\r\n        const p0 = vec3.fromValues(-0.5 * size[0], -0.5 * size[1], 0)\r\n        const p1 = vec3.fromValues(+0.5 * size[0], -0.5 * size[1], 0)\r\n        const p2 = vec3.fromValues(-0.5 * size[0], +0.5 * size[1], 0)\r\n        const p3 = vec3.fromValues(+0.5 * size[0], +0.5 * size[1], 0)\r\n\r\n        vec3.transformQuat(p0, p0, rotation)\r\n        vec3.transformQuat(p1, p1, rotation)\r\n        vec3.transformQuat(p2, p2, rotation)\r\n        vec3.transformQuat(p3, p3, rotation)\r\n\r\n        vec3.add(p0, p0, pos)\r\n        vec3.add(p1, p1, pos)\r\n        vec3.add(p2, p2, pos)\r\n        vec3.add(p3, p3, pos)\r\n\r\n        const p0a = new Ammo.btVector3(p0[0], p0[1], p0[2])\r\n        const p1a = new Ammo.btVector3(p1[0], p1[1], p1[2])\r\n        const p2a = new Ammo.btVector3(p2[0], p2[1], p2[2])\r\n        const p3a = new Ammo.btVector3(p3[0], p3[1], p3[2])\r\n\r\n        const trimesh = new Ammo.btTriangleMesh()\r\n\r\n        trimesh.addTriangle(p0a, p1a, p2a, true)\r\n        trimesh.addTriangle(p1a, p2a, p3a, true)\r\n\r\n        return new Ammo.btBvhTriangleMeshShape(trimesh, true)\r\n    }\r\n}\r\n","import { quat } from \"gl-matrix\"\r\nimport { cloneTransform, TransformData } from \"../../components/transformComponent\"\r\nimport { Services } from \"../../managers/services\"\r\nimport { Model } from \"../model\"\r\nimport { ModelDef, ModelDefEntry } from \"../model-def\"\r\n\r\nexport class CapsuleModelDef extends ModelDef {\r\n    private halfSphere: Model | undefined\r\n    private cylinder: Model | undefined\r\n\r\n    private entries: ModelDefEntry[]\r\n\r\n    constructor() {\r\n        super()\r\n        this.loadModels()\r\n    }\r\n\r\n    async loadModels(): Promise<void> {\r\n        const [halfSphere, cylinder] = await Promise.all([\r\n            Services.resources.requireModel(\"half_sphere\"),\r\n            Services.resources.requireModel(\"cylinder\"),\r\n        ])\r\n\r\n        this.entries = [\r\n            { model: halfSphere, transform: undefined! },\r\n            { model: cylinder, transform: undefined! },\r\n            { model: halfSphere, transform: undefined! },\r\n        ]\r\n    }\r\n\r\n    update(transform: TransformData): void {\r\n        const height = transform.size[2]\r\n\r\n        this.entries[0].transform = cloneTransform(transform)\r\n        this.entries[0].transform.size[2] = 1\r\n        this.entries[0].transform.pos[2] += (height - 1) / 2\r\n\r\n        this.entries[1].transform = cloneTransform(transform)\r\n        this.entries[1].transform.size[2] -= 1\r\n\r\n        this.entries[2].transform = cloneTransform(transform)\r\n        this.entries[2].transform.size[2] = 1\r\n\r\n        const q = quat.create()\r\n        quat.fromEuler(q, 180, 0, 0)\r\n        quat.mul(this.entries[2].transform.rotation, this.entries[2].transform.rotation, q)\r\n\r\n        this.entries[2].transform.pos[2] -= (height - 1) / 2\r\n    }\r\n\r\n    getEntries(): ModelDefEntry[] {\r\n        if (this.entries === undefined) {\r\n            throw new Error(\"Models are not loaded.\")\r\n        }\r\n\r\n        return this.entries\r\n    }\r\n}\r\n","import { TransformData } from \"../../components/transformComponent\"\r\nimport { Services } from \"../../managers/services\"\r\nimport { Model } from \"../model\"\r\nimport { ModelDef, ModelDefEntry, ModelOptions } from \"../model-def\"\r\n\r\nexport class SimpleModelDef implements ModelDef {\r\n    private model: Model | undefined\r\n    private transform: TransformData | undefined\r\n\r\n    constructor(modelName: string, private readonly options?: Partial<ModelOptions>) {\r\n        this.loadModel(modelName)\r\n    }\r\n\r\n    async loadModel(modelName: string): Promise<void> {\r\n        this.model = await Services.resources.requireModel(modelName)\r\n    }\r\n\r\n    update(transform: TransformData) {\r\n        this.transform = transform\r\n    }\r\n\r\n    getEntries(): ModelDefEntry[] {\r\n        if (this.model === undefined || this.transform === undefined) {\r\n            throw new Error(\"Model is not loaded.\")\r\n        }\r\n\r\n        return [{ model: this.model, transform: this.transform, options: this.options }]\r\n    }\r\n}\r\n","export enum Biomes {\r\n    THE_VOID = \"the_void\",\r\n    PLAINS = \"plains\",\r\n    SUNFLOWER_PLAINS = \"sunflower_plains\",\r\n    SNOWY_PLAINS = \"snowy_plains\",\r\n    ICE_SPIKES = \"ice_spikes\",\r\n    DESERT = \"desert\",\r\n    SWAMP = \"swamp\",\r\n    FOREST = \"forest\",\r\n    FLOWER_FOREST = \"flower_forest\",\r\n    BIRCH_FOREST = \"birch_forest\",\r\n    DARK_FOREST = \"dark_forest\",\r\n    OLD_GROWTH_BIRCH_FOREST = \"old_growth_birch_forest\",\r\n    OLD_GROWTH_PINE_TAIGA = \"old_growth_pine_taiga\",\r\n    OLD_GROWTH_SPRUCE_TAIGA = \"old_growth_spruce_taiga\",\r\n    TAIGA = \"taiga\",\r\n    SNOWY_TAIGA = \"snowy_taiga\",\r\n    SAVANNA = \"savanna\",\r\n    SAVANNA_PLATEAU = \"savanna_plateau\",\r\n    WINDSWEPT_HILLS = \"windswept_hills\",\r\n    WINDSWEPT_GRAVELLY_HILLS = \"windswept_gravelly_hills\",\r\n    WINDSWEPT_FOREST = \"windswept_forest\",\r\n    WINDSWEPT_SAVANNA = \"windswept_savanna\",\r\n    JUNGLE = \"jungle\",\r\n    SPARSE_JUNGLE = \"sparse_jungle\",\r\n    BAMBOO_JUNGLE = \"bamboo_jungle\",\r\n    BADLANDS = \"badlands\",\r\n    ERODED_BADLANDS = \"eroded_badlands\",\r\n    WOODED_BADLANDS = \"wooded_badlands\",\r\n    MEADOW = \"meadow\",\r\n    GROVE = \"grove\",\r\n    SNOWY_SLOPES = \"snowy_slopes\",\r\n    FROZEN_PEAKS = \"frozen_peaks\",\r\n    JAGGED_PEAKS = \"jagged_peaks\",\r\n    STONY_PEAKS = \"stony_peaks\",\r\n    RIVER = \"river\",\r\n    FROZEN_RIVER = \"frozen_river\",\r\n    BEACH = \"beach\",\r\n    SNOWY_BEACH = \"snowy_beach\",\r\n    STONY_SHORE = \"stony_shore\",\r\n    WARM_OCEAN = \"warm_ocean\",\r\n    LUKEWARM_OCEAN = \"lukewarm_ocean\",\r\n    DEEP_LUKEWARM_OCEAN = \"deep_lukewarm_ocean\",\r\n    OCEAN = \"ocean\",\r\n    DEEP_OCEAN = \"deep_ocean\",\r\n    COLD_OCEAN = \"cold_ocean\",\r\n    DEEP_COLD_OCEAN = \"deep_cold_ocean\",\r\n    FROZEN_OCEAN = \"frozen_ocean\",\r\n    DEEP_FROZEN_OCEAN = \"deep_frozen_ocean\",\r\n    MUSHROOM_FIELDS = \"mushroom_fields\",\r\n    DRIPSTONE_CAVES = \"dripstone_caves\",\r\n    LUSH_CAVES = \"lush_caves\",\r\n    NETHER_WASTES = \"nether_wastes\",\r\n    WARPED_FOREST = \"warped_forest\",\r\n    CRIMSON_FOREST = \"crimson_forest\",\r\n    SOUL_SAND_VALLEY = \"soul_sand_valley\",\r\n    BASALT_DELTAS = \"basalt_deltas\",\r\n    THE_END = \"the_end\",\r\n    END_HIGHLANDS = \"end_highlands\",\r\n    END_MIDLANDS = \"end_midlands\",\r\n    SMALL_END_ISLANDS = \"small_end_islands\",\r\n    END_BARRENS = \"end_barrens\",\r\n}\r\n","import { Pair } from \"./consumer\"\r\n\r\nexport interface Sampler {\r\n    sample(x: number, y: number, z: number): TargetPoint\r\n}\r\n\r\nexport class Parameter {\r\n    constructor(public min: number, public max: number) {}\r\n\r\n    static span(min: Parameter, max: Parameter): Parameter\r\n    static span(min: number, max: number): Parameter\r\n    static span(min: number | Parameter, max: number | Parameter): Parameter {\r\n        if (typeof min === \"number\") {\r\n            if (typeof max !== \"number\") {\r\n                throw new Error(\"\")\r\n            }\r\n            return new Parameter(quantizeCoord(min), quantizeCoord(max))\r\n        } else {\r\n            if (typeof max === \"number\") {\r\n                throw new Error(\"\")\r\n            }\r\n            return new Parameter(min.min, max.max)\r\n        }\r\n    }\r\n\r\n    static point(value: number): Parameter {\r\n        return Parameter.span(value, value)\r\n    }\r\n\r\n    distance(value: number): number {\r\n        const v0 = value - this.max\r\n        const v1 = this.min - value\r\n        return v0 > 0 ? v0 : Math.max(v1, 0)\r\n    }\r\n\r\n    get center(): number {\r\n        return (this.min + this.max) * 0.5\r\n    }\r\n\r\n    get length(): number {\r\n        return this.max - this.min\r\n    }\r\n}\r\n\r\nexport class TargetPoint {\r\n    constructor(\r\n        public temperature: number,\r\n        public humidity: number,\r\n        public continentalness: number,\r\n        public erosion: number,\r\n        public depth: number,\r\n        public weirdness: number\r\n    ) {}\r\n}\r\n\r\nexport class ParameterPoint {\r\n    constructor(\r\n        public temperature: Parameter,\r\n        public humidity: Parameter,\r\n        public continentalness: Parameter,\r\n        public erosion: Parameter,\r\n        public depth: Parameter,\r\n        public weirdness: Parameter,\r\n        public offset: number\r\n    ) {}\r\n\r\n    fitness(targetPoint: TargetPoint): number {\r\n        const temperatureDistance = this.temperature.distance(targetPoint.temperature)\r\n        const humidityDistance = this.humidity.distance(targetPoint.humidity)\r\n        const continentalnessDistance = this.continentalness.distance(targetPoint.continentalness)\r\n        const erosionDistance = this.erosion.distance(targetPoint.erosion)\r\n        const depthDistance = this.depth.distance(targetPoint.depth)\r\n        const weirdnessDistance = this.weirdness.distance(targetPoint.weirdness)\r\n        const offsetDistance = 0 - this.offset\r\n\r\n        return (\r\n            temperatureDistance * temperatureDistance +\r\n            humidityDistance * humidityDistance +\r\n            continentalnessDistance * continentalnessDistance +\r\n            erosionDistance * erosionDistance +\r\n            depthDistance * depthDistance +\r\n            weirdnessDistance * weirdnessDistance +\r\n            offsetDistance * offsetDistance\r\n        )\r\n    }\r\n}\r\n\r\nconst QUANTIZATION_FACTOR = 10000\r\n\r\nexport function quantizeCoord(coord: number): number {\r\n    return Math.trunc(coord * QUANTIZATION_FACTOR)\r\n}\r\n\r\nexport function unquantizeCoord(coord: number): number {\r\n    return coord / QUANTIZATION_FACTOR\r\n}\r\n\r\nexport function parameters(\r\n    temperature: number,\r\n    humidity: number,\r\n    continentalness: number,\r\n    erosion: number,\r\n    depth: number,\r\n    weirdness: number,\r\n    offset: number\r\n): ParameterPoint\r\n\r\nexport function parameters(\r\n    temperature: Parameter | number,\r\n    humidity: Parameter | number,\r\n    continentalness: Parameter | number,\r\n    erosion: Parameter | number,\r\n    depth: Parameter | number,\r\n    weirdness: Parameter | number,\r\n    offset: number\r\n): ParameterPoint\r\n\r\nexport function parameters(\r\n    temperature: Parameter | number,\r\n    humidity: Parameter | number,\r\n    continentalness: Parameter | number,\r\n    erosion: Parameter | number,\r\n    depth: Parameter | number,\r\n    weirdness: Parameter | number,\r\n    offset: number\r\n): ParameterPoint {\r\n    if (typeof temperature === \"number\") {\r\n        if (\r\n            typeof temperature !== \"number\" ||\r\n            typeof humidity !== \"number\" ||\r\n            typeof continentalness !== \"number\" ||\r\n            typeof erosion !== \"number\" ||\r\n            typeof depth !== \"number\" ||\r\n            typeof weirdness !== \"number\"\r\n        ) {\r\n            throw new Error(\"\")\r\n        }\r\n\r\n        return new ParameterPoint(\r\n            Parameter.point(temperature),\r\n            Parameter.point(humidity),\r\n            Parameter.point(continentalness),\r\n            Parameter.point(erosion),\r\n            Parameter.point(depth),\r\n            Parameter.point(weirdness),\r\n            quantizeCoord(offset)\r\n        )\r\n    } else {\r\n        if (\r\n            typeof temperature === \"number\" ||\r\n            typeof humidity === \"number\" ||\r\n            typeof continentalness === \"number\" ||\r\n            typeof erosion === \"number\" ||\r\n            typeof depth === \"number\" ||\r\n            typeof weirdness === \"number\"\r\n        ) {\r\n            throw new Error(\"\")\r\n        }\r\n\r\n        return new ParameterPoint(\r\n            temperature,\r\n            humidity,\r\n            continentalness,\r\n            erosion,\r\n            depth,\r\n            weirdness,\r\n            quantizeCoord(offset)\r\n        )\r\n    }\r\n}\r\n\r\nexport function findValueBruteForce<T>(\r\n    targetPoint: TargetPoint,\r\n    values: Pair<ParameterPoint, T>[]\r\n): T {\r\n    let minDistance = Infinity\r\n    let result: T | undefined\r\n\r\n    for (const pair of values) {\r\n        const distance = pair.first.fitness(targetPoint)\r\n        if (distance < minDistance) {\r\n            minDistance = distance\r\n            result = pair.second\r\n        }\r\n    }\r\n\r\n    if (result === undefined) {\r\n        throw new Error(\"Result not found.\")\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nexport function target(\r\n    temperature: number,\r\n    humidity: number,\r\n    continentalness: number,\r\n    erosion: number,\r\n    depth: number,\r\n    weirdness: number\r\n): TargetPoint {\r\n    return new TargetPoint(\r\n        quantizeCoord(temperature),\r\n        quantizeCoord(humidity),\r\n        quantizeCoord(continentalness),\r\n        quantizeCoord(erosion),\r\n        quantizeCoord(depth),\r\n        quantizeCoord(weirdness)\r\n    )\r\n}\r\n","export class Pair<T, K> {\r\n    constructor(public first: T, public second: K) {}\r\n\r\n    static of<T, K>(first: T, second: K): Pair<T, K> {\r\n        return new Pair(first, second)\r\n    }\r\n}\r\n\r\nexport interface Consumer<T> {\r\n    accept(value: T): void\r\n}\r\n\r\nexport type Supplier<T> = () => T\r\n","import { Biomes } from \"./biomes\"\r\nimport * as Climate from \"./climate\"\r\nimport { Pair } from \"./consumer\"\r\n\r\nconst VALLEY_SIZE = 0.05\r\nconst LOW_START = 0.26666668\r\nconst HIGH_START = 0.4\r\nconst HIGH_END = 0.93333334\r\nconst PEAK_SIZE = 0.1\r\nconst PEAK_START = 0.56666666\r\nconst PEAK_END = 0.7666667\r\nconst NEAR_INLAND_START = -0.11\r\nconst MID_INLAND_START = 0.03\r\nconst FAR_INLAND_START = 0.3\r\nconst EROSION_INDEX_1_START = -0.78\r\nconst EROSION_INDEX_2_START = -0.375\r\n\r\nconst FULL_RANGE = Climate.Parameter.span(-1, 1)\r\n\r\nconst temperatures = [\r\n    Climate.Parameter.span(-1.0, -0.45),\r\n    Climate.Parameter.span(-0.45, -0.15),\r\n    Climate.Parameter.span(-0.15, 0.2),\r\n    Climate.Parameter.span(0.2, 0.55),\r\n    Climate.Parameter.span(0.55, 1.0),\r\n]\r\n\r\nconst humidities = [\r\n    Climate.Parameter.span(-1.0, -0.35),\r\n    Climate.Parameter.span(-0.35, -PEAK_SIZE),\r\n    Climate.Parameter.span(-PEAK_SIZE, PEAK_SIZE),\r\n    Climate.Parameter.span(PEAK_SIZE, FAR_INLAND_START),\r\n    Climate.Parameter.span(FAR_INLAND_START, 1.0),\r\n]\r\n\r\nconst erosions = [\r\n    Climate.Parameter.span(-1.0, EROSION_INDEX_1_START),\r\n    Climate.Parameter.span(EROSION_INDEX_1_START, EROSION_INDEX_2_START),\r\n    Climate.Parameter.span(EROSION_INDEX_2_START, -0.2225),\r\n    Climate.Parameter.span(-0.2225, VALLEY_SIZE),\r\n    Climate.Parameter.span(VALLEY_SIZE, 0.45),\r\n    Climate.Parameter.span(0.45, 0.55),\r\n    Climate.Parameter.span(0.55, 1.0),\r\n]\r\n\r\nconst FROZEN_RANGE = temperatures[0]\r\nconst UNFROZEN_RANGE = Climate.Parameter.span(temperatures[1], temperatures[4])\r\nconst mushroomFieldsContinentalness = Climate.Parameter.span(-1.2, -1.05)\r\nconst deepOceanContinentalness = Climate.Parameter.span(-1.05, -0.455)\r\nconst oceanContinentalness = Climate.Parameter.span(-0.455, -0.19)\r\nconst coastContinentalness = Climate.Parameter.span(-0.19, NEAR_INLAND_START)\r\nconst inlandContinentalness = Climate.Parameter.span(NEAR_INLAND_START, 0.55)\r\nconst nearInlandContinentalness = Climate.Parameter.span(NEAR_INLAND_START, MID_INLAND_START)\r\nconst midInlandContinentalness = Climate.Parameter.span(MID_INLAND_START, FAR_INLAND_START)\r\nconst farInlandContinentalness = Climate.Parameter.span(FAR_INLAND_START, 1.0)\r\n\r\nconst OCEANS = [\r\n    [\r\n        Biomes.DEEP_FROZEN_OCEAN,\r\n        Biomes.DEEP_COLD_OCEAN,\r\n        Biomes.DEEP_OCEAN,\r\n        Biomes.DEEP_LUKEWARM_OCEAN,\r\n        Biomes.WARM_OCEAN,\r\n    ],\r\n    [\r\n        Biomes.FROZEN_OCEAN,\r\n        Biomes.COLD_OCEAN,\r\n        Biomes.OCEAN,\r\n        Biomes.LUKEWARM_OCEAN,\r\n        Biomes.WARM_OCEAN,\r\n    ],\r\n]\r\n\r\nconst MIDDLE_BIOMES = [\r\n    [\r\n        Biomes.SNOWY_PLAINS,\r\n        Biomes.SNOWY_PLAINS,\r\n        Biomes.SNOWY_PLAINS,\r\n        Biomes.SNOWY_TAIGA,\r\n        Biomes.TAIGA,\r\n    ],\r\n    [Biomes.PLAINS, Biomes.PLAINS, Biomes.FOREST, Biomes.TAIGA, Biomes.OLD_GROWTH_SPRUCE_TAIGA],\r\n    [Biomes.FLOWER_FOREST, Biomes.PLAINS, Biomes.FOREST, Biomes.BIRCH_FOREST, Biomes.DARK_FOREST],\r\n    [Biomes.SAVANNA, Biomes.SAVANNA, Biomes.FOREST, Biomes.JUNGLE, Biomes.JUNGLE],\r\n    [Biomes.DESERT, Biomes.DESERT, Biomes.DESERT, Biomes.DESERT, Biomes.DESERT],\r\n]\r\n\r\nconst MIDDLE_BIOMES_VARIANT = [\r\n    [Biomes.ICE_SPIKES, null, Biomes.SNOWY_TAIGA, null, null],\r\n    [null, null, null, null, Biomes.OLD_GROWTH_PINE_TAIGA],\r\n    [Biomes.SUNFLOWER_PLAINS, null, null, Biomes.OLD_GROWTH_BIRCH_FOREST, null],\r\n    [null, null, Biomes.PLAINS, Biomes.SPARSE_JUNGLE, Biomes.BAMBOO_JUNGLE],\r\n    [null, null, null, null, null],\r\n]\r\n\r\nconst PLATEAU_BIOMES = [\r\n    [\r\n        Biomes.SNOWY_PLAINS,\r\n        Biomes.SNOWY_PLAINS,\r\n        Biomes.SNOWY_PLAINS,\r\n        Biomes.SNOWY_TAIGA,\r\n        Biomes.SNOWY_TAIGA,\r\n    ],\r\n    [Biomes.MEADOW, Biomes.MEADOW, Biomes.FOREST, Biomes.TAIGA, Biomes.OLD_GROWTH_SPRUCE_TAIGA],\r\n    [Biomes.MEADOW, Biomes.MEADOW, Biomes.MEADOW, Biomes.MEADOW, Biomes.DARK_FOREST],\r\n    [Biomes.SAVANNA_PLATEAU, Biomes.SAVANNA_PLATEAU, Biomes.FOREST, Biomes.FOREST, Biomes.JUNGLE],\r\n    [\r\n        Biomes.BADLANDS,\r\n        Biomes.BADLANDS,\r\n        Biomes.BADLANDS,\r\n        Biomes.WOODED_BADLANDS,\r\n        Biomes.WOODED_BADLANDS,\r\n    ],\r\n]\r\n\r\nconst PLATEAU_BIOMES_VARIANT = [\r\n    [Biomes.ICE_SPIKES, null, null, null, null],\r\n    [null, null, Biomes.MEADOW, Biomes.MEADOW, Biomes.OLD_GROWTH_PINE_TAIGA],\r\n    [null, null, Biomes.FOREST, Biomes.BIRCH_FOREST, null],\r\n    [null, null, null, null, null],\r\n    [Biomes.ERODED_BADLANDS, Biomes.ERODED_BADLANDS, null, null, null],\r\n]\r\n\r\nconst EXTREME_HILLS = [\r\n    [\r\n        Biomes.WINDSWEPT_GRAVELLY_HILLS,\r\n        Biomes.WINDSWEPT_GRAVELLY_HILLS,\r\n        Biomes.WINDSWEPT_HILLS,\r\n        Biomes.WINDSWEPT_FOREST,\r\n        Biomes.WINDSWEPT_FOREST,\r\n    ],\r\n    [\r\n        Biomes.WINDSWEPT_GRAVELLY_HILLS,\r\n        Biomes.WINDSWEPT_GRAVELLY_HILLS,\r\n        Biomes.WINDSWEPT_HILLS,\r\n        Biomes.WINDSWEPT_FOREST,\r\n        Biomes.WINDSWEPT_FOREST,\r\n    ],\r\n    [\r\n        Biomes.WINDSWEPT_HILLS,\r\n        Biomes.WINDSWEPT_HILLS,\r\n        Biomes.WINDSWEPT_HILLS,\r\n        Biomes.WINDSWEPT_FOREST,\r\n        Biomes.WINDSWEPT_FOREST,\r\n    ],\r\n    [null, null, null, null, null],\r\n    [null, null, null, null, null],\r\n]\r\n\r\nexport type BuilderOutput = Pair<Climate.ParameterPoint, Biomes>[]\r\n\r\nexport class OverworldBiomeBuilder {\r\n    // high order methods\r\n\r\n    addBiomes(biomes: BuilderOutput): void {\r\n        this.addOffCoastBiomes(biomes)\r\n        this.addInlandBiomes(biomes)\r\n        this.addUndergroundBiomes(biomes)\r\n    }\r\n\r\n    private addOffCoastBiomes(biomes: BuilderOutput): void {\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            mushroomFieldsContinentalness,\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            0.0,\r\n            Biomes.MUSHROOM_FIELDS\r\n        )\r\n\r\n        for (let i = 0; i < temperatures.length; ++i) {\r\n            const temperature = temperatures[i]\r\n            this.addSurfaceBiome(\r\n                biomes,\r\n                temperature,\r\n                FULL_RANGE,\r\n                deepOceanContinentalness,\r\n                FULL_RANGE,\r\n                FULL_RANGE,\r\n                0.0,\r\n                OCEANS[0][i]\r\n            )\r\n            this.addSurfaceBiome(\r\n                biomes,\r\n                temperature,\r\n                FULL_RANGE,\r\n                oceanContinentalness,\r\n                FULL_RANGE,\r\n                FULL_RANGE,\r\n                0.0,\r\n                OCEANS[1][i]\r\n            )\r\n        }\r\n    }\r\n\r\n    private addInlandBiomes(biomes: BuilderOutput): void {\r\n        this.addMidSlice(biomes, Climate.Parameter.span(-1.0, -HIGH_END))\r\n        this.addHighSlice(biomes, Climate.Parameter.span(-HIGH_END, -PEAK_END))\r\n        this.addPeaks(biomes, Climate.Parameter.span(-PEAK_END, -PEAK_START))\r\n        this.addHighSlice(biomes, Climate.Parameter.span(-PEAK_START, -HIGH_START))\r\n        this.addMidSlice(biomes, Climate.Parameter.span(-HIGH_START, -LOW_START))\r\n        this.addLowSlice(biomes, Climate.Parameter.span(-LOW_START, -VALLEY_SIZE))\r\n        this.addValleys(biomes, Climate.Parameter.span(-VALLEY_SIZE, VALLEY_SIZE))\r\n        this.addLowSlice(biomes, Climate.Parameter.span(VALLEY_SIZE, LOW_START))\r\n        this.addMidSlice(biomes, Climate.Parameter.span(LOW_START, HIGH_START))\r\n        this.addHighSlice(biomes, Climate.Parameter.span(HIGH_START, PEAK_START))\r\n        this.addPeaks(biomes, Climate.Parameter.span(PEAK_START, PEAK_END))\r\n        this.addHighSlice(biomes, Climate.Parameter.span(PEAK_END, HIGH_END))\r\n        this.addMidSlice(biomes, Climate.Parameter.span(HIGH_END, 1.0))\r\n    }\r\n\r\n    // specific type biomes\r\n\r\n    private addPeaks(biomes: BuilderOutput, weirdness: Climate.Parameter): void {\r\n        for (let temperatureIndex = 0; temperatureIndex < temperatures.length; ++temperatureIndex) {\r\n            const temperature = temperatures[temperatureIndex]\r\n\r\n            for (let humidityIndex = 0; humidityIndex < humidities.length; ++humidityIndex) {\r\n                const humidity = humidities[humidityIndex]\r\n                const middleBiome = this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n                const middleOrBadlands = this.pickMiddleBiomeOrBadlandsIfHot(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const middleOrBadlandsOrSlope = this.pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const plateauBiome = this.pickPlateauBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const extremeHillsBiome = this.pickExtremeHillsBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const maybeShattered = this.maybePickShatteredBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness,\r\n                    extremeHillsBiome\r\n                )\r\n                const peakyBiome = this.pickPeakBiome(temperatureIndex, humidityIndex, weirdness)\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n                    erosions[0],\r\n                    weirdness,\r\n                    0.0,\r\n                    peakyBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, nearInlandContinentalness),\r\n                    erosions[1],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlandsOrSlope\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[1],\r\n                    weirdness,\r\n                    0.0,\r\n                    peakyBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, nearInlandContinentalness),\r\n                    Climate.Parameter.span(erosions[2], erosions[3]),\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[2],\r\n                    weirdness,\r\n                    0.0,\r\n                    plateauBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    midInlandContinentalness,\r\n                    erosions[3],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlands\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    farInlandContinentalness,\r\n                    erosions[3],\r\n                    weirdness,\r\n                    0.0,\r\n                    plateauBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n                    erosions[4],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, nearInlandContinentalness),\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    maybeShattered\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    extremeHillsBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n                    erosions[6],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private addHighSlice(biomes: BuilderOutput, weirdness: Climate.Parameter): void {\r\n        for (let temperatureIndex = 0; temperatureIndex < temperatures.length; ++temperatureIndex) {\r\n            const temperature = temperatures[temperatureIndex]\r\n\r\n            for (let humidityIndex = 0; humidityIndex < humidities.length; ++humidityIndex) {\r\n                const humidity = humidities[humidityIndex]\r\n                const middleBiome = this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n                const middleOrBadlands = this.pickMiddleBiomeOrBadlandsIfHot(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const middleOrBadlandsOrSlope = this.pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const plateauBiome = this.pickPlateauBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const extremeHillsBiome = this.pickExtremeHillsBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const maybeShattered = this.maybePickShatteredBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness,\r\n                    middleBiome\r\n                )\r\n                const slopeBiome = this.pickSlopeBiome(temperatureIndex, humidityIndex, weirdness)\r\n                const peakyBiome = this.pickPeakBiome(temperatureIndex, humidityIndex, weirdness)\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    coastContinentalness,\r\n                    Climate.Parameter.span(erosions[0], erosions[1]),\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    erosions[0],\r\n                    weirdness,\r\n                    0.0,\r\n                    slopeBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[0],\r\n                    weirdness,\r\n                    0.0,\r\n                    peakyBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    erosions[1],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlandsOrSlope\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[1],\r\n                    weirdness,\r\n                    0.0,\r\n                    slopeBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, nearInlandContinentalness),\r\n                    Climate.Parameter.span(erosions[2], erosions[3]),\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[2],\r\n                    weirdness,\r\n                    0.0,\r\n                    plateauBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    midInlandContinentalness,\r\n                    erosions[3],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlands\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    farInlandContinentalness,\r\n                    erosions[3],\r\n                    weirdness,\r\n                    0.0,\r\n                    plateauBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n                    erosions[4],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, nearInlandContinentalness),\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    maybeShattered\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    extremeHillsBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n                    erosions[6],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private addMidSlice(biomes: BuilderOutput, weirdness: Climate.Parameter): void {\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            coastContinentalness,\r\n            Climate.Parameter.span(erosions[0], erosions[2]),\r\n            weirdness,\r\n            0.0,\r\n            Biomes.STONY_SHORE\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n            erosions[6],\r\n            weirdness,\r\n            0.0,\r\n            Biomes.SWAMP\r\n        )\r\n\r\n        for (let temperatureIndex = 0; temperatureIndex < temperatures.length; ++temperatureIndex) {\r\n            const temperature = temperatures[temperatureIndex]\r\n\r\n            for (let humidityIndex = 0; humidityIndex < humidities.length; ++humidityIndex) {\r\n                const humidity = humidities[humidityIndex]\r\n                const middleBiome = this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n                const middleOrBadlands = this.pickMiddleBiomeOrBadlandsIfHot(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const middleOrBadlandsOrSlope = this.pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const extremeHillsBiome = this.pickExtremeHillsBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const plateauBiome = this.pickPlateauBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const beachBiome = this.pickBeachBiome(temperatureIndex)\r\n                const maybeShattered = this.maybePickShatteredBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness,\r\n                    middleBiome\r\n                )\r\n                const shatteredCoastBiome = this.pickShatteredCoastBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const slopeBiome = this.pickSlopeBiome(temperatureIndex, humidityIndex, weirdness)\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n                    erosions[0],\r\n                    weirdness,\r\n                    0.0,\r\n                    slopeBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(nearInlandContinentalness, midInlandContinentalness),\r\n                    erosions[1],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlandsOrSlope\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    farInlandContinentalness,\r\n                    erosions[1],\r\n                    weirdness,\r\n                    0.0,\r\n                    temperatureIndex == 0 ? slopeBiome : plateauBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    erosions[2],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    midInlandContinentalness,\r\n                    erosions[2],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlands\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    farInlandContinentalness,\r\n                    erosions[2],\r\n                    weirdness,\r\n                    0.0,\r\n                    plateauBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(coastContinentalness, nearInlandContinentalness),\r\n                    erosions[3],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[3],\r\n                    weirdness,\r\n                    0.0,\r\n                    middleOrBadlands\r\n                )\r\n                if (weirdness.max < 0) {\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        coastContinentalness,\r\n                        erosions[4],\r\n                        weirdness,\r\n                        0.0,\r\n                        beachBiome\r\n                    )\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n                        erosions[4],\r\n                        weirdness,\r\n                        0.0,\r\n                        middleBiome\r\n                    )\r\n                } else {\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n                        erosions[4],\r\n                        weirdness,\r\n                        0.0,\r\n                        middleBiome\r\n                    )\r\n                }\r\n\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    coastContinentalness,\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    shatteredCoastBiome\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    maybeShattered\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    extremeHillsBiome\r\n                )\r\n                if (weirdness.max < 0) {\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        coastContinentalness,\r\n                        erosions[6],\r\n                        weirdness,\r\n                        0.0,\r\n                        beachBiome\r\n                    )\r\n                } else {\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        coastContinentalness,\r\n                        erosions[6],\r\n                        weirdness,\r\n                        0.0,\r\n                        middleBiome\r\n                    )\r\n                }\r\n\r\n                if (temperatureIndex == 0) {\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n                        erosions[6],\r\n                        weirdness,\r\n                        0.0,\r\n                        middleBiome\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private addLowSlice(biomes: BuilderOutput, weirdness: Climate.Parameter): void {\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            coastContinentalness,\r\n            Climate.Parameter.span(erosions[0], erosions[2]),\r\n            weirdness,\r\n            0.0,\r\n            Biomes.STONY_SHORE\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n            erosions[6],\r\n            weirdness,\r\n            0.0,\r\n            Biomes.SWAMP\r\n        )\r\n\r\n        for (let temperatureIndex = 0; temperatureIndex < temperatures.length; ++temperatureIndex) {\r\n            const temperature = temperatures[temperatureIndex]\r\n\r\n            for (let humidityIndex = 0; humidityIndex < humidities.length; ++humidityIndex) {\r\n                const humidity = humidities[humidityIndex]\r\n                const resourcekey = this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n                const resourcekey1 = this.pickMiddleBiomeOrBadlandsIfHot(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const resourcekey2 = this.pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                const resourcekey3 = this.pickBeachBiome(temperatureIndex)\r\n                const resourcekey4 = this.maybePickShatteredBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness,\r\n                    resourcekey\r\n                )\r\n                const resourcekey5 = this.pickShatteredCoastBiome(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    weirdness\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    Climate.Parameter.span(erosions[0], erosions[1]),\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey1\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    Climate.Parameter.span(erosions[0], erosions[1]),\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey2\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    Climate.Parameter.span(erosions[2], erosions[3]),\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    Climate.Parameter.span(erosions[2], erosions[3]),\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey1\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    coastContinentalness,\r\n                    Climate.Parameter.span(erosions[3], erosions[4]),\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey3\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n                    erosions[4],\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    coastContinentalness,\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey5\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    nearInlandContinentalness,\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey4\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    erosions[5],\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    coastContinentalness,\r\n                    erosions[6],\r\n                    weirdness,\r\n                    0.0,\r\n                    resourcekey3\r\n                )\r\n                if (temperatureIndex == 0) {\r\n                    this.addSurfaceBiome(\r\n                        biomes,\r\n                        temperature,\r\n                        humidity,\r\n                        Climate.Parameter.span(nearInlandContinentalness, farInlandContinentalness),\r\n                        erosions[6],\r\n                        weirdness,\r\n                        0.0,\r\n                        resourcekey\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private addValleys(biomes: BuilderOutput, wierdness: Climate.Parameter): void {\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FROZEN_RANGE,\r\n            FULL_RANGE,\r\n            coastContinentalness,\r\n            Climate.Parameter.span(erosions[0], erosions[1]),\r\n            wierdness,\r\n            0.0,\r\n            wierdness.max < 0 ? Biomes.STONY_SHORE : Biomes.FROZEN_RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            coastContinentalness,\r\n            Climate.Parameter.span(erosions[0], erosions[1]),\r\n            wierdness,\r\n            0.0,\r\n            wierdness.max < 0 ? Biomes.STONY_SHORE : Biomes.RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FROZEN_RANGE,\r\n            FULL_RANGE,\r\n            nearInlandContinentalness,\r\n            Climate.Parameter.span(erosions[0], erosions[1]),\r\n            wierdness,\r\n            0.0,\r\n            Biomes.FROZEN_RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            nearInlandContinentalness,\r\n            Climate.Parameter.span(erosions[0], erosions[1]),\r\n            wierdness,\r\n            0.0,\r\n            Biomes.RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FROZEN_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n            Climate.Parameter.span(erosions[2], erosions[5]),\r\n            wierdness,\r\n            0.0,\r\n            Biomes.FROZEN_RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(coastContinentalness, farInlandContinentalness),\r\n            Climate.Parameter.span(erosions[2], erosions[5]),\r\n            wierdness,\r\n            0.0,\r\n            Biomes.RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FROZEN_RANGE,\r\n            FULL_RANGE,\r\n            coastContinentalness,\r\n            erosions[6],\r\n            wierdness,\r\n            0.0,\r\n            Biomes.FROZEN_RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            coastContinentalness,\r\n            erosions[6],\r\n            wierdness,\r\n            0.0,\r\n            Biomes.RIVER\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            UNFROZEN_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(inlandContinentalness, farInlandContinentalness),\r\n            erosions[6],\r\n            wierdness,\r\n            0.0,\r\n            Biomes.SWAMP\r\n        )\r\n        this.addSurfaceBiome(\r\n            biomes,\r\n            FROZEN_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(inlandContinentalness, farInlandContinentalness),\r\n            erosions[6],\r\n            wierdness,\r\n            0.0,\r\n            Biomes.FROZEN_RIVER\r\n        )\r\n\r\n        for (let temperatureIndex = 0; temperatureIndex < temperatures.length; ++temperatureIndex) {\r\n            const temperature = temperatures[temperatureIndex]\r\n\r\n            for (let humidityIndex = 0; humidityIndex < humidities.length; ++humidityIndex) {\r\n                const humidity = humidities[humidityIndex]\r\n                const resourcekey = this.pickMiddleBiomeOrBadlandsIfHot(\r\n                    temperatureIndex,\r\n                    humidityIndex,\r\n                    wierdness\r\n                )\r\n                this.addSurfaceBiome(\r\n                    biomes,\r\n                    temperature,\r\n                    humidity,\r\n                    Climate.Parameter.span(midInlandContinentalness, farInlandContinentalness),\r\n                    Climate.Parameter.span(erosions[0], erosions[1]),\r\n                    wierdness,\r\n                    0.0,\r\n                    resourcekey\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private addUndergroundBiomes(biomes: BuilderOutput): void {\r\n        this.addUndergroundBiome(\r\n            biomes,\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(0.8, 1.0),\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            0.0,\r\n            Biomes.DRIPSTONE_CAVES\r\n        )\r\n        this.addUndergroundBiome(\r\n            biomes,\r\n            FULL_RANGE,\r\n            Climate.Parameter.span(0.7, 1.0),\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            FULL_RANGE,\r\n            0.0,\r\n            Biomes.LUSH_CAVES\r\n        )\r\n    }\r\n\r\n    // biome pickers\r\n\r\n    private pickMiddleBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        if (weirdness.max < 0) {\r\n            return MIDDLE_BIOMES[temperatureIndex][humidityIndex]\r\n        } else {\r\n            const resourcekey = MIDDLE_BIOMES_VARIANT[temperatureIndex][humidityIndex]\r\n            return resourcekey == null\r\n                ? MIDDLE_BIOMES[temperatureIndex][humidityIndex]\r\n                : resourcekey\r\n        }\r\n    }\r\n\r\n    private pickMiddleBiomeOrBadlandsIfHot(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        return temperatureIndex == 4\r\n            ? this.pickBadlandsBiome(humidityIndex, weirdness)\r\n            : this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n    }\r\n\r\n    private pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        return temperatureIndex == 0\r\n            ? this.pickSlopeBiome(temperatureIndex, humidityIndex, weirdness)\r\n            : this.pickMiddleBiomeOrBadlandsIfHot(temperatureIndex, humidityIndex, weirdness)\r\n    }\r\n\r\n    private maybePickShatteredBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter,\r\n        defaultBiome: Biomes\r\n    ): Biomes {\r\n        return temperatureIndex > 1 && humidityIndex < 4 && weirdness.max >= 0\r\n            ? Biomes.WINDSWEPT_SAVANNA\r\n            : defaultBiome\r\n    }\r\n\r\n    private pickShatteredCoastBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        const biome =\r\n            weirdness.max >= 0\r\n                ? this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n                : this.pickBeachBiome(temperatureIndex)\r\n        return this.maybePickShatteredBiome(temperatureIndex, humidityIndex, weirdness, biome)\r\n    }\r\n\r\n    private pickBeachBiome(temperatureIndex: number): Biomes {\r\n        if (temperatureIndex == 0) {\r\n            return Biomes.SNOWY_BEACH\r\n        } else {\r\n            return temperatureIndex == 4 ? Biomes.DESERT : Biomes.BEACH\r\n        }\r\n    }\r\n\r\n    private pickBadlandsBiome(humidityIndex: number, weirdness: Climate.Parameter): Biomes {\r\n        if (humidityIndex < 2) {\r\n            return weirdness.max < 0 ? Biomes.ERODED_BADLANDS : Biomes.BADLANDS\r\n        } else {\r\n            return humidityIndex < 3 ? Biomes.BADLANDS : Biomes.WOODED_BADLANDS\r\n        }\r\n    }\r\n\r\n    private pickPlateauBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        if (weirdness.max < 0) {\r\n            return PLATEAU_BIOMES[temperatureIndex][humidityIndex]\r\n        } else {\r\n            const biome = PLATEAU_BIOMES_VARIANT[temperatureIndex][humidityIndex]\r\n            return biome == null ? PLATEAU_BIOMES[temperatureIndex][humidityIndex] : biome\r\n        }\r\n    }\r\n\r\n    private pickPeakBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        if (temperatureIndex <= 2) {\r\n            return weirdness.max < 0 ? Biomes.JAGGED_PEAKS : Biomes.FROZEN_PEAKS\r\n        } else {\r\n            return temperatureIndex == 3\r\n                ? Biomes.STONY_PEAKS\r\n                : this.pickBadlandsBiome(humidityIndex, weirdness)\r\n        }\r\n    }\r\n\r\n    private pickSlopeBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        if (temperatureIndex >= 3) {\r\n            return this.pickPlateauBiome(temperatureIndex, humidityIndex, weirdness)\r\n        } else {\r\n            return humidityIndex <= 1 ? Biomes.SNOWY_SLOPES : Biomes.GROVE\r\n        }\r\n    }\r\n\r\n    private pickExtremeHillsBiome(\r\n        temperatureIndex: number,\r\n        humidityIndex: number,\r\n        weirdness: Climate.Parameter\r\n    ): Biomes {\r\n        const extremeHillsBiome = EXTREME_HILLS[temperatureIndex][humidityIndex]\r\n        return extremeHillsBiome == null\r\n            ? this.pickMiddleBiome(temperatureIndex, humidityIndex, weirdness)\r\n            : extremeHillsBiome\r\n    }\r\n\r\n    // push result\r\n\r\n    private addSurfaceBiome(\r\n        biomes: BuilderOutput,\r\n        temperature: Climate.Parameter,\r\n        humidity: Climate.Parameter,\r\n        continentalness: Climate.Parameter,\r\n        erosion: Climate.Parameter,\r\n        weirdness: Climate.Parameter,\r\n        offset: number,\r\n        biome: Biomes\r\n    ) {\r\n        biomes.push(\r\n            Pair.of(\r\n                Climate.parameters(\r\n                    temperature,\r\n                    humidity,\r\n                    continentalness,\r\n                    erosion,\r\n                    Climate.Parameter.point(0.0),\r\n                    weirdness,\r\n                    offset\r\n                ),\r\n                biome\r\n            )\r\n        )\r\n        biomes.push(\r\n            Pair.of(\r\n                Climate.parameters(\r\n                    temperature,\r\n                    humidity,\r\n                    continentalness,\r\n                    erosion,\r\n                    Climate.Parameter.point(1.0),\r\n                    weirdness,\r\n                    offset\r\n                ),\r\n                biome\r\n            )\r\n        )\r\n    }\r\n\r\n    private addUndergroundBiome(\r\n        biomes: BuilderOutput,\r\n        temperature: Climate.Parameter,\r\n        humidity: Climate.Parameter,\r\n        continentalness: Climate.Parameter,\r\n        erosion: Climate.Parameter,\r\n        weirdness: Climate.Parameter,\r\n        offset: number,\r\n        biome: Biomes\r\n    ) {\r\n        biomes.push(\r\n            Pair.of(\r\n                Climate.parameters(\r\n                    temperature,\r\n                    humidity,\r\n                    continentalness,\r\n                    erosion,\r\n                    Climate.Parameter.span(0.2, 0.9),\r\n                    weirdness,\r\n                    offset\r\n                ),\r\n                biome\r\n            )\r\n        )\r\n    }\r\n}\r\n","import { mat4, quat, vec3, vec4 } from \"gl-matrix\"\r\nimport { SimpleObject } from \"../entities/object\"\r\nimport { Box, Capsule, Plane, Sphere } from \"../models/collision-primitives\"\r\nimport { CollisionGroups, PhysicsDef } from \"../models/physics-def\"\r\nimport { CapsuleModelDef } from \"../models/templates/capsule-def\"\r\nimport { SimpleModelDef } from \"../models/templates/simple-model-def\"\r\nimport { Services } from \"./services\"\r\n\r\nimport { Biomes } from \"../surface-generation/biomes/biomes\"\r\nimport * as Climate from \"../surface-generation/biomes/climate\"\r\nimport { Pair } from \"../surface-generation/biomes/consumer\"\r\nimport { OverworldBiomeBuilder } from \"../surface-generation/biomes/overworld-biome-builder\"\r\nimport { colorToRGBA } from \"./render\"\r\n\r\nexport const BIOME_TO_COLOR: Partial<{ [key in Biomes]: number }> = {}\r\nBIOME_TO_COLOR[Biomes.THE_VOID] = 0x000000\r\nBIOME_TO_COLOR[Biomes.PLAINS] = 0x00cc00\r\nBIOME_TO_COLOR[Biomes.SUNFLOWER_PLAINS] = 0xffff66\r\nBIOME_TO_COLOR[Biomes.SNOWY_PLAINS] = 0xccffff\r\nBIOME_TO_COLOR[Biomes.ICE_SPIKES] = 0xccffff\r\nBIOME_TO_COLOR[Biomes.DESERT] = 0xffcc66\r\nBIOME_TO_COLOR[Biomes.SWAMP] = 0x006666\r\nBIOME_TO_COLOR[Biomes.FOREST] = 0x009933\r\nBIOME_TO_COLOR[Biomes.FLOWER_FOREST] = 0xcae03a\r\nBIOME_TO_COLOR[Biomes.BIRCH_FOREST] = 0xd6dea6\r\nBIOME_TO_COLOR[Biomes.DARK_FOREST] = 0x183615\r\nBIOME_TO_COLOR[Biomes.OLD_GROWTH_BIRCH_FOREST] = 0xd6dea6\r\nBIOME_TO_COLOR[Biomes.OLD_GROWTH_PINE_TAIGA] = 0x009933\r\nBIOME_TO_COLOR[Biomes.OLD_GROWTH_SPRUCE_TAIGA] = 0x009933\r\nBIOME_TO_COLOR[Biomes.TAIGA] = 0x071705\r\nBIOME_TO_COLOR[Biomes.SNOWY_TAIGA] = 0x364034\r\nBIOME_TO_COLOR[Biomes.SAVANNA] = 0x849626\r\nBIOME_TO_COLOR[Biomes.SAVANNA_PLATEAU] = 0x909c54\r\nBIOME_TO_COLOR[Biomes.WINDSWEPT_HILLS] = 0x2e612c\r\nBIOME_TO_COLOR[Biomes.WINDSWEPT_GRAVELLY_HILLS] = 0x445744\r\nBIOME_TO_COLOR[Biomes.WINDSWEPT_FOREST] = 0x2f4d2f\r\nBIOME_TO_COLOR[Biomes.WINDSWEPT_SAVANNA] = 0x656e47\r\nBIOME_TO_COLOR[Biomes.JUNGLE] = 0x18c71a\r\nBIOME_TO_COLOR[Biomes.SPARSE_JUNGLE] = 0x8ac26e\r\nBIOME_TO_COLOR[Biomes.BAMBOO_JUNGLE] = 0x38b832\r\nBIOME_TO_COLOR[Biomes.BADLANDS] = 0xbd6920\r\nBIOME_TO_COLOR[Biomes.ERODED_BADLANDS] = 0xb3743e\r\nBIOME_TO_COLOR[Biomes.WOODED_BADLANDS] = 0xc79044\r\nBIOME_TO_COLOR[Biomes.MEADOW] = 0x4cc22f\r\nBIOME_TO_COLOR[Biomes.GROVE] = 0x80997a\r\nBIOME_TO_COLOR[Biomes.SNOWY_SLOPES] = 0xe2e6e1\r\nBIOME_TO_COLOR[Biomes.FROZEN_PEAKS] = 0xb8c8d4\r\nBIOME_TO_COLOR[Biomes.JAGGED_PEAKS] = 0x95999c\r\nBIOME_TO_COLOR[Biomes.STONY_PEAKS] = 0x686869\r\nBIOME_TO_COLOR[Biomes.RIVER] = 0x4a73a8\r\nBIOME_TO_COLOR[Biomes.FROZEN_RIVER] = 0x7ba2d4\r\nBIOME_TO_COLOR[Biomes.BEACH] = 0xf2f754\r\nBIOME_TO_COLOR[Biomes.SNOWY_BEACH] = 0xcbcca3\r\nBIOME_TO_COLOR[Biomes.STONY_SHORE] = 0xccd2d9\r\nBIOME_TO_COLOR[Biomes.WARM_OCEAN] = 0x117dfa\r\nBIOME_TO_COLOR[Biomes.LUKEWARM_OCEAN] = 0x3186e8\r\nBIOME_TO_COLOR[Biomes.DEEP_LUKEWARM_OCEAN] = 0x2262ab\r\nBIOME_TO_COLOR[Biomes.OCEAN] = 0x4883c7\r\nBIOME_TO_COLOR[Biomes.DEEP_OCEAN] = 0x335e8f\r\nBIOME_TO_COLOR[Biomes.COLD_OCEAN] = 0x5a7a9e\r\nBIOME_TO_COLOR[Biomes.DEEP_COLD_OCEAN] = 0x3c5169\r\nBIOME_TO_COLOR[Biomes.FROZEN_OCEAN] = 0x5a6e85\r\nBIOME_TO_COLOR[Biomes.DEEP_FROZEN_OCEAN] = 0x3a4552\r\nBIOME_TO_COLOR[Biomes.MUSHROOM_FIELDS] = 0xd67e74\r\nBIOME_TO_COLOR[Biomes.DRIPSTONE_CAVES] = 0x0\r\nBIOME_TO_COLOR[Biomes.LUSH_CAVES] = 0x0\r\nBIOME_TO_COLOR[Biomes.NETHER_WASTES] = 0x0\r\nBIOME_TO_COLOR[Biomes.WARPED_FOREST] = 0x0\r\nBIOME_TO_COLOR[Biomes.CRIMSON_FOREST] = 0x0\r\nBIOME_TO_COLOR[Biomes.SOUL_SAND_VALLEY] = 0x0\r\nBIOME_TO_COLOR[Biomes.BASALT_DELTAS] = 0x0\r\nBIOME_TO_COLOR[Biomes.THE_END] = 0x0\r\nBIOME_TO_COLOR[Biomes.END_HIGHLANDS] = 0x0\r\nBIOME_TO_COLOR[Biomes.END_MIDLANDS] = 0x0\r\nBIOME_TO_COLOR[Biomes.SMALL_END_ISLANDS] = 0x0\r\nBIOME_TO_COLOR[Biomes.END_BARRENS] = 0x0\r\n\r\nexport class MapLoader {\r\n    async loadMap(mapName: string) {\r\n        if (mapName === \"test\") {\r\n            await this.loadTestMap()\r\n        } else {\r\n            throw new Error(\"TODO\")\r\n        }\r\n    }\r\n\r\n    private loadTestMap() {\r\n        const q = quat.create()\r\n        quat.fromEuler(q, 0, 0, 0)\r\n\r\n        const ground = new SimpleObject(\r\n            {\r\n                pos: vec3.fromValues(0, 0, 0),\r\n                size: vec3.fromValues(50, 50, 1),\r\n                rotation: q,\r\n            },\r\n            new SimpleModelDef(\"plane\", {\r\n                texMul: 25,\r\n            }),\r\n            \"grass2.jpg\",\r\n            new PhysicsDef({\r\n                isStatic: true,\r\n                bakedTransform: true,\r\n            }),\r\n            new Plane()\r\n        )\r\n        Services.world.add(ground)\r\n\r\n        const player = new SimpleObject(\r\n            {\r\n                pos: vec3.fromValues(0, 2.61, 1.8 / 2),\r\n                size: vec3.fromValues(1, 1, 1.8),\r\n                rotation: quat.create(),\r\n            },\r\n            new CapsuleModelDef(),\r\n            \"blank\",\r\n            new PhysicsDef({\r\n                noRotation: true,\r\n                friction: 0.9,\r\n                collisionGroup: CollisionGroups.PLAYER,\r\n            }),\r\n            new Capsule()\r\n        )\r\n        Services.world.add(player)\r\n\r\n        Services.inputManager.setEntityToOrbit(player, 5)\r\n        Services.inputManager.setControlledEntity(player)\r\n\r\n        const builder = new OverworldBiomeBuilder()\r\n\r\n        const output = [] as Pair<Climate.ParameterPoint, Biomes>[]\r\n        builder.addBiomes(output)\r\n\r\n        const min = vec3.fromValues(Infinity, Infinity, Infinity)\r\n        const max = vec3.fromValues(-Infinity, -Infinity, -Infinity)\r\n\r\n        const POS_MUL = 1\r\n        const SIZE_MUL = 1\r\n\r\n        const POS_TRANSFORM = mat4.create()\r\n        mat4.translate(POS_TRANSFORM, POS_TRANSFORM, vec3.fromValues(0, 0, 1.5))\r\n        mat4.scale(POS_TRANSFORM, POS_TRANSFORM, vec3.fromValues(POS_MUL, POS_MUL, POS_MUL))\r\n\r\n        const SIZE_TRANSFORM = mat4.create()\r\n        mat4.scale(SIZE_TRANSFORM, SIZE_TRANSFORM, vec3.fromValues(SIZE_MUL, SIZE_MUL, SIZE_MUL))\r\n\r\n        const biomesToShow = [Biomes.BIRCH_FOREST, Biomes.FOREST, Biomes.DARK_FOREST]\r\n\r\n        const biomeBounds: Partial<{\r\n            [key in Biomes]: {\r\n                min: vec3\r\n                max: vec3\r\n            }\r\n        }> = {}\r\n\r\n        for (const item of output) {\r\n            const { first: point, second: biome } = item\r\n\r\n            const xRange = point.temperature\r\n            const yRange = point.humidity\r\n            const zRange = point.continentalness\r\n\r\n            const x = Climate.unquantizeCoord(xRange.center)\r\n            const y = Climate.unquantizeCoord(yRange.center)\r\n            const z = Climate.unquantizeCoord(zRange.center)\r\n\r\n            const sizeX = Climate.unquantizeCoord(xRange.length)\r\n            const sizeY = Climate.unquantizeCoord(yRange.length)\r\n            const sizeZ = Climate.unquantizeCoord(zRange.length)\r\n\r\n            const color = BIOME_TO_COLOR[biome]!\r\n            const rgba = colorToRGBA(color)\r\n\r\n            const pos = vec3.fromValues(x, y, z)\r\n            const size = vec3.fromValues(sizeX, sizeY, sizeZ)\r\n\r\n            vec3.transformMat4(pos, pos, POS_TRANSFORM)\r\n            vec3.transformMat4(size, size, SIZE_TRANSFORM)\r\n\r\n            const box = new SimpleObject(\r\n                {\r\n                    pos,\r\n                    size,\r\n                    rotation: quat.create(),\r\n                },\r\n                new SimpleModelDef(\"cube\", {\r\n                    colorOverride: vec4.fromValues(rgba[0], rgba[1], rgba[2], 0.8),\r\n                    alpha: true,\r\n                }),\r\n                \"blank\"\r\n            )\r\n            if (biomesToShow.includes(biome)) {\r\n                let bounds = biomeBounds[biome]\r\n                if (bounds === undefined) {\r\n                    bounds = {\r\n                        min: vec3.fromValues(Infinity, Infinity, Infinity),\r\n                        max: vec3.fromValues(-Infinity, -Infinity, -Infinity),\r\n                    }\r\n                    biomeBounds[biome] = bounds\r\n                }\r\n\r\n                vec3.min(\r\n                    bounds.min,\r\n                    bounds.min,\r\n                    vec3.fromValues(\r\n                        Climate.unquantizeCoord(xRange.min),\r\n                        Climate.unquantizeCoord(yRange.min),\r\n                        Climate.unquantizeCoord(zRange.min)\r\n                    )\r\n                )\r\n\r\n                vec3.max(\r\n                    bounds.max,\r\n                    bounds.max,\r\n                    vec3.fromValues(\r\n                        Climate.unquantizeCoord(xRange.max),\r\n                        Climate.unquantizeCoord(yRange.max),\r\n                        Climate.unquantizeCoord(zRange.max)\r\n                    )\r\n                )\r\n\r\n                // Services.world.add(box)\r\n            }\r\n\r\n            vec3.min(\r\n                min,\r\n                min,\r\n                vec3.fromValues(\r\n                    Climate.unquantizeCoord(xRange.min),\r\n                    Climate.unquantizeCoord(yRange.min),\r\n                    Climate.unquantizeCoord(zRange.min)\r\n                )\r\n            )\r\n\r\n            vec3.max(\r\n                max,\r\n                max,\r\n                vec3.fromValues(\r\n                    Climate.unquantizeCoord(xRange.max),\r\n                    Climate.unquantizeCoord(yRange.max),\r\n                    Climate.unquantizeCoord(zRange.max)\r\n                )\r\n            )\r\n        }\r\n\r\n        vec3.transformMat4(min, min, SIZE_TRANSFORM)\r\n        vec3.transformMat4(min, min, POS_TRANSFORM)\r\n        vec3.transformMat4(max, max, SIZE_TRANSFORM)\r\n        vec3.transformMat4(max, max, POS_TRANSFORM)\r\n\r\n        Services.render.addDebugRect(min, max, 0x00ff00, 0xff0000, 0x0000ff)\r\n\r\n        Services.render.addText(\r\n            \"temperature\",\r\n            vec3.fromValues((min[0] + max[0]) * 0.5, max[1], max[2])\r\n        )\r\n        Services.render.addText(\"cold\", vec3.fromValues(min[0], max[1], max[2]))\r\n        Services.render.addText(\"hot\", vec3.fromValues(max[0], max[1], max[2] + 0.1))\r\n\r\n        Services.render.addText(\r\n            \"humidity\",\r\n            vec3.fromValues(max[0], (min[1] + max[1]) * 0.5, max[2])\r\n        )\r\n        Services.render.addText(\"dry\", vec3.fromValues(max[0], min[1], max[2]))\r\n        Services.render.addText(\"humid\", vec3.fromValues(max[0], max[1], max[2]))\r\n\r\n        Services.render.addText(\r\n            \"continentalness\",\r\n            vec3.fromValues(max[0], max[1], (min[2] + max[2]) * 0.5)\r\n        )\r\n\r\n        Services.render.addText(\"ocean\", vec3.fromValues(max[0], max[1], min[2]))\r\n        Services.render.addText(\"center\", vec3.fromValues(max[0], max[1], max[2] - 0.1))\r\n\r\n        for (const biome of Object.keys(biomeBounds)) {\r\n            const center = vec3.create()\r\n\r\n            const bounds = biomeBounds[biome]\r\n            vec3.transformMat4(bounds.min, bounds.min, SIZE_TRANSFORM)\r\n            vec3.transformMat4(bounds.min, bounds.min, POS_TRANSFORM)\r\n            vec3.transformMat4(bounds.max, bounds.max, SIZE_TRANSFORM)\r\n            vec3.transformMat4(bounds.max, bounds.max, POS_TRANSFORM)\r\n\r\n            vec3.lerp(center, bounds.min, bounds.max, 0.5)\r\n            Services.render.addText(biome.toUpperCase(), center)\r\n\r\n            const size = vec3.clone(bounds.max)\r\n            vec3.sub(size, size, bounds.min)\r\n\r\n            const color = BIOME_TO_COLOR[biome]!\r\n            const rgba = colorToRGBA(color)\r\n\r\n            const box = new SimpleObject(\r\n                {\r\n                    pos: center,\r\n                    size,\r\n                    rotation: quat.create(),\r\n                },\r\n                new SimpleModelDef(\"cube\", {\r\n                    colorOverride: vec4.fromValues(rgba[0], rgba[1], rgba[2], 0.6),\r\n                    alpha: true,\r\n                }),\r\n                \"blank\"\r\n            )\r\n\r\n            Services.world.add(box)\r\n        }\r\n    }\r\n}\r\n","import { quat, vec3 } from \"gl-matrix\"\r\nimport { PhysicsComponent } from \"../components/phyicsComponent\"\r\nimport { TransformComponent } from \"../components/transformComponent\"\r\nimport { Entity } from \"../entities/entity\"\r\nimport { Services } from \"./services\"\r\n\r\ntype OrbitInfo = {\r\n    entity: Entity\r\n\r\n    yAngle: number\r\n    zAngle: number\r\n\r\n    distance: number\r\n}\r\n\r\nexport class InputManager {\r\n    private readonly clickHandlerBind = this.clickHandler.bind(this)\r\n    private readonly mouseHandlerBind = this.mouseHandler.bind(this)\r\n    private readonly keyHandlerBind = this.keyHandler.bind(this)\r\n\r\n    private readonly keyboard: Map<string, boolean> = new Map()\r\n\r\n    private orbit: OrbitInfo | undefined\r\n    private controlledEntity: Entity | undefined\r\n\r\n    constructor(private readonly canvas: HTMLCanvasElement) {\r\n        this.attchEvents()\r\n    }\r\n\r\n    private attchEvents() {\r\n        const { canvas } = this\r\n\r\n        canvas.addEventListener(\"click\", this.clickHandlerBind)\r\n\r\n        canvas.addEventListener(\"mousemove\", this.mouseHandlerBind, { passive: true })\r\n        canvas.addEventListener(\"mouseup\", this.mouseHandlerBind, { passive: true })\r\n        canvas.addEventListener(\"mousedown\", this.mouseHandlerBind, { passive: true })\r\n\r\n        window.addEventListener(\"keyup\", this.keyHandlerBind)\r\n        window.addEventListener(\"keydown\", this.keyHandlerBind)\r\n    }\r\n\r\n    private clickHandler(e: MouseEvent): void {\r\n        this.canvas.requestPointerLock()\r\n    }\r\n\r\n    private mouseHandler(e: MouseEvent): void {\r\n        const dx = e.movementX\r\n        const dy = e.movementY\r\n        const isLocked = document.pointerLockElement === this.canvas\r\n\r\n        if (this.orbit && isLocked && e.type === \"mousemove\") {\r\n            const ROTATION_SPEED = 0.1\r\n            const e = 10e-3\r\n\r\n            this.orbit.zAngle = (this.orbit.zAngle + dx * ROTATION_SPEED) % 360\r\n            this.orbit.yAngle = Math.max(\r\n                -90 + e,\r\n                Math.min(this.orbit.yAngle + dy * ROTATION_SPEED, 90 - e)\r\n            )\r\n            this.applyOrbit()\r\n        }\r\n    }\r\n\r\n    private processControlledEntity(dt: number): void {\r\n        const entity = this.controlledEntity\r\n\r\n        if (!entity) {\r\n            return\r\n        }\r\n\r\n        const physics = entity.get(PhysicsComponent)\r\n        const transform = entity.get(TransformComponent)\r\n\r\n        dt = dt / 1000\r\n\r\n        if (transform && physics && physics.body && this.orbit) {\r\n            physics.body.applyCentralImpulse(new Ammo.btVector3(0, 0, -9.8 * dt))\r\n            physics.body.setGravity(new Ammo.btVector3(0, 0, 0))\r\n\r\n            let speed = 0\r\n            let desiredAngle = this.orbit.zAngle\r\n\r\n            if (this.isPressed(\"KeyW\", \"KeyS\", \"KeyA\", \"KeyD\")) {\r\n                // speed = 17.24 // run\r\n                speed = 7.62 // walk\r\n            }\r\n\r\n            if (this.isPressed(\"KeyA\")) {\r\n                desiredAngle -= this.isPressed(\"KeyW\") ? 45 : this.isPressed(\"KeyS\") ? -45 : 90\r\n            }\r\n            if (this.isPressed(\"KeyD\")) {\r\n                desiredAngle += this.isPressed(\"KeyW\") ? 45 : this.isPressed(\"KeyS\") ? -45 : 90\r\n            }\r\n\r\n            if (this.isPressed(\"KeyS\")) {\r\n                desiredAngle += 180\r\n            }\r\n\r\n            const velocity = vec3.fromValues(-speed, 0, 0)\r\n            const q = quat.create()\r\n            quat.fromEuler(q, 0, 0, -desiredAngle)\r\n            vec3.transformQuat(velocity, velocity, q)\r\n\r\n            const pos = physics.body.getWorldTransform().getOrigin()\r\n\r\n            const next_x = pos.x()\r\n            const next_y = pos.y()\r\n            const next_z = pos.z() - 9.8 * 0.9375 * dt // gravity effect?\r\n\r\n            const z = next_z\r\n            const FEET_OFFSET = transform.transform.size[2] * 0.5 + 0.4\r\n\r\n            const center = vec3.fromValues(next_x, next_y, z)\r\n            const feet = vec3.fromValues(next_x, next_y, z - FEET_OFFSET)\r\n            const result = Services.physics.raycast(center, feet)\r\n            velocity[2] = physics.body.getLinearVelocity().z()\r\n\r\n            if (result.hit) {\r\n                const next_z = center[2] - result.distance + FEET_OFFSET\r\n\r\n                velocity[2] = 0\r\n\r\n                const t = physics.body.getWorldTransform()\r\n                t.setOrigin(new Ammo.btVector3(pos.x(), pos.y(), next_z - 0.001))\r\n            }\r\n            const ammoVelocity = new Ammo.btVector3(velocity[0], velocity[1], velocity[2])\r\n            physics.body.setLinearVelocity(ammoVelocity)\r\n            physics.body.activate(true)\r\n\r\n            Services.render.drawDebugLine(center, feet, 0xff0000, 0x00ff00)\r\n        }\r\n    }\r\n\r\n    private isPressed(...codes: string[]): boolean {\r\n        for (const code of codes) {\r\n            if (this.keyboard.has(code)) {\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    private processKeyMap(e: KeyboardEvent): void {\r\n        if (e.type === \"keydown\") {\r\n            this.keyboard.set(e.code, true)\r\n        } else if (e.type === \"keyup\") {\r\n            this.keyboard.delete(e.code)\r\n        }\r\n    }\r\n\r\n    private keyHandler(e: KeyboardEvent): void {\r\n        this.processKeyMap(e)\r\n    }\r\n\r\n    setEntityToOrbit(entity: Entity, distance: number): void {\r\n        this.orbit = {\r\n            entity,\r\n            yAngle: 0,\r\n            zAngle: 0,\r\n            distance,\r\n        }\r\n\r\n        this.applyOrbit()\r\n    }\r\n\r\n    setControlledEntity(entity: Entity): void {\r\n        this.controlledEntity = entity\r\n    }\r\n\r\n    private applyOrbit() {\r\n        if (this.orbit) {\r\n            const transform = this.orbit.entity.get(TransformComponent)\r\n            if (!transform) {\r\n                throw new Error(\"Can't orbit entity without transformation component.\")\r\n            }\r\n\r\n            const center = transform.transform.pos\r\n\r\n            const q = quat.create()\r\n            quat.fromEuler(q, 0, -this.orbit.yAngle, -this.orbit.zAngle)\r\n\r\n            const eye = vec3.fromValues(this.orbit.distance, 0, 0)\r\n            vec3.transformQuat(eye, eye, q)\r\n            vec3.add(eye, center, eye)\r\n\r\n            Services.render.setCamera(eye, center)\r\n        }\r\n    }\r\n\r\n    tick(dt: number) {\r\n        this.processControlledEntity(dt)\r\n    }\r\n\r\n    postPhysics() {\r\n        this.applyOrbit()\r\n    }\r\n}\r\n","import { Render } from \"./render\"\r\nimport { Physics } from \"./physics\"\r\nimport { ResourceManager } from \"./resource-manager\"\r\nimport { World } from \"./world\"\r\nimport { GameLoop } from \"./gameloop\"\r\nimport { MapLoader } from \"./map-loader\"\r\nimport { InputManager } from \"./input-manager\"\r\n\r\nexport class ServicesClass {\r\n    readonly render: Render\r\n    readonly physics: Physics\r\n    readonly inputManager: InputManager\r\n    readonly resources: ResourceManager\r\n    readonly world: World\r\n    readonly mapLoader: MapLoader\r\n    readonly loop: GameLoop\r\n\r\n    constructor(options: { ammo: typeof Ammo }) {\r\n        const canvasWebGL = document.createElement(\"canvas\")\r\n        const canvas2D = document.createElement(\"canvas\")\r\n        canvas2D.style.pointerEvents = \"none\"\r\n        document.body.appendChild(canvasWebGL)\r\n        document.body.appendChild(canvas2D)\r\n\r\n        this.render = new Render(canvasWebGL, canvas2D)\r\n        this.physics = new Physics(options.ammo)\r\n        this.inputManager = new InputManager(canvasWebGL)\r\n        this.resources = new ResourceManager()\r\n        this.world = new World()\r\n        this.mapLoader = new MapLoader()\r\n        this.loop = new GameLoop()\r\n    }\r\n\r\n    async start(): Promise<void> {\r\n        await this.mapLoader.loadMap(\"test\")\r\n        await this.resources.waitForLoading()\r\n\r\n        this.loop.start()\r\n    }\r\n}\r\n","export enum Blocks {\r\n    AIR = \"air\",\r\n    STONE = \"stone\",\r\n    GRANITE = \"granite\",\r\n    POLISHED_GRANITE = \"polished_granite\",\r\n    DIORITE = \"diorite\",\r\n    POLISHED_DIORITE = \"polished_diorite\",\r\n    ANDESITE = \"andesite\",\r\n    POLISHED_ANDESITE = \"polished_andesite\",\r\n    GRASS_BLOCK = \"grass_block\",\r\n    DIRT = \"dirt\",\r\n    COARSE_DIRT = \"coarse_dirt\",\r\n    PODZOL = \"podzol\",\r\n    COBBLESTONE = \"cobblestone\",\r\n    OAK_PLANKS = \"oak_planks\",\r\n    SPRUCE_PLANKS = \"spruce_planks\",\r\n    BIRCH_PLANKS = \"birch_planks\",\r\n    JUNGLE_PLANKS = \"jungle_planks\",\r\n    ACACIA_PLANKS = \"acacia_planks\",\r\n    DARK_OAK_PLANKS = \"dark_oak_planks\",\r\n    OAK_SAPLING = \"oak_sapling\",\r\n    SPRUCE_SAPLING = \"spruce_sapling\",\r\n    BIRCH_SAPLING = \"birch_sapling\",\r\n    JUNGLE_SAPLING = \"jungle_sapling\",\r\n    ACACIA_SAPLING = \"acacia_sapling\",\r\n    DARK_OAK_SAPLING = \"dark_oak_sapling\",\r\n    BEDROCK = \"bedrock\",\r\n    WATER = \"water\",\r\n    LAVA = \"lava\",\r\n    SAND = \"sand\",\r\n    RED_SAND = \"red_sand\",\r\n    GRAVEL = \"gravel\",\r\n    GOLD_ORE = \"gold_ore\",\r\n    DEEPSLATE_GOLD_ORE = \"deepslate_gold_ore\",\r\n    IRON_ORE = \"iron_ore\",\r\n    DEEPSLATE_IRON_ORE = \"deepslate_iron_ore\",\r\n    COAL_ORE = \"coal_ore\",\r\n    DEEPSLATE_COAL_ORE = \"deepslate_coal_ore\",\r\n    NETHER_GOLD_ORE = \"nether_gold_ore\",\r\n    OAK_LOG = \"oak_log\",\r\n    SPRUCE_LOG = \"spruce_log\",\r\n    BIRCH_LOG = \"birch_log\",\r\n    JUNGLE_LOG = \"jungle_log\",\r\n    ACACIA_LOG = \"acacia_log\",\r\n    DARK_OAK_LOG = \"dark_oak_log\",\r\n    STRIPPED_SPRUCE_LOG = \"stripped_spruce_log\",\r\n    STRIPPED_BIRCH_LOG = \"stripped_birch_log\",\r\n    STRIPPED_JUNGLE_LOG = \"stripped_jungle_log\",\r\n    STRIPPED_ACACIA_LOG = \"stripped_acacia_log\",\r\n    STRIPPED_DARK_OAK_LOG = \"stripped_dark_oak_log\",\r\n    STRIPPED_OAK_LOG = \"stripped_oak_log\",\r\n    OAK_WOOD = \"oak_wood\",\r\n    SPRUCE_WOOD = \"spruce_wood\",\r\n    BIRCH_WOOD = \"birch_wood\",\r\n    JUNGLE_WOOD = \"jungle_wood\",\r\n    ACACIA_WOOD = \"acacia_wood\",\r\n    DARK_OAK_WOOD = \"dark_oak_wood\",\r\n    STRIPPED_OAK_WOOD = \"stripped_oak_wood\",\r\n    STRIPPED_SPRUCE_WOOD = \"stripped_spruce_wood\",\r\n    STRIPPED_BIRCH_WOOD = \"stripped_birch_wood\",\r\n    STRIPPED_JUNGLE_WOOD = \"stripped_jungle_wood\",\r\n    STRIPPED_ACACIA_WOOD = \"stripped_acacia_wood\",\r\n    STRIPPED_DARK_OAK_WOOD = \"stripped_dark_oak_wood\",\r\n    OAK_LEAVES = \"oak_leaves\",\r\n    SPRUCE_LEAVES = \"spruce_leaves\",\r\n    BIRCH_LEAVES = \"birch_leaves\",\r\n    JUNGLE_LEAVES = \"jungle_leaves\",\r\n    ACACIA_LEAVES = \"acacia_leaves\",\r\n    DARK_OAK_LEAVES = \"dark_oak_leaves\",\r\n    AZALEA_LEAVES = \"azalea_leaves\",\r\n    FLOWERING_AZALEA_LEAVES = \"flowering_azalea_leaves\",\r\n    SPONGE = \"sponge\",\r\n    WET_SPONGE = \"wet_sponge\",\r\n    GLASS = \"glass\",\r\n    LAPIS_ORE = \"lapis_ore\",\r\n    DEEPSLATE_LAPIS_ORE = \"deepslate_lapis_ore\",\r\n    LAPIS_BLOCK = \"lapis_block\",\r\n    DISPENSER = \"dispenser\",\r\n    SANDSTONE = \"sandstone\",\r\n    CHISELED_SANDSTONE = \"chiseled_sandstone\",\r\n    CUT_SANDSTONE = \"cut_sandstone\",\r\n    NOTE_BLOCK = \"note_block\",\r\n    WHITE_BED = \"white_bed\",\r\n    ORANGE_BED = \"orange_bed\",\r\n    MAGENTA_BED = \"magenta_bed\",\r\n    LIGHT_BLUE_BED = \"light_blue_bed\",\r\n    YELLOW_BED = \"yellow_bed\",\r\n    LIME_BED = \"lime_bed\",\r\n    PINK_BED = \"pink_bed\",\r\n    GRAY_BED = \"gray_bed\",\r\n    LIGHT_GRAY_BED = \"light_gray_bed\",\r\n    CYAN_BED = \"cyan_bed\",\r\n    PURPLE_BED = \"purple_bed\",\r\n    BLUE_BED = \"blue_bed\",\r\n    BROWN_BED = \"brown_bed\",\r\n    GREEN_BED = \"green_bed\",\r\n    RED_BED = \"red_bed\",\r\n    BLACK_BED = \"black_bed\",\r\n    POWERED_RAIL = \"powered_rail\",\r\n    DETECTOR_RAIL = \"detector_rail\",\r\n    STICKY_PISTON = \"sticky_piston\",\r\n    COBWEB = \"cobweb\",\r\n    GRASS = \"grass\",\r\n    FERN = \"fern\",\r\n    DEAD_BUSH = \"dead_bush\",\r\n    SEAGRASS = \"seagrass\",\r\n    TALL_SEAGRASS = \"tall_seagrass\",\r\n    PISTON = \"piston\",\r\n    PISTON_HEAD = \"piston_head\",\r\n    WHITE_WOOL = \"white_wool\",\r\n    ORANGE_WOOL = \"orange_wool\",\r\n    MAGENTA_WOOL = \"magenta_wool\",\r\n    LIGHT_BLUE_WOOL = \"light_blue_wool\",\r\n    YELLOW_WOOL = \"yellow_wool\",\r\n    LIME_WOOL = \"lime_wool\",\r\n    PINK_WOOL = \"pink_wool\",\r\n    GRAY_WOOL = \"gray_wool\",\r\n    LIGHT_GRAY_WOOL = \"light_gray_wool\",\r\n    CYAN_WOOL = \"cyan_wool\",\r\n    PURPLE_WOOL = \"purple_wool\",\r\n    BLUE_WOOL = \"blue_wool\",\r\n    BROWN_WOOL = \"brown_wool\",\r\n    GREEN_WOOL = \"green_wool\",\r\n    RED_WOOL = \"red_wool\",\r\n    BLACK_WOOL = \"black_wool\",\r\n    MOVING_PISTON = \"moving_piston\",\r\n    DANDELION = \"dandelion\",\r\n    POPPY = \"poppy\",\r\n    BLUE_ORCHID = \"blue_orchid\",\r\n    ALLIUM = \"allium\",\r\n    AZURE_BLUET = \"azure_bluet\",\r\n    RED_TULIP = \"red_tulip\",\r\n    ORANGE_TULIP = \"orange_tulip\",\r\n    WHITE_TULIP = \"white_tulip\",\r\n    PINK_TULIP = \"pink_tulip\",\r\n    OXEYE_DAISY = \"oxeye_daisy\",\r\n    CORNFLOWER = \"cornflower\",\r\n    WITHER_ROSE = \"wither_rose\",\r\n    LILY_OF_THE_VALLEY = \"lily_of_the_valley\",\r\n    BROWN_MUSHROOM = \"brown_mushroom\",\r\n    RED_MUSHROOM = \"red_mushroom\",\r\n    GOLD_BLOCK = \"gold_block\",\r\n    IRON_BLOCK = \"iron_block\",\r\n    BRICKS = \"bricks\",\r\n    TNT = \"tnt\",\r\n    BOOKSHELF = \"bookshelf\",\r\n    MOSSY_COBBLESTONE = \"mossy_cobblestone\",\r\n    OBSIDIAN = \"obsidian\",\r\n    TORCH = \"torch\",\r\n    WALL_TORCH = \"wall_torch\",\r\n    FIRE = \"fire\",\r\n    SOUL_FIRE = \"soul_fire\",\r\n    SPAWNER = \"spawner\",\r\n    OAK_STAIRS = \"oak_stairs\",\r\n    CHEST = \"chest\",\r\n    REDSTONE_WIRE = \"redstone_wire\",\r\n    DIAMOND_ORE = \"diamond_ore\",\r\n    DEEPSLATE_DIAMOND_ORE = \"deepslate_diamond_ore\",\r\n    DIAMOND_BLOCK = \"diamond_block\",\r\n    CRAFTING_TABLE = \"crafting_table\",\r\n    WHEAT = \"wheat\",\r\n    FARMLAND = \"farmland\",\r\n    FURNACE = \"furnace\",\r\n    OAK_SIGN = \"oak_sign\",\r\n    SPRUCE_SIGN = \"spruce_sign\",\r\n    BIRCH_SIGN = \"birch_sign\",\r\n    ACACIA_SIGN = \"acacia_sign\",\r\n    JUNGLE_SIGN = \"jungle_sign\",\r\n    DARK_OAK_SIGN = \"dark_oak_sign\",\r\n    OAK_DOOR = \"oak_door\",\r\n    LADDER = \"ladder\",\r\n    RAIL = \"rail\",\r\n    COBBLESTONE_STAIRS = \"cobblestone_stairs\",\r\n    OAK_WALL_SIGN = \"oak_wall_sign\",\r\n    SPRUCE_WALL_SIGN = \"spruce_wall_sign\",\r\n    BIRCH_WALL_SIGN = \"birch_wall_sign\",\r\n    ACACIA_WALL_SIGN = \"acacia_wall_sign\",\r\n    JUNGLE_WALL_SIGN = \"jungle_wall_sign\",\r\n    DARK_OAK_WALL_SIGN = \"dark_oak_wall_sign\",\r\n    LEVER = \"lever\",\r\n    STONE_PRESSURE_PLATE = \"stone_pressure_plate\",\r\n    IRON_DOOR = \"iron_door\",\r\n    OAK_PRESSURE_PLATE = \"oak_pressure_plate\",\r\n    SPRUCE_PRESSURE_PLATE = \"spruce_pressure_plate\",\r\n    BIRCH_PRESSURE_PLATE = \"birch_pressure_plate\",\r\n    JUNGLE_PRESSURE_PLATE = \"jungle_pressure_plate\",\r\n    ACACIA_PRESSURE_PLATE = \"acacia_pressure_plate\",\r\n    DARK_OAK_PRESSURE_PLATE = \"dark_oak_pressure_plate\",\r\n    REDSTONE_ORE = \"redstone_ore\",\r\n    DEEPSLATE_REDSTONE_ORE = \"deepslate_redstone_ore\",\r\n    REDSTONE_TORCH = \"redstone_torch\",\r\n    REDSTONE_WALL_TORCH = \"redstone_wall_torch\",\r\n    STONE_BUTTON = \"stone_button\",\r\n    SNOW = \"snow\",\r\n    ICE = \"ice\",\r\n    SNOW_BLOCK = \"snow_block\",\r\n    CACTUS = \"cactus\",\r\n    CLAY = \"clay\",\r\n    SUGAR_CANE = \"sugar_cane\",\r\n    JUKEBOX = \"jukebox\",\r\n    OAK_FENCE = \"oak_fence\",\r\n    PUMPKIN = \"pumpkin\",\r\n    NETHERRACK = \"netherrack\",\r\n    SOUL_SAND = \"soul_sand\",\r\n    SOUL_SOIL = \"soul_soil\",\r\n    BASALT = \"basalt\",\r\n    POLISHED_BASALT = \"polished_basalt\",\r\n    SOUL_TORCH = \"soul_torch\",\r\n    SOUL_WALL_TORCH = \"soul_wall_torch\",\r\n    GLOWSTONE = \"glowstone\",\r\n    NETHER_PORTAL = \"nether_portal\",\r\n    CARVED_PUMPKIN = \"carved_pumpkin\",\r\n    JACK_O_LANTERN = \"jack_o_lantern\",\r\n    CAKE = \"cake\",\r\n    REPEATER = \"repeater\",\r\n    WHITE_STAINED_GLASS = \"white_stained_glass\",\r\n    ORANGE_STAINED_GLASS = \"orange_stained_glass\",\r\n    MAGENTA_STAINED_GLASS = \"magenta_stained_glass\",\r\n    LIGHT_BLUE_STAINED_GLASS = \"light_blue_stained_glass\",\r\n    YELLOW_STAINED_GLASS = \"yellow_stained_glass\",\r\n    LIME_STAINED_GLASS = \"lime_stained_glass\",\r\n    PINK_STAINED_GLASS = \"pink_stained_glass\",\r\n    GRAY_STAINED_GLASS = \"gray_stained_glass\",\r\n    LIGHT_GRAY_STAINED_GLASS = \"light_gray_stained_glass\",\r\n    CYAN_STAINED_GLASS = \"cyan_stained_glass\",\r\n    PURPLE_STAINED_GLASS = \"purple_stained_glass\",\r\n    BLUE_STAINED_GLASS = \"blue_stained_glass\",\r\n    BROWN_STAINED_GLASS = \"brown_stained_glass\",\r\n    GREEN_STAINED_GLASS = \"green_stained_glass\",\r\n    RED_STAINED_GLASS = \"red_stained_glass\",\r\n    BLACK_STAINED_GLASS = \"black_stained_glass\",\r\n    OAK_TRAPDOOR = \"oak_trapdoor\",\r\n    SPRUCE_TRAPDOOR = \"spruce_trapdoor\",\r\n    BIRCH_TRAPDOOR = \"birch_trapdoor\",\r\n    JUNGLE_TRAPDOOR = \"jungle_trapdoor\",\r\n    ACACIA_TRAPDOOR = \"acacia_trapdoor\",\r\n    DARK_OAK_TRAPDOOR = \"dark_oak_trapdoor\",\r\n    STONE_BRICKS = \"stone_bricks\",\r\n    MOSSY_STONE_BRICKS = \"mossy_stone_bricks\",\r\n    CRACKED_STONE_BRICKS = \"cracked_stone_bricks\",\r\n    CHISELED_STONE_BRICKS = \"chiseled_stone_bricks\",\r\n    INFESTED_STONE = \"infested_stone\",\r\n    INFESTED_COBBLESTONE = \"infested_cobblestone\",\r\n    INFESTED_STONE_BRICKS = \"infested_stone_bricks\",\r\n    INFESTED_MOSSY_STONE_BRICKS = \"infested_mossy_stone_bricks\",\r\n    INFESTED_CRACKED_STONE_BRICKS = \"infested_cracked_stone_bricks\",\r\n    INFESTED_CHISELED_STONE_BRICKS = \"infested_chiseled_stone_bricks\",\r\n    BROWN_MUSHROOM_BLOCK = \"brown_mushroom_block\",\r\n    RED_MUSHROOM_BLOCK = \"red_mushroom_block\",\r\n    MUSHROOM_STEM = \"mushroom_stem\",\r\n    IRON_BARS = \"iron_bars\",\r\n    CHAIN = \"chain\",\r\n    GLASS_PANE = \"glass_pane\",\r\n    MELON = \"melon\",\r\n    ATTACHED_PUMPKIN_STEM = \"attached_pumpkin_stem\",\r\n    ATTACHED_MELON_STEM = \"attached_melon_stem\",\r\n    PUMPKIN_STEM = \"pumpkin_stem\",\r\n    MELON_STEM = \"melon_stem\",\r\n    VINE = \"vine\",\r\n    GLOW_LICHEN = \"glow_lichen\",\r\n    OAK_FENCE_GATE = \"oak_fence_gate\",\r\n    BRICK_STAIRS = \"brick_stairs\",\r\n    STONE_BRICK_STAIRS = \"stone_brick_stairs\",\r\n    MYCELIUM = \"mycelium\",\r\n    LILY_PAD = \"lily_pad\",\r\n    NETHER_BRICKS = \"nether_bricks\",\r\n    NETHER_BRICK_FENCE = \"nether_brick_fence\",\r\n    NETHER_BRICK_STAIRS = \"nether_brick_stairs\",\r\n    NETHER_WART = \"nether_wart\",\r\n    ENCHANTING_TABLE = \"enchanting_table\",\r\n    BREWING_STAND = \"brewing_stand\",\r\n    CAULDRON = \"cauldron\",\r\n    WATER_CAULDRON = \"water_cauldron\",\r\n    LAVA_CAULDRON = \"lava_cauldron\",\r\n    POWDER_SNOW_CAULDRON = \"powder_snow_cauldron\",\r\n    END_PORTAL = \"end_portal\",\r\n    END_PORTAL_FRAME = \"end_portal_frame\",\r\n    END_STONE = \"end_stone\",\r\n    DRAGON_EGG = \"dragon_egg\",\r\n    REDSTONE_LAMP = \"redstone_lamp\",\r\n    COCOA = \"cocoa\",\r\n    SANDSTONE_STAIRS = \"sandstone_stairs\",\r\n    EMERALD_ORE = \"emerald_ore\",\r\n    DEEPSLATE_EMERALD_ORE = \"deepslate_emerald_ore\",\r\n    ENDER_CHEST = \"ender_chest\",\r\n    TRIPWIRE_HOOK = \"tripwire_hook\",\r\n    TRIPWIRE = \"tripwire\",\r\n    EMERALD_BLOCK = \"emerald_block\",\r\n    SPRUCE_STAIRS = \"spruce_stairs\",\r\n    BIRCH_STAIRS = \"birch_stairs\",\r\n    JUNGLE_STAIRS = \"jungle_stairs\",\r\n    COMMAND_BLOCK = \"command_block\",\r\n    BEACON = \"beacon\",\r\n    COBBLESTONE_WALL = \"cobblestone_wall\",\r\n    MOSSY_COBBLESTONE_WALL = \"mossy_cobblestone_wall\",\r\n    FLOWER_POT = \"flower_pot\",\r\n    POTTED_OAK_SAPLING = \"potted_oak_sapling\",\r\n    POTTED_SPRUCE_SAPLING = \"potted_spruce_sapling\",\r\n    POTTED_BIRCH_SAPLING = \"potted_birch_sapling\",\r\n    POTTED_JUNGLE_SAPLING = \"potted_jungle_sapling\",\r\n    POTTED_ACACIA_SAPLING = \"potted_acacia_sapling\",\r\n    POTTED_DARK_OAK_SAPLING = \"potted_dark_oak_sapling\",\r\n    POTTED_FERN = \"potted_fern\",\r\n    POTTED_DANDELION = \"potted_dandelion\",\r\n    POTTED_POPPY = \"potted_poppy\",\r\n    POTTED_BLUE_ORCHID = \"potted_blue_orchid\",\r\n    POTTED_ALLIUM = \"potted_allium\",\r\n    POTTED_AZURE_BLUET = \"potted_azure_bluet\",\r\n    POTTED_RED_TULIP = \"potted_red_tulip\",\r\n    POTTED_ORANGE_TULIP = \"potted_orange_tulip\",\r\n    POTTED_WHITE_TULIP = \"potted_white_tulip\",\r\n    POTTED_PINK_TULIP = \"potted_pink_tulip\",\r\n    POTTED_OXEYE_DAISY = \"potted_oxeye_daisy\",\r\n    POTTED_CORNFLOWER = \"potted_cornflower\",\r\n    POTTED_LILY_OF_THE_VALLEY = \"potted_lily_of_the_valley\",\r\n    POTTED_WITHER_ROSE = \"potted_wither_rose\",\r\n    POTTED_RED_MUSHROOM = \"potted_red_mushroom\",\r\n    POTTED_BROWN_MUSHROOM = \"potted_brown_mushroom\",\r\n    POTTED_DEAD_BUSH = \"potted_dead_bush\",\r\n    POTTED_CACTUS = \"potted_cactus\",\r\n    CARROTS = \"carrots\",\r\n    POTATOES = \"potatoes\",\r\n    OAK_BUTTON = \"oak_button\",\r\n    SPRUCE_BUTTON = \"spruce_button\",\r\n    BIRCH_BUTTON = \"birch_button\",\r\n    JUNGLE_BUTTON = \"jungle_button\",\r\n    ACACIA_BUTTON = \"acacia_button\",\r\n    DARK_OAK_BUTTON = \"dark_oak_button\",\r\n    SKELETON_SKULL = \"skeleton_skull\",\r\n    SKELETON_WALL_SKULL = \"skeleton_wall_skull\",\r\n    WITHER_SKELETON_SKULL = \"wither_skeleton_skull\",\r\n    WITHER_SKELETON_WALL_SKULL = \"wither_skeleton_wall_skull\",\r\n    ZOMBIE_HEAD = \"zombie_head\",\r\n    ZOMBIE_WALL_HEAD = \"zombie_wall_head\",\r\n    PLAYER_HEAD = \"player_head\",\r\n    PLAYER_WALL_HEAD = \"player_wall_head\",\r\n    CREEPER_HEAD = \"creeper_head\",\r\n    CREEPER_WALL_HEAD = \"creeper_wall_head\",\r\n    DRAGON_HEAD = \"dragon_head\",\r\n    DRAGON_WALL_HEAD = \"dragon_wall_head\",\r\n    ANVIL = \"anvil\",\r\n    CHIPPED_ANVIL = \"chipped_anvil\",\r\n    DAMAGED_ANVIL = \"damaged_anvil\",\r\n    TRAPPED_CHEST = \"trapped_chest\",\r\n    LIGHT_WEIGHTED_PRESSURE_PLATE = \"light_weighted_pressure_plate\",\r\n    HEAVY_WEIGHTED_PRESSURE_PLATE = \"heavy_weighted_pressure_plate\",\r\n    COMPARATOR = \"comparator\",\r\n    DAYLIGHT_DETECTOR = \"daylight_detector\",\r\n    REDSTONE_BLOCK = \"redstone_block\",\r\n    NETHER_QUARTZ_ORE = \"nether_quartz_ore\",\r\n    HOPPER = \"hopper\",\r\n    QUARTZ_BLOCK = \"quartz_block\",\r\n    CHISELED_QUARTZ_BLOCK = \"chiseled_quartz_block\",\r\n    QUARTZ_PILLAR = \"quartz_pillar\",\r\n    QUARTZ_STAIRS = \"quartz_stairs\",\r\n    ACTIVATOR_RAIL = \"activator_rail\",\r\n    DROPPER = \"dropper\",\r\n    WHITE_TERRACOTTA = \"white_terracotta\",\r\n    ORANGE_TERRACOTTA = \"orange_terracotta\",\r\n    MAGENTA_TERRACOTTA = \"magenta_terracotta\",\r\n    LIGHT_BLUE_TERRACOTTA = \"light_blue_terracotta\",\r\n    YELLOW_TERRACOTTA = \"yellow_terracotta\",\r\n    LIME_TERRACOTTA = \"lime_terracotta\",\r\n    PINK_TERRACOTTA = \"pink_terracotta\",\r\n    GRAY_TERRACOTTA = \"gray_terracotta\",\r\n    LIGHT_GRAY_TERRACOTTA = \"light_gray_terracotta\",\r\n    CYAN_TERRACOTTA = \"cyan_terracotta\",\r\n    PURPLE_TERRACOTTA = \"purple_terracotta\",\r\n    BLUE_TERRACOTTA = \"blue_terracotta\",\r\n    BROWN_TERRACOTTA = \"brown_terracotta\",\r\n    GREEN_TERRACOTTA = \"green_terracotta\",\r\n    RED_TERRACOTTA = \"red_terracotta\",\r\n    BLACK_TERRACOTTA = \"black_terracotta\",\r\n    WHITE_STAINED_GLASS_PANE = \"white_stained_glass_pane\",\r\n    ORANGE_STAINED_GLASS_PANE = \"orange_stained_glass_pane\",\r\n    MAGENTA_STAINED_GLASS_PANE = \"magenta_stained_glass_pane\",\r\n    LIGHT_BLUE_STAINED_GLASS_PANE = \"light_blue_stained_glass_pane\",\r\n    YELLOW_STAINED_GLASS_PANE = \"yellow_stained_glass_pane\",\r\n    LIME_STAINED_GLASS_PANE = \"lime_stained_glass_pane\",\r\n    PINK_STAINED_GLASS_PANE = \"pink_stained_glass_pane\",\r\n    GRAY_STAINED_GLASS_PANE = \"gray_stained_glass_pane\",\r\n    LIGHT_GRAY_STAINED_GLASS_PANE = \"light_gray_stained_glass_pane\",\r\n    CYAN_STAINED_GLASS_PANE = \"cyan_stained_glass_pane\",\r\n    PURPLE_STAINED_GLASS_PANE = \"purple_stained_glass_pane\",\r\n    BLUE_STAINED_GLASS_PANE = \"blue_stained_glass_pane\",\r\n    BROWN_STAINED_GLASS_PANE = \"brown_stained_glass_pane\",\r\n    GREEN_STAINED_GLASS_PANE = \"green_stained_glass_pane\",\r\n    RED_STAINED_GLASS_PANE = \"red_stained_glass_pane\",\r\n    BLACK_STAINED_GLASS_PANE = \"black_stained_glass_pane\",\r\n    ACACIA_STAIRS = \"acacia_stairs\",\r\n    DARK_OAK_STAIRS = \"dark_oak_stairs\",\r\n    SLIME_BLOCK = \"slime_block\",\r\n    BARRIER = \"barrier\",\r\n    LIGHT = \"light\",\r\n    IRON_TRAPDOOR = \"iron_trapdoor\",\r\n    PRISMARINE = \"prismarine\",\r\n    PRISMARINE_BRICKS = \"prismarine_bricks\",\r\n    DARK_PRISMARINE = \"dark_prismarine\",\r\n    PRISMARINE_STAIRS = \"prismarine_stairs\",\r\n    PRISMARINE_BRICK_STAIRS = \"prismarine_brick_stairs\",\r\n    DARK_PRISMARINE_STAIRS = \"dark_prismarine_stairs\",\r\n    PRISMARINE_SLAB = \"prismarine_slab\",\r\n    PRISMARINE_BRICK_SLAB = \"prismarine_brick_slab\",\r\n    DARK_PRISMARINE_SLAB = \"dark_prismarine_slab\",\r\n    SEA_LANTERN = \"sea_lantern\",\r\n    HAY_BLOCK = \"hay_block\",\r\n    WHITE_CARPET = \"white_carpet\",\r\n    ORANGE_CARPET = \"orange_carpet\",\r\n    MAGENTA_CARPET = \"magenta_carpet\",\r\n    LIGHT_BLUE_CARPET = \"light_blue_carpet\",\r\n    YELLOW_CARPET = \"yellow_carpet\",\r\n    LIME_CARPET = \"lime_carpet\",\r\n    PINK_CARPET = \"pink_carpet\",\r\n    GRAY_CARPET = \"gray_carpet\",\r\n    LIGHT_GRAY_CARPET = \"light_gray_carpet\",\r\n    CYAN_CARPET = \"cyan_carpet\",\r\n    PURPLE_CARPET = \"purple_carpet\",\r\n    BLUE_CARPET = \"blue_carpet\",\r\n    BROWN_CARPET = \"brown_carpet\",\r\n    GREEN_CARPET = \"green_carpet\",\r\n    RED_CARPET = \"red_carpet\",\r\n    BLACK_CARPET = \"black_carpet\",\r\n    TERRACOTTA = \"terracotta\",\r\n    COAL_BLOCK = \"coal_block\",\r\n    PACKED_ICE = \"packed_ice\",\r\n    SUNFLOWER = \"sunflower\",\r\n    LILAC = \"lilac\",\r\n    ROSE_BUSH = \"rose_bush\",\r\n    PEONY = \"peony\",\r\n    TALL_GRASS = \"tall_grass\",\r\n    LARGE_FERN = \"large_fern\",\r\n    WHITE_BANNER = \"white_banner\",\r\n    ORANGE_BANNER = \"orange_banner\",\r\n    MAGENTA_BANNER = \"magenta_banner\",\r\n    LIGHT_BLUE_BANNER = \"light_blue_banner\",\r\n    YELLOW_BANNER = \"yellow_banner\",\r\n    LIME_BANNER = \"lime_banner\",\r\n    PINK_BANNER = \"pink_banner\",\r\n    GRAY_BANNER = \"gray_banner\",\r\n    LIGHT_GRAY_BANNER = \"light_gray_banner\",\r\n    CYAN_BANNER = \"cyan_banner\",\r\n    PURPLE_BANNER = \"purple_banner\",\r\n    BLUE_BANNER = \"blue_banner\",\r\n    BROWN_BANNER = \"brown_banner\",\r\n    GREEN_BANNER = \"green_banner\",\r\n    RED_BANNER = \"red_banner\",\r\n    BLACK_BANNER = \"black_banner\",\r\n    WHITE_WALL_BANNER = \"white_wall_banner\",\r\n    ORANGE_WALL_BANNER = \"orange_wall_banner\",\r\n    MAGENTA_WALL_BANNER = \"magenta_wall_banner\",\r\n    LIGHT_BLUE_WALL_BANNER = \"light_blue_wall_banner\",\r\n    YELLOW_WALL_BANNER = \"yellow_wall_banner\",\r\n    LIME_WALL_BANNER = \"lime_wall_banner\",\r\n    PINK_WALL_BANNER = \"pink_wall_banner\",\r\n    GRAY_WALL_BANNER = \"gray_wall_banner\",\r\n    LIGHT_GRAY_WALL_BANNER = \"light_gray_wall_banner\",\r\n    CYAN_WALL_BANNER = \"cyan_wall_banner\",\r\n    PURPLE_WALL_BANNER = \"purple_wall_banner\",\r\n    BLUE_WALL_BANNER = \"blue_wall_banner\",\r\n    BROWN_WALL_BANNER = \"brown_wall_banner\",\r\n    GREEN_WALL_BANNER = \"green_wall_banner\",\r\n    RED_WALL_BANNER = \"red_wall_banner\",\r\n    BLACK_WALL_BANNER = \"black_wall_banner\",\r\n    RED_SANDSTONE = \"red_sandstone\",\r\n    CHISELED_RED_SANDSTONE = \"chiseled_red_sandstone\",\r\n    CUT_RED_SANDSTONE = \"cut_red_sandstone\",\r\n    RED_SANDSTONE_STAIRS = \"red_sandstone_stairs\",\r\n    OAK_SLAB = \"oak_slab\",\r\n    SPRUCE_SLAB = \"spruce_slab\",\r\n    BIRCH_SLAB = \"birch_slab\",\r\n    JUNGLE_SLAB = \"jungle_slab\",\r\n    ACACIA_SLAB = \"acacia_slab\",\r\n    DARK_OAK_SLAB = \"dark_oak_slab\",\r\n    STONE_SLAB = \"stone_slab\",\r\n    SMOOTH_STONE_SLAB = \"smooth_stone_slab\",\r\n    SANDSTONE_SLAB = \"sandstone_slab\",\r\n    CUT_SANDSTONE_SLAB = \"cut_sandstone_slab\",\r\n    PETRIFIED_OAK_SLAB = \"petrified_oak_slab\",\r\n    COBBLESTONE_SLAB = \"cobblestone_slab\",\r\n    BRICK_SLAB = \"brick_slab\",\r\n    STONE_BRICK_SLAB = \"stone_brick_slab\",\r\n    NETHER_BRICK_SLAB = \"nether_brick_slab\",\r\n    QUARTZ_SLAB = \"quartz_slab\",\r\n    RED_SANDSTONE_SLAB = \"red_sandstone_slab\",\r\n    CUT_RED_SANDSTONE_SLAB = \"cut_red_sandstone_slab\",\r\n    PURPUR_SLAB = \"purpur_slab\",\r\n    SMOOTH_STONE = \"smooth_stone\",\r\n    SMOOTH_SANDSTONE = \"smooth_sandstone\",\r\n    SMOOTH_QUARTZ = \"smooth_quartz\",\r\n    SMOOTH_RED_SANDSTONE = \"smooth_red_sandstone\",\r\n    SPRUCE_FENCE_GATE = \"spruce_fence_gate\",\r\n    BIRCH_FENCE_GATE = \"birch_fence_gate\",\r\n    JUNGLE_FENCE_GATE = \"jungle_fence_gate\",\r\n    ACACIA_FENCE_GATE = \"acacia_fence_gate\",\r\n    DARK_OAK_FENCE_GATE = \"dark_oak_fence_gate\",\r\n    SPRUCE_FENCE = \"spruce_fence\",\r\n    BIRCH_FENCE = \"birch_fence\",\r\n    JUNGLE_FENCE = \"jungle_fence\",\r\n    ACACIA_FENCE = \"acacia_fence\",\r\n    DARK_OAK_FENCE = \"dark_oak_fence\",\r\n    SPRUCE_DOOR = \"spruce_door\",\r\n    BIRCH_DOOR = \"birch_door\",\r\n    JUNGLE_DOOR = \"jungle_door\",\r\n    ACACIA_DOOR = \"acacia_door\",\r\n    DARK_OAK_DOOR = \"dark_oak_door\",\r\n    END_ROD = \"end_rod\",\r\n    CHORUS_PLANT = \"chorus_plant\",\r\n    CHORUS_FLOWER = \"chorus_flower\",\r\n    PURPUR_BLOCK = \"purpur_block\",\r\n    PURPUR_PILLAR = \"purpur_pillar\",\r\n    PURPUR_STAIRS = \"purpur_stairs\",\r\n    END_STONE_BRICKS = \"end_stone_bricks\",\r\n    BEETROOTS = \"beetroots\",\r\n    DIRT_PATH = \"dirt_path\",\r\n    END_GATEWAY = \"end_gateway\",\r\n    REPEATING_COMMAND_BLOCK = \"repeating_command_block\",\r\n    CHAIN_COMMAND_BLOCK = \"chain_command_block\",\r\n    FROSTED_ICE = \"frosted_ice\",\r\n    MAGMA_BLOCK = \"magma_block\",\r\n    NETHER_WART_BLOCK = \"nether_wart_block\",\r\n    RED_NETHER_BRICKS = \"red_nether_bricks\",\r\n    BONE_BLOCK = \"bone_block\",\r\n    STRUCTURE_VOID = \"structure_void\",\r\n    OBSERVER = \"observer\",\r\n    SHULKER_BOX = \"shulker_box\",\r\n    WHITE_SHULKER_BOX = \"white_shulker_box\",\r\n    ORANGE_SHULKER_BOX = \"orange_shulker_box\",\r\n    MAGENTA_SHULKER_BOX = \"magenta_shulker_box\",\r\n    LIGHT_BLUE_SHULKER_BOX = \"light_blue_shulker_box\",\r\n    YELLOW_SHULKER_BOX = \"yellow_shulker_box\",\r\n    LIME_SHULKER_BOX = \"lime_shulker_box\",\r\n    PINK_SHULKER_BOX = \"pink_shulker_box\",\r\n    GRAY_SHULKER_BOX = \"gray_shulker_box\",\r\n    LIGHT_GRAY_SHULKER_BOX = \"light_gray_shulker_box\",\r\n    CYAN_SHULKER_BOX = \"cyan_shulker_box\",\r\n    PURPLE_SHULKER_BOX = \"purple_shulker_box\",\r\n    BLUE_SHULKER_BOX = \"blue_shulker_box\",\r\n    BROWN_SHULKER_BOX = \"brown_shulker_box\",\r\n    GREEN_SHULKER_BOX = \"green_shulker_box\",\r\n    RED_SHULKER_BOX = \"red_shulker_box\",\r\n    BLACK_SHULKER_BOX = \"black_shulker_box\",\r\n    WHITE_GLAZED_TERRACOTTA = \"white_glazed_terracotta\",\r\n    ORANGE_GLAZED_TERRACOTTA = \"orange_glazed_terracotta\",\r\n    MAGENTA_GLAZED_TERRACOTTA = \"magenta_glazed_terracotta\",\r\n    LIGHT_BLUE_GLAZED_TERRACOTTA = \"light_blue_glazed_terracotta\",\r\n    YELLOW_GLAZED_TERRACOTTA = \"yellow_glazed_terracotta\",\r\n    LIME_GLAZED_TERRACOTTA = \"lime_glazed_terracotta\",\r\n    PINK_GLAZED_TERRACOTTA = \"pink_glazed_terracotta\",\r\n    GRAY_GLAZED_TERRACOTTA = \"gray_glazed_terracotta\",\r\n    LIGHT_GRAY_GLAZED_TERRACOTTA = \"light_gray_glazed_terracotta\",\r\n    CYAN_GLAZED_TERRACOTTA = \"cyan_glazed_terracotta\",\r\n    PURPLE_GLAZED_TERRACOTTA = \"purple_glazed_terracotta\",\r\n    BLUE_GLAZED_TERRACOTTA = \"blue_glazed_terracotta\",\r\n    BROWN_GLAZED_TERRACOTTA = \"brown_glazed_terracotta\",\r\n    GREEN_GLAZED_TERRACOTTA = \"green_glazed_terracotta\",\r\n    RED_GLAZED_TERRACOTTA = \"red_glazed_terracotta\",\r\n    BLACK_GLAZED_TERRACOTTA = \"black_glazed_terracotta\",\r\n    WHITE_CONCRETE = \"white_concrete\",\r\n    ORANGE_CONCRETE = \"orange_concrete\",\r\n    MAGENTA_CONCRETE = \"magenta_concrete\",\r\n    LIGHT_BLUE_CONCRETE = \"light_blue_concrete\",\r\n    YELLOW_CONCRETE = \"yellow_concrete\",\r\n    LIME_CONCRETE = \"lime_concrete\",\r\n    PINK_CONCRETE = \"pink_concrete\",\r\n    GRAY_CONCRETE = \"gray_concrete\",\r\n    LIGHT_GRAY_CONCRETE = \"light_gray_concrete\",\r\n    CYAN_CONCRETE = \"cyan_concrete\",\r\n    PURPLE_CONCRETE = \"purple_concrete\",\r\n    BLUE_CONCRETE = \"blue_concrete\",\r\n    BROWN_CONCRETE = \"brown_concrete\",\r\n    GREEN_CONCRETE = \"green_concrete\",\r\n    RED_CONCRETE = \"red_concrete\",\r\n    BLACK_CONCRETE = \"black_concrete\",\r\n    WHITE_CONCRETE_POWDER = \"white_concrete_powder\",\r\n    ORANGE_CONCRETE_POWDER = \"orange_concrete_powder\",\r\n    MAGENTA_CONCRETE_POWDER = \"magenta_concrete_powder\",\r\n    LIGHT_BLUE_CONCRETE_POWDER = \"light_blue_concrete_powder\",\r\n    YELLOW_CONCRETE_POWDER = \"yellow_concrete_powder\",\r\n    LIME_CONCRETE_POWDER = \"lime_concrete_powder\",\r\n    PINK_CONCRETE_POWDER = \"pink_concrete_powder\",\r\n    GRAY_CONCRETE_POWDER = \"gray_concrete_powder\",\r\n    LIGHT_GRAY_CONCRETE_POWDER = \"light_gray_concrete_powder\",\r\n    CYAN_CONCRETE_POWDER = \"cyan_concrete_powder\",\r\n    PURPLE_CONCRETE_POWDER = \"purple_concrete_powder\",\r\n    BLUE_CONCRETE_POWDER = \"blue_concrete_powder\",\r\n    BROWN_CONCRETE_POWDER = \"brown_concrete_powder\",\r\n    GREEN_CONCRETE_POWDER = \"green_concrete_powder\",\r\n    RED_CONCRETE_POWDER = \"red_concrete_powder\",\r\n    BLACK_CONCRETE_POWDER = \"black_concrete_powder\",\r\n    KELP = \"kelp\",\r\n    KELP_PLANT = \"kelp_plant\",\r\n    DRIED_KELP_BLOCK = \"dried_kelp_block\",\r\n    TURTLE_EGG = \"turtle_egg\",\r\n    DEAD_TUBE_CORAL_BLOCK = \"dead_tube_coral_block\",\r\n    DEAD_BRAIN_CORAL_BLOCK = \"dead_brain_coral_block\",\r\n    DEAD_BUBBLE_CORAL_BLOCK = \"dead_bubble_coral_block\",\r\n    DEAD_FIRE_CORAL_BLOCK = \"dead_fire_coral_block\",\r\n    DEAD_HORN_CORAL_BLOCK = \"dead_horn_coral_block\",\r\n    TUBE_CORAL_BLOCK = \"tube_coral_block\",\r\n    BRAIN_CORAL_BLOCK = \"brain_coral_block\",\r\n    BUBBLE_CORAL_BLOCK = \"bubble_coral_block\",\r\n    FIRE_CORAL_BLOCK = \"fire_coral_block\",\r\n    HORN_CORAL_BLOCK = \"horn_coral_block\",\r\n    DEAD_TUBE_CORAL = \"dead_tube_coral\",\r\n    DEAD_BRAIN_CORAL = \"dead_brain_coral\",\r\n    DEAD_BUBBLE_CORAL = \"dead_bubble_coral\",\r\n    DEAD_FIRE_CORAL = \"dead_fire_coral\",\r\n    DEAD_HORN_CORAL = \"dead_horn_coral\",\r\n    TUBE_CORAL = \"tube_coral\",\r\n    BRAIN_CORAL = \"brain_coral\",\r\n    BUBBLE_CORAL = \"bubble_coral\",\r\n    FIRE_CORAL = \"fire_coral\",\r\n    HORN_CORAL = \"horn_coral\",\r\n    DEAD_TUBE_CORAL_FAN = \"dead_tube_coral_fan\",\r\n    DEAD_BRAIN_CORAL_FAN = \"dead_brain_coral_fan\",\r\n    DEAD_BUBBLE_CORAL_FAN = \"dead_bubble_coral_fan\",\r\n    DEAD_FIRE_CORAL_FAN = \"dead_fire_coral_fan\",\r\n    DEAD_HORN_CORAL_FAN = \"dead_horn_coral_fan\",\r\n    TUBE_CORAL_FAN = \"tube_coral_fan\",\r\n    BRAIN_CORAL_FAN = \"brain_coral_fan\",\r\n    BUBBLE_CORAL_FAN = \"bubble_coral_fan\",\r\n    FIRE_CORAL_FAN = \"fire_coral_fan\",\r\n    HORN_CORAL_FAN = \"horn_coral_fan\",\r\n    DEAD_TUBE_CORAL_WALL_FAN = \"dead_tube_coral_wall_fan\",\r\n    DEAD_BRAIN_CORAL_WALL_FAN = \"dead_brain_coral_wall_fan\",\r\n    DEAD_BUBBLE_CORAL_WALL_FAN = \"dead_bubble_coral_wall_fan\",\r\n    DEAD_FIRE_CORAL_WALL_FAN = \"dead_fire_coral_wall_fan\",\r\n    DEAD_HORN_CORAL_WALL_FAN = \"dead_horn_coral_wall_fan\",\r\n    TUBE_CORAL_WALL_FAN = \"tube_coral_wall_fan\",\r\n    BRAIN_CORAL_WALL_FAN = \"brain_coral_wall_fan\",\r\n    BUBBLE_CORAL_WALL_FAN = \"bubble_coral_wall_fan\",\r\n    FIRE_CORAL_WALL_FAN = \"fire_coral_wall_fan\",\r\n    HORN_CORAL_WALL_FAN = \"horn_coral_wall_fan\",\r\n    SEA_PICKLE = \"sea_pickle\",\r\n    BLUE_ICE = \"blue_ice\",\r\n    CONDUIT = \"conduit\",\r\n    BAMBOO_SAPLING = \"bamboo_sapling\",\r\n    BAMBOO = \"bamboo\",\r\n    POTTED_BAMBOO = \"potted_bamboo\",\r\n    VOID_AIR = \"void_air\",\r\n    CAVE_AIR = \"cave_air\",\r\n    BUBBLE_COLUMN = \"bubble_column\",\r\n    POLISHED_GRANITE_STAIRS = \"polished_granite_stairs\",\r\n    SMOOTH_RED_SANDSTONE_STAIRS = \"smooth_red_sandstone_stairs\",\r\n    MOSSY_STONE_BRICK_STAIRS = \"mossy_stone_brick_stairs\",\r\n    POLISHED_DIORITE_STAIRS = \"polished_diorite_stairs\",\r\n    MOSSY_COBBLESTONE_STAIRS = \"mossy_cobblestone_stairs\",\r\n    END_STONE_BRICK_STAIRS = \"end_stone_brick_stairs\",\r\n    STONE_STAIRS = \"stone_stairs\",\r\n    SMOOTH_SANDSTONE_STAIRS = \"smooth_sandstone_stairs\",\r\n    SMOOTH_QUARTZ_STAIRS = \"smooth_quartz_stairs\",\r\n    GRANITE_STAIRS = \"granite_stairs\",\r\n    ANDESITE_STAIRS = \"andesite_stairs\",\r\n    RED_NETHER_BRICK_STAIRS = \"red_nether_brick_stairs\",\r\n    POLISHED_ANDESITE_STAIRS = \"polished_andesite_stairs\",\r\n    DIORITE_STAIRS = \"diorite_stairs\",\r\n    POLISHED_GRANITE_SLAB = \"polished_granite_slab\",\r\n    SMOOTH_RED_SANDSTONE_SLAB = \"smooth_red_sandstone_slab\",\r\n    MOSSY_STONE_BRICK_SLAB = \"mossy_stone_brick_slab\",\r\n    POLISHED_DIORITE_SLAB = \"polished_diorite_slab\",\r\n    MOSSY_COBBLESTONE_SLAB = \"mossy_cobblestone_slab\",\r\n    END_STONE_BRICK_SLAB = \"end_stone_brick_slab\",\r\n    SMOOTH_SANDSTONE_SLAB = \"smooth_sandstone_slab\",\r\n    SMOOTH_QUARTZ_SLAB = \"smooth_quartz_slab\",\r\n    GRANITE_SLAB = \"granite_slab\",\r\n    ANDESITE_SLAB = \"andesite_slab\",\r\n    RED_NETHER_BRICK_SLAB = \"red_nether_brick_slab\",\r\n    POLISHED_ANDESITE_SLAB = \"polished_andesite_slab\",\r\n    DIORITE_SLAB = \"diorite_slab\",\r\n    BRICK_WALL = \"brick_wall\",\r\n    PRISMARINE_WALL = \"prismarine_wall\",\r\n    RED_SANDSTONE_WALL = \"red_sandstone_wall\",\r\n    MOSSY_STONE_BRICK_WALL = \"mossy_stone_brick_wall\",\r\n    GRANITE_WALL = \"granite_wall\",\r\n    STONE_BRICK_WALL = \"stone_brick_wall\",\r\n    NETHER_BRICK_WALL = \"nether_brick_wall\",\r\n    ANDESITE_WALL = \"andesite_wall\",\r\n    RED_NETHER_BRICK_WALL = \"red_nether_brick_wall\",\r\n    SANDSTONE_WALL = \"sandstone_wall\",\r\n    END_STONE_BRICK_WALL = \"end_stone_brick_wall\",\r\n    DIORITE_WALL = \"diorite_wall\",\r\n    SCAFFOLDING = \"scaffolding\",\r\n    LOOM = \"loom\",\r\n    BARREL = \"barrel\",\r\n    SMOKER = \"smoker\",\r\n    BLAST_FURNACE = \"blast_furnace\",\r\n    CARTOGRAPHY_TABLE = \"cartography_table\",\r\n    FLETCHING_TABLE = \"fletching_table\",\r\n    GRINDSTONE = \"grindstone\",\r\n    LECTERN = \"lectern\",\r\n    SMITHING_TABLE = \"smithing_table\",\r\n    STONECUTTER = \"stonecutter\",\r\n    BELL = \"bell\",\r\n    LANTERN = \"lantern\",\r\n    SOUL_LANTERN = \"soul_lantern\",\r\n    CAMPFIRE = \"campfire\",\r\n    SOUL_CAMPFIRE = \"soul_campfire\",\r\n    SWEET_BERRY_BUSH = \"sweet_berry_bush\",\r\n    WARPED_STEM = \"warped_stem\",\r\n    STRIPPED_WARPED_STEM = \"stripped_warped_stem\",\r\n    WARPED_HYPHAE = \"warped_hyphae\",\r\n    STRIPPED_WARPED_HYPHAE = \"stripped_warped_hyphae\",\r\n    WARPED_NYLIUM = \"warped_nylium\",\r\n    WARPED_FUNGUS = \"warped_fungus\",\r\n    WARPED_WART_BLOCK = \"warped_wart_block\",\r\n    WARPED_ROOTS = \"warped_roots\",\r\n    NETHER_SPROUTS = \"nether_sprouts\",\r\n    CRIMSON_STEM = \"crimson_stem\",\r\n    STRIPPED_CRIMSON_STEM = \"stripped_crimson_stem\",\r\n    CRIMSON_HYPHAE = \"crimson_hyphae\",\r\n    STRIPPED_CRIMSON_HYPHAE = \"stripped_crimson_hyphae\",\r\n    CRIMSON_NYLIUM = \"crimson_nylium\",\r\n    CRIMSON_FUNGUS = \"crimson_fungus\",\r\n    SHROOMLIGHT = \"shroomlight\",\r\n    WEEPING_VINES = \"weeping_vines\",\r\n    WEEPING_VINES_PLANT = \"weeping_vines_plant\",\r\n    TWISTING_VINES = \"twisting_vines\",\r\n    TWISTING_VINES_PLANT = \"twisting_vines_plant\",\r\n    CRIMSON_ROOTS = \"crimson_roots\",\r\n    CRIMSON_PLANKS = \"crimson_planks\",\r\n    WARPED_PLANKS = \"warped_planks\",\r\n    CRIMSON_SLAB = \"crimson_slab\",\r\n    WARPED_SLAB = \"warped_slab\",\r\n    CRIMSON_PRESSURE_PLATE = \"crimson_pressure_plate\",\r\n    WARPED_PRESSURE_PLATE = \"warped_pressure_plate\",\r\n    CRIMSON_FENCE = \"crimson_fence\",\r\n    WARPED_FENCE = \"warped_fence\",\r\n    CRIMSON_TRAPDOOR = \"crimson_trapdoor\",\r\n    WARPED_TRAPDOOR = \"warped_trapdoor\",\r\n    CRIMSON_FENCE_GATE = \"crimson_fence_gate\",\r\n    WARPED_FENCE_GATE = \"warped_fence_gate\",\r\n    CRIMSON_STAIRS = \"crimson_stairs\",\r\n    WARPED_STAIRS = \"warped_stairs\",\r\n    CRIMSON_BUTTON = \"crimson_button\",\r\n    WARPED_BUTTON = \"warped_button\",\r\n    CRIMSON_DOOR = \"crimson_door\",\r\n    WARPED_DOOR = \"warped_door\",\r\n    CRIMSON_SIGN = \"crimson_sign\",\r\n    WARPED_SIGN = \"warped_sign\",\r\n    CRIMSON_WALL_SIGN = \"crimson_wall_sign\",\r\n    WARPED_WALL_SIGN = \"warped_wall_sign\",\r\n    STRUCTURE_BLOCK = \"structure_block\",\r\n    JIGSAW = \"jigsaw\",\r\n    COMPOSTER = \"composter\",\r\n    TARGET = \"target\",\r\n    BEE_NEST = \"bee_nest\",\r\n    BEEHIVE = \"beehive\",\r\n    HONEY_BLOCK = \"honey_block\",\r\n    HONEYCOMB_BLOCK = \"honeycomb_block\",\r\n    NETHERITE_BLOCK = \"netherite_block\",\r\n    ANCIENT_DEBRIS = \"ancient_debris\",\r\n    CRYING_OBSIDIAN = \"crying_obsidian\",\r\n    RESPAWN_ANCHOR = \"respawn_anchor\",\r\n    POTTED_CRIMSON_FUNGUS = \"potted_crimson_fungus\",\r\n    POTTED_WARPED_FUNGUS = \"potted_warped_fungus\",\r\n    POTTED_CRIMSON_ROOTS = \"potted_crimson_roots\",\r\n    POTTED_WARPED_ROOTS = \"potted_warped_roots\",\r\n    LODESTONE = \"lodestone\",\r\n    BLACKSTONE = \"blackstone\",\r\n    BLACKSTONE_STAIRS = \"blackstone_stairs\",\r\n    BLACKSTONE_WALL = \"blackstone_wall\",\r\n    BLACKSTONE_SLAB = \"blackstone_slab\",\r\n    POLISHED_BLACKSTONE = \"polished_blackstone\",\r\n    POLISHED_BLACKSTONE_BRICKS = \"polished_blackstone_bricks\",\r\n    CRACKED_POLISHED_BLACKSTONE_BRICKS = \"cracked_polished_blackstone_bricks\",\r\n    CHISELED_POLISHED_BLACKSTONE = \"chiseled_polished_blackstone\",\r\n    POLISHED_BLACKSTONE_BRICK_SLAB = \"polished_blackstone_brick_slab\",\r\n    POLISHED_BLACKSTONE_BRICK_STAIRS = \"polished_blackstone_brick_stairs\",\r\n    POLISHED_BLACKSTONE_BRICK_WALL = \"polished_blackstone_brick_wall\",\r\n    GILDED_BLACKSTONE = \"gilded_blackstone\",\r\n    POLISHED_BLACKSTONE_STAIRS = \"polished_blackstone_stairs\",\r\n    POLISHED_BLACKSTONE_SLAB = \"polished_blackstone_slab\",\r\n    POLISHED_BLACKSTONE_PRESSURE_PLATE = \"polished_blackstone_pressure_plate\",\r\n    POLISHED_BLACKSTONE_BUTTON = \"polished_blackstone_button\",\r\n    POLISHED_BLACKSTONE_WALL = \"polished_blackstone_wall\",\r\n    CHISELED_NETHER_BRICKS = \"chiseled_nether_bricks\",\r\n    CRACKED_NETHER_BRICKS = \"cracked_nether_bricks\",\r\n    QUARTZ_BRICKS = \"quartz_bricks\",\r\n    CANDLE = \"candle\",\r\n    WHITE_CANDLE = \"white_candle\",\r\n    ORANGE_CANDLE = \"orange_candle\",\r\n    MAGENTA_CANDLE = \"magenta_candle\",\r\n    LIGHT_BLUE_CANDLE = \"light_blue_candle\",\r\n    YELLOW_CANDLE = \"yellow_candle\",\r\n    LIME_CANDLE = \"lime_candle\",\r\n    PINK_CANDLE = \"pink_candle\",\r\n    GRAY_CANDLE = \"gray_candle\",\r\n    LIGHT_GRAY_CANDLE = \"light_gray_candle\",\r\n    CYAN_CANDLE = \"cyan_candle\",\r\n    PURPLE_CANDLE = \"purple_candle\",\r\n    BLUE_CANDLE = \"blue_candle\",\r\n    BROWN_CANDLE = \"brown_candle\",\r\n    GREEN_CANDLE = \"green_candle\",\r\n    RED_CANDLE = \"red_candle\",\r\n    BLACK_CANDLE = \"black_candle\",\r\n    CANDLE_CAKE = \"candle_cake\",\r\n    WHITE_CANDLE_CAKE = \"white_candle_cake\",\r\n    ORANGE_CANDLE_CAKE = \"orange_candle_cake\",\r\n    MAGENTA_CANDLE_CAKE = \"magenta_candle_cake\",\r\n    LIGHT_BLUE_CANDLE_CAKE = \"light_blue_candle_cake\",\r\n    YELLOW_CANDLE_CAKE = \"yellow_candle_cake\",\r\n    LIME_CANDLE_CAKE = \"lime_candle_cake\",\r\n    PINK_CANDLE_CAKE = \"pink_candle_cake\",\r\n    GRAY_CANDLE_CAKE = \"gray_candle_cake\",\r\n    LIGHT_GRAY_CANDLE_CAKE = \"light_gray_candle_cake\",\r\n    CYAN_CANDLE_CAKE = \"cyan_candle_cake\",\r\n    PURPLE_CANDLE_CAKE = \"purple_candle_cake\",\r\n    BLUE_CANDLE_CAKE = \"blue_candle_cake\",\r\n    BROWN_CANDLE_CAKE = \"brown_candle_cake\",\r\n    GREEN_CANDLE_CAKE = \"green_candle_cake\",\r\n    RED_CANDLE_CAKE = \"red_candle_cake\",\r\n    BLACK_CANDLE_CAKE = \"black_candle_cake\",\r\n    AMETHYST_BLOCK = \"amethyst_block\",\r\n    BUDDING_AMETHYST = \"budding_amethyst\",\r\n    AMETHYST_CLUSTER = \"amethyst_cluster\",\r\n    LARGE_AMETHYST_BUD = \"large_amethyst_bud\",\r\n    MEDIUM_AMETHYST_BUD = \"medium_amethyst_bud\",\r\n    SMALL_AMETHYST_BUD = \"small_amethyst_bud\",\r\n    TUFF = \"tuff\",\r\n    CALCITE = \"calcite\",\r\n    TINTED_GLASS = \"tinted_glass\",\r\n    POWDER_SNOW = \"powder_snow\",\r\n    SCULK_SENSOR = \"sculk_sensor\",\r\n    OXIDIZED_COPPER = \"oxidized_copper\",\r\n    WEATHERED_COPPER = \"weathered_copper\",\r\n    EXPOSED_COPPER = \"exposed_copper\",\r\n    COPPER_BLOCK = \"copper_block\",\r\n    COPPER_ORE = \"copper_ore\",\r\n    DEEPSLATE_COPPER_ORE = \"deepslate_copper_ore\",\r\n    OXIDIZED_CUT_COPPER = \"oxidized_cut_copper\",\r\n    WEATHERED_CUT_COPPER = \"weathered_cut_copper\",\r\n    EXPOSED_CUT_COPPER = \"exposed_cut_copper\",\r\n    CUT_COPPER = \"cut_copper\",\r\n    OXIDIZED_CUT_COPPER_STAIRS = \"oxidized_cut_copper_stairs\",\r\n    WEATHERED_CUT_COPPER_STAIRS = \"weathered_cut_copper_stairs\",\r\n    EXPOSED_CUT_COPPER_STAIRS = \"exposed_cut_copper_stairs\",\r\n    CUT_COPPER_STAIRS = \"cut_copper_stairs\",\r\n    OXIDIZED_CUT_COPPER_SLAB = \"oxidized_cut_copper_slab\",\r\n    WEATHERED_CUT_COPPER_SLAB = \"weathered_cut_copper_slab\",\r\n    EXPOSED_CUT_COPPER_SLAB = \"exposed_cut_copper_slab\",\r\n    CUT_COPPER_SLAB = \"cut_copper_slab\",\r\n    WAXED_COPPER_BLOCK = \"waxed_copper_block\",\r\n    WAXED_WEATHERED_COPPER = \"waxed_weathered_copper\",\r\n    WAXED_EXPOSED_COPPER = \"waxed_exposed_copper\",\r\n    WAXED_OXIDIZED_COPPER = \"waxed_oxidized_copper\",\r\n    WAXED_OXIDIZED_CUT_COPPER = \"waxed_oxidized_cut_copper\",\r\n    WAXED_WEATHERED_CUT_COPPER = \"waxed_weathered_cut_copper\",\r\n    WAXED_EXPOSED_CUT_COPPER = \"waxed_exposed_cut_copper\",\r\n    WAXED_CUT_COPPER = \"waxed_cut_copper\",\r\n    WAXED_OXIDIZED_CUT_COPPER_STAIRS = \"waxed_oxidized_cut_copper_stairs\",\r\n    WAXED_WEATHERED_CUT_COPPER_STAIRS = \"waxed_weathered_cut_copper_stairs\",\r\n    WAXED_EXPOSED_CUT_COPPER_STAIRS = \"waxed_exposed_cut_copper_stairs\",\r\n    WAXED_CUT_COPPER_STAIRS = \"waxed_cut_copper_stairs\",\r\n    WAXED_OXIDIZED_CUT_COPPER_SLAB = \"waxed_oxidized_cut_copper_slab\",\r\n    WAXED_WEATHERED_CUT_COPPER_SLAB = \"waxed_weathered_cut_copper_slab\",\r\n    WAXED_EXPOSED_CUT_COPPER_SLAB = \"waxed_exposed_cut_copper_slab\",\r\n    WAXED_CUT_COPPER_SLAB = \"waxed_cut_copper_slab\",\r\n    LIGHTNING_ROD = \"lightning_rod\",\r\n    POINTED_DRIPSTONE = \"pointed_dripstone\",\r\n    DRIPSTONE_BLOCK = \"dripstone_block\",\r\n    CAVE_VINES = \"cave_vines\",\r\n    CAVE_VINES_PLANT = \"cave_vines_plant\",\r\n    SPORE_BLOSSOM = \"spore_blossom\",\r\n    AZALEA = \"azalea\",\r\n    FLOWERING_AZALEA = \"flowering_azalea\",\r\n    MOSS_CARPET = \"moss_carpet\",\r\n    MOSS_BLOCK = \"moss_block\",\r\n    BIG_DRIPLEAF = \"big_dripleaf\",\r\n    BIG_DRIPLEAF_STEM = \"big_dripleaf_stem\",\r\n    SMALL_DRIPLEAF = \"small_dripleaf\",\r\n    HANGING_ROOTS = \"hanging_roots\",\r\n    ROOTED_DIRT = \"rooted_dirt\",\r\n    DEEPSLATE = \"deepslate\",\r\n    COBBLED_DEEPSLATE = \"cobbled_deepslate\",\r\n    COBBLED_DEEPSLATE_STAIRS = \"cobbled_deepslate_stairs\",\r\n    COBBLED_DEEPSLATE_SLAB = \"cobbled_deepslate_slab\",\r\n    COBBLED_DEEPSLATE_WALL = \"cobbled_deepslate_wall\",\r\n    POLISHED_DEEPSLATE = \"polished_deepslate\",\r\n    POLISHED_DEEPSLATE_STAIRS = \"polished_deepslate_stairs\",\r\n    POLISHED_DEEPSLATE_SLAB = \"polished_deepslate_slab\",\r\n    POLISHED_DEEPSLATE_WALL = \"polished_deepslate_wall\",\r\n    DEEPSLATE_TILES = \"deepslate_tiles\",\r\n    DEEPSLATE_TILE_STAIRS = \"deepslate_tile_stairs\",\r\n    DEEPSLATE_TILE_SLAB = \"deepslate_tile_slab\",\r\n    DEEPSLATE_TILE_WALL = \"deepslate_tile_wall\",\r\n    DEEPSLATE_BRICKS = \"deepslate_bricks\",\r\n    DEEPSLATE_BRICK_STAIRS = \"deepslate_brick_stairs\",\r\n    DEEPSLATE_BRICK_SLAB = \"deepslate_brick_slab\",\r\n    DEEPSLATE_BRICK_WALL = \"deepslate_brick_wall\",\r\n    CHISELED_DEEPSLATE = \"chiseled_deepslate\",\r\n    CRACKED_DEEPSLATE_BRICKS = \"cracked_deepslate_bricks\",\r\n    CRACKED_DEEPSLATE_TILES = \"cracked_deepslate_tiles\",\r\n    INFESTED_DEEPSLATE = \"infested_deepslate\",\r\n    SMOOTH_BASALT = \"smooth_basalt\",\r\n    RAW_IRON_BLOCK = \"raw_iron_block\",\r\n    RAW_COPPER_BLOCK = \"raw_copper_block\",\r\n    RAW_GOLD_BLOCK = \"raw_gold_block\",\r\n    POTTED_AZALEA = \"potted_azalea_bush\",\r\n    POTTED_FLOWERING_AZALEA = \"potted_flowering_azalea_bush\",\r\n}\r\n","export function unsignedShift64(num: bigint, shift: bigint) {\r\n    return BigInt.asUintN(64, num) >> shift\r\n}\r\n\r\nexport function clamp64(num: bigint): bigint {\r\n    return BigInt.asIntN(64, num)\r\n}\r\n\r\nexport function rotateLeft64(n: bigint, bits: bigint) {\r\n    const b = BigInt.asUintN(64, n)\r\n\r\n    const shifted = b << bits\r\n\r\n    const lo = BigInt.asUintN(64, shifted >> 64n)\r\n    const hi = BigInt.asUintN(64, shifted)\r\n\r\n    return lo | hi\r\n}\r\n\r\nexport function clamp(value: number, min: number, max: number): number {\r\n    if (value < min) {\r\n        return min\r\n    } else {\r\n        return value > max ? max : value\r\n    }\r\n}\r\n\r\nexport function toUnsignedLong(n: number): bigint {\r\n    return BigInt.asUintN(64, BigInt(n)) & 0xffffffffn\r\n}\r\n\r\nexport function toUnsignedInt(n: number): bigint {\r\n    return BigInt.asUintN(32, BigInt(n))\r\n}\r\n\r\nexport function toLong(n: number): bigint {\r\n    return BigInt(n)\r\n}\r\n\r\nexport function toInt(n: bigint): number {\r\n    return Number(BigInt.asIntN(32, n))\r\n}\r\n\r\nexport function remainderUnsigned32(divident: number, divisor: number): number {\r\n    const result = toUnsignedInt(divident) % toUnsignedInt(divisor)\r\n\r\n    return toInt(result)\r\n}\r\n\r\nexport function fromBytes64(\r\n    b1: number,\r\n    b2: number,\r\n    b3: number,\r\n    b4: number,\r\n    b5: number,\r\n    b6: number,\r\n    b7: number,\r\n    b8: number\r\n) {\r\n    return clamp64(\r\n        (BigInt(b1) << 56n) |\r\n            (BigInt(b2) << 48n) |\r\n            (BigInt(b3) << 40n) |\r\n            (BigInt(b4) << 32n) |\r\n            (BigInt(b5) << 24n) |\r\n            (BigInt(b6) << 16n) |\r\n            (BigInt(b7) << 8n) |\r\n            BigInt(b8)\r\n    )\r\n}\r\n\r\nexport function binarySearch(\r\n    startIndex: number,\r\n    endIndex: number,\r\n    predicate: (index: number) => boolean\r\n): number {\r\n    let i = endIndex - startIndex\r\n\r\n    while (i > 0) {\r\n        const j = Math.trunc(i / 2)\r\n        const k = startIndex + j\r\n        if (predicate(k)) {\r\n            i = j\r\n        } else {\r\n            startIndex = k + 1\r\n            i -= j + 1\r\n        }\r\n    }\r\n\r\n    return startIndex\r\n}\r\n\r\nexport function lerp(t: number, v0: number, v1: number): number {\r\n    return v0 + t * (v1 - v0)\r\n}\r\n\r\nexport function lerp2(\r\n    xt: number,\r\n    yt: number,\r\n    x0: number,\r\n    x1: number,\r\n    y0: number,\r\n    y1: number\r\n): number {\r\n    return lerp(yt, lerp(xt, x0, x1), lerp(xt, y0, y1))\r\n}\r\n\r\nexport function lerp3(\r\n    xt: number,\r\n    yt: number,\r\n    zt: number,\r\n    x0: number,\r\n    x1: number,\r\n    y0: number,\r\n    y1: number,\r\n    x2: number,\r\n    x3: number,\r\n    y2: number,\r\n    y3: number\r\n): number {\r\n    return lerp(zt, lerp2(xt, yt, x0, x1, y0, y1), lerp2(xt, yt, x2, x3, y2, y3))\r\n}\r\n\r\nexport function smoothstep(v: number): number {\r\n    return v * v * v * (v * (v * 6.0 - 15.0) + 10.0)\r\n}\r\n\r\nexport function smoothstepDerivative(v: number): number {\r\n    return 30.0 * v * v * (v - 1.0) * (v - 1.0)\r\n}\r\n\r\nexport function square(num: number): number {\r\n    return num * num\r\n}\r\n\r\nexport function getSeed(p_14131_: number, p_14132_: number, p_14133_: number): bigint {\r\n    let i =\r\n        toLong(toInt(toLong(p_14131_) * 3129871n)) ^\r\n        clamp64(toLong(p_14133_) * 116129781n) ^\r\n        toLong(p_14132_)\r\n    i = clamp64(i * i * 42317861n + i * 11n)\r\n    return i >> 16n\r\n}\r\n\r\nexport function floor(num: number): number {\r\n    return Math.floor(num)\r\n}\r\n\r\nexport function lfloor(num: number): number {\r\n    return Math.floor(num)\r\n}\r\n\r\nexport function floorDiv(x: number, y: number): number {\r\n    return Math.floor(x / y)\r\n}\r\n\r\nexport function intFloorDiv(x: number, y: number): number {\r\n    return Math.floor(x / y)\r\n}\r\n\r\nexport function clampedLerp(v0: number, v1: number, t: number): number {\r\n    if (t < 0.0) {\r\n        return v0\r\n    } else {\r\n        return t > 1.0 ? v1 : lerp(t, v0, v1)\r\n    }\r\n}\r\n\r\nexport function frac(num: number): number {\r\n    return num - lfloor(num)\r\n}\r\n\r\nexport function smallestEncompassingPowerOfTwo(num: number): number {\r\n    let result = num - 1\r\n    result |= result >> 1\r\n    result |= result >> 2\r\n    result |= result >> 4\r\n    result |= result >> 8\r\n    result |= result >> 16\r\n    return result + 1\r\n}\r\n\r\nconst MULTIPLY_DE_BRUIJN_BIT_POSITION = [\r\n    0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12,\r\n    18, 6, 11, 5, 10, 9,\r\n]\r\n\r\nexport function isPowerOfTwo(num: number): boolean {\r\n    return num != 0 && (num & (num - 1)) == 0\r\n}\r\n\r\nexport function ceillog2(num: number): number {\r\n    num = isPowerOfTwo(num) ? num : smallestEncompassingPowerOfTwo(num)\r\n    return MULTIPLY_DE_BRUIJN_BIT_POSITION[toInt((toLong(num) * 125613361n) >> 27n) & 31]\r\n}\r\n\r\nexport function log2(num: number): number {\r\n    return ceillog2(num) - (isPowerOfTwo(num) ? 0 : 1)\r\n}\r\n\r\nexport function inverseLerp(v: number, v0: number, v1: number): number {\r\n    return (v - v0) / (v1 - v0)\r\n}\r\n\r\nexport function clampedMap(v: number, v0: number, v1: number, mv0: number, mv1: number): number {\r\n    return clampedLerp(mv0, mv1, inverseLerp(v, v0, v1))\r\n}\r\n\r\nexport function map(v: number, v0: number, v1: number, mv0: number, mv1: number): number {\r\n    return lerp(inverseLerp(v, v0, v1), mv0, mv1)\r\n}\r\n\r\nexport function quantize(value: number, quantizer: number): number {\r\n    return floor(value / quantizer) * quantizer\r\n}\r\n\r\nexport function computeIfAbsent<K, T>(map: Map<K, T>, key: K, mappingFunction: (key: K) => T): T {\r\n    let value = map.get(key)\r\n    if (value === undefined) {\r\n        value = mappingFunction(key)\r\n        map.set(key, value)\r\n    }\r\n    return value\r\n}\r\n\r\nexport function floorMod(x: bigint, y: number): number {\r\n    const y_long = toLong(y)\r\n\r\n    let mod = x % y_long\r\n    // if the signs are different and modulo not zero, adjust result\r\n    if ((x ^ y_long) < 0 && mod != 0n) {\r\n        mod += y_long\r\n    }\r\n    return toInt(mod)\r\n}\r\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n","import * as Mth from \"./mth\"\r\nimport {\r\n    unsignedShift64,\r\n    clamp64,\r\n    rotateLeft64,\r\n    toUnsignedLong,\r\n    toLong,\r\n    toInt,\r\n    remainderUnsigned32,\r\n    fromBytes64,\r\n} from \"./mth\"\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nimport md5 from \"md5\"\r\n\r\nexport function toResourceLocation(path: string): string {\r\n    const namespace = \"minecraft\"\r\n\r\n    return namespace + \":\" + path\r\n}\r\n\r\nexport abstract class PositionalRandomFactory {\r\n    abstract fromHashOf(s: string): RandomSource\r\n    abstract at(x: number, y: number, z: number): RandomSource\r\n}\r\n\r\n// abstract\r\n\r\nexport abstract class RandomSource {\r\n    abstract fork(): RandomSource\r\n    abstract forkPositional(): PositionalRandomFactory\r\n\r\n    abstract setSeed(seed: bigint): void\r\n\r\n    abstract nextInt(bound?: number): number\r\n    abstract nextLong(): bigint\r\n    abstract nextBoolean(): boolean\r\n    abstract nextFloat(): number\r\n    abstract nextDouble(): number\r\n    abstract nextGaussian(): number\r\n}\r\n\r\nexport class Seed128bit {\r\n    constructor(readonly seedLo: bigint, readonly seedHi: bigint) {}\r\n}\r\n\r\nexport class RandomSupport {\r\n    public static readonly GOLDEN_RATIO_64 = -7046029254386353131n\r\n    public static readonly SILVER_RATIO_64 = 7640891576956012809n\r\n    private static SEED_UNIQUIFIER = 8682522807148012n\r\n\r\n    public static mixStafford13(seed: bigint): bigint {\r\n        seed = clamp64((seed ^ unsignedShift64(seed, 30n)) * -4658895280553007687n)\r\n        seed = clamp64((seed ^ unsignedShift64(seed, 27n)) * -7723592293110705685n)\r\n        return clamp64(seed ^ unsignedShift64(seed, 31n))\r\n    }\r\n\r\n    public static upgradeSeedTo128bit(seed: bigint): Seed128bit {\r\n        const lo = seed ^ RandomSupport.SILVER_RATIO_64\r\n        const hi = clamp64(lo + RandomSupport.GOLDEN_RATIO_64)\r\n        return new Seed128bit(RandomSupport.mixStafford13(lo), RandomSupport.mixStafford13(hi))\r\n    }\r\n\r\n    public static seedUniquifier(): bigint {\r\n        RandomSupport.SEED_UNIQUIFIER = clamp64(\r\n            RandomSupport.SEED_UNIQUIFIER * 1181783497276652981n\r\n        )\r\n\r\n        return RandomSupport.SEED_UNIQUIFIER ^ (BigInt(performance.now()) * 1000000n)\r\n    }\r\n\r\n    public static nextIntBetweenInclusive(\r\n        randomSource: RandomSource,\r\n        min: number,\r\n        max: number\r\n    ): number {\r\n        return randomSource.nextInt(max - min + 1) + min\r\n    }\r\n\r\n    public static consumeCount(randomSource: RandomSource, count: number): void {\r\n        for (let i = 0; i < count; ++i) {\r\n            randomSource.nextInt()\r\n        }\r\n    }\r\n}\r\n\r\n// implementations\r\n\r\nexport class Xoroshiro128PlusPlus {\r\n    private seedLo: bigint\r\n    private seedHi: bigint\r\n\r\n    constructor(lo: bigint | Seed128bit, hi?: bigint) {\r\n        if (lo instanceof Seed128bit) {\r\n            hi = lo.seedHi\r\n            lo = lo.seedLo\r\n        }\r\n\r\n        if (hi === undefined) {\r\n            throw new Error()\r\n        }\r\n\r\n        this.seedLo = lo\r\n        this.seedHi = hi\r\n\r\n        if ((this.seedLo | this.seedHi) == 0n) {\r\n            this.seedLo = RandomSupport.GOLDEN_RATIO_64\r\n            this.seedHi = RandomSupport.SILVER_RATIO_64\r\n        }\r\n    }\r\n\r\n    public nextLong(): bigint {\r\n        const i = this.seedLo\r\n        let j = this.seedHi\r\n        const k = clamp64(rotateLeft64(clamp64(i + j), 17n) + i)\r\n        j ^= i\r\n        this.seedLo = rotateLeft64(i, 49n) ^ j ^ clamp64(j << 21n)\r\n        this.seedHi = rotateLeft64(j, 28n)\r\n        return k\r\n    }\r\n}\r\n\r\nexport class MarsagliaPolarGaussian {\r\n    private nextNextGaussian: number\r\n    private haveNextNextGaussian: boolean\r\n\r\n    constructor(readonly randomSource: RandomSource) {}\r\n\r\n    public reset(): void {\r\n        this.haveNextNextGaussian = false\r\n    }\r\n\r\n    public nextGaussian(): number {\r\n        if (this.haveNextNextGaussian) {\r\n            this.haveNextNextGaussian = false\r\n            return this.nextNextGaussian\r\n        } else {\r\n            // eslint-disable-next-line no-constant-condition\r\n            while (true) {\r\n                const d0 = 2.0 * this.randomSource.nextDouble() - 1.0\r\n                const d1 = 2.0 * this.randomSource.nextDouble() - 1.0\r\n                const d2 = Mth.square(d0) + Mth.square(d1)\r\n                if (!(d2 >= 1.0)) {\r\n                    if (d2 != 0.0) {\r\n                        const d3 = Math.sqrt((-2.0 * Math.log(d2)) / d2)\r\n                        this.nextNextGaussian = d1 * d3\r\n                        this.haveNextNextGaussian = true\r\n                        return d0 * d3\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// source implementations\r\n\r\nexport class XoroshiroRandomSource implements RandomSource {\r\n    private static readonly FLOAT_UNIT = 5.9604645e-8\r\n    private static readonly DOUBLE_UNIT = 1.1102230246251565e-16\r\n    private randomNumberGenerator: Xoroshiro128PlusPlus\r\n    private readonly gaussianSource = new MarsagliaPolarGaussian(this)\r\n\r\n    constructor(lo: bigint, hi?: bigint) {\r\n        if (hi === undefined) {\r\n            this.randomNumberGenerator = new Xoroshiro128PlusPlus(\r\n                RandomSupport.upgradeSeedTo128bit(lo)\r\n            )\r\n        } else {\r\n            this.randomNumberGenerator = new Xoroshiro128PlusPlus(lo, hi)\r\n        }\r\n    }\r\n\r\n    public fork(): RandomSource {\r\n        return new XoroshiroRandomSource(\r\n            this.randomNumberGenerator.nextLong(),\r\n            this.randomNumberGenerator.nextLong()\r\n        )\r\n    }\r\n\r\n    public forkPositional(): PositionalRandomFactory {\r\n        return new XoroshiroPositionalRandomFactory(\r\n            this.randomNumberGenerator.nextLong(),\r\n            this.randomNumberGenerator.nextLong()\r\n        )\r\n    }\r\n\r\n    public setSeed(seed: bigint): void {\r\n        this.randomNumberGenerator = new Xoroshiro128PlusPlus(\r\n            RandomSupport.upgradeSeedTo128bit(seed)\r\n        )\r\n        this.gaussianSource.reset()\r\n    }\r\n\r\n    public nextInt(bound?: number): number {\r\n        if (bound !== undefined) {\r\n            let i = toUnsignedLong(this.nextInt())\r\n            let j = clamp64(i * toLong(bound))\r\n            let k = j & 4294967295n\r\n            if (k < toLong(bound)) {\r\n                for (\r\n                    let l = remainderUnsigned32(~bound + 1, bound);\r\n                    k < toLong(l);\r\n                    k = j & 4294967295n\r\n                ) {\r\n                    i = toUnsignedLong(this.nextInt())\r\n                    j = i * toLong(bound)\r\n                }\r\n            }\r\n\r\n            const i1 = j >> 32n\r\n            return toInt(i1)\r\n        } else {\r\n            return Number(BigInt.asIntN(32, this.randomNumberGenerator.nextLong()))\r\n        }\r\n    }\r\n\r\n    public nextLong(): bigint {\r\n        return this.randomNumberGenerator.nextLong()\r\n    }\r\n\r\n    public nextBoolean(): boolean {\r\n        return (this.randomNumberGenerator.nextLong() & 1n) != 0n\r\n    }\r\n\r\n    public nextFloat(): number {\r\n        return Number(this.nextBits(24)) * XoroshiroRandomSource.FLOAT_UNIT\r\n    }\r\n\r\n    public nextDouble(): number {\r\n        return Number(this.nextBits(53)) * XoroshiroRandomSource.DOUBLE_UNIT\r\n    }\r\n\r\n    public nextGaussian(): number {\r\n        return this.gaussianSource.nextGaussian()\r\n    }\r\n\r\n    public consumeCount(count: number): void {\r\n        for (let i = 0; i < count; ++i) {\r\n            this.randomNumberGenerator.nextLong()\r\n        }\r\n    }\r\n\r\n    private nextBits(bits: number): bigint {\r\n        return unsignedShift64(this.randomNumberGenerator.nextLong(), toLong(64 - bits))\r\n    }\r\n}\r\n\r\nclass XoroshiroPositionalRandomFactory extends PositionalRandomFactory {\r\n    constructor(private readonly seedLo: bigint, private readonly seedHi: bigint) {\r\n        super()\r\n    }\r\n\r\n    public at(x: number, y: number, z: number): RandomSource {\r\n        const coordinateSeed = Mth.getSeed(x, y, z)\r\n        const finalSeedLo = coordinateSeed ^ this.seedLo\r\n        return new XoroshiroRandomSource(finalSeedLo, this.seedHi)\r\n    }\r\n\r\n    public fromHashOf(s: string): RandomSource {\r\n        const abyte = md5(s, {\r\n            encoding: \"utf8\",\r\n            asBytes: true,\r\n        })\r\n        const i = fromBytes64(\r\n            abyte[0],\r\n            abyte[1],\r\n            abyte[2],\r\n            abyte[3],\r\n            abyte[4],\r\n            abyte[5],\r\n            abyte[6],\r\n            abyte[7]\r\n        )\r\n        const j = fromBytes64(\r\n            abyte[8],\r\n            abyte[9],\r\n            abyte[10],\r\n            abyte[11],\r\n            abyte[12],\r\n            abyte[13],\r\n            abyte[14],\r\n            abyte[15]\r\n        )\r\n        return new XoroshiroRandomSource(i ^ this.seedLo, j ^ this.seedHi)\r\n    }\r\n}\r\n\r\nexport abstract class BitRandomSource implements RandomSource {\r\n    private static readonly FLOAT_MULTIPLIER = 5.9604645e-8\r\n    private static readonly DOUBLE_MULTIPLIER = 1.1102230246251565e-16\r\n\r\n    abstract next(bits: number): number\r\n\r\n    abstract fork(): RandomSource\r\n    abstract forkPositional(): PositionalRandomFactory\r\n\r\n    abstract setSeed(seed: bigint): void\r\n\r\n    abstract nextGaussian(): number\r\n\r\n    nextInt(bound?: number): number {\r\n        if (bound !== undefined) {\r\n            if ((bound & (bound - 1)) == 0) {\r\n                return toInt((toLong(bound) * toLong(this.next(31))) >> 31n)\r\n            } else {\r\n                let i, clapmedI\r\n                do {\r\n                    i = this.next(31)\r\n                    clapmedI = i % bound\r\n                } while (i - clapmedI + (bound - 1) < 0)\r\n\r\n                return clapmedI\r\n            }\r\n        } else {\r\n            return this.next(32)\r\n        }\r\n    }\r\n\r\n    nextLong(): bigint {\r\n        const i = this.next(32)\r\n        const j = this.next(32)\r\n        const k = toLong(i) << 32n\r\n        return clamp64(k + toLong(j))\r\n    }\r\n\r\n    nextBoolean(): boolean {\r\n        return this.next(1) != 0\r\n    }\r\n\r\n    nextFloat(): number {\r\n        return this.next(24) * BitRandomSource.FLOAT_MULTIPLIER\r\n    }\r\n\r\n    nextDouble(): number {\r\n        const i = this.next(26)\r\n        const j = this.next(27)\r\n        const k = clamp64((toLong(i) << 27n) + toLong(j))\r\n        return Number(k) * BitRandomSource.DOUBLE_MULTIPLIER\r\n    }\r\n}\r\n\r\nexport class LegacyRandomSource extends BitRandomSource {\r\n    private static readonly MODULUS_BITS = 48n\r\n    private static readonly MODULUS_MASK = 281474976710655n\r\n    private static readonly MULTIPLIER = 25214903917n\r\n    private static readonly INCREMENT = 11n\r\n    private seed: bigint\r\n    private readonly gaussianSource = new MarsagliaPolarGaussian(this)\r\n\r\n    constructor(seed: bigint) {\r\n        super()\r\n        this.setSeed(seed)\r\n    }\r\n\r\n    public fork(): RandomSource {\r\n        return new LegacyRandomSource(this.nextLong())\r\n    }\r\n\r\n    public forkPositional(): PositionalRandomFactory {\r\n        return new LegacyPositionalRandomFactory(this.nextLong())\r\n    }\r\n\r\n    public setSeed(seed: bigint): void {\r\n        this.seed = (seed ^ LegacyRandomSource.MULTIPLIER) & LegacyRandomSource.MODULUS_MASK\r\n        this.gaussianSource.reset()\r\n    }\r\n\r\n    public next(bits: number): number {\r\n        this.seed = clamp64(\r\n            (this.seed * LegacyRandomSource.MULTIPLIER + LegacyRandomSource.INCREMENT) &\r\n                LegacyRandomSource.MODULUS_MASK\r\n        )\r\n        return toInt(this.seed >> (LegacyRandomSource.MODULUS_BITS - toLong(bits)))\r\n    }\r\n\r\n    public nextGaussian(): number {\r\n        return this.gaussianSource.nextGaussian()\r\n    }\r\n}\r\n\r\nexport function hashCode(s: string): number {\r\n    let h = 0\r\n    for (let i = 0; i < s.length; i++) h = (Math.imul(31, h) + s.charCodeAt(i)) | 0\r\n    return h\r\n}\r\n\r\nclass LegacyPositionalRandomFactory extends PositionalRandomFactory {\r\n    constructor(private readonly seed: bigint) {\r\n        super()\r\n    }\r\n\r\n    public at(x: number, y: number, z: number): RandomSource {\r\n        const coordinateSeed = Mth.getSeed(x, y, z)\r\n        const finalSeed = coordinateSeed ^ this.seed\r\n        return new LegacyRandomSource(finalSeed)\r\n    }\r\n\r\n    public fromHashOf(s: string): RandomSource {\r\n        const i = hashCode(s)\r\n        return new LegacyRandomSource(toLong(i) ^ this.seed)\r\n    }\r\n}\r\n\r\n// random\r\n\r\nclass Random {\r\n    private static readonly multiplier = 0x5deece66dn\r\n    private static readonly addend = 0xbn\r\n    private static readonly mask = (1n << 48n) - 1n\r\n\r\n    private static readonly FLOAT_UNIT = 1.0 / Number(1n << 24n)\r\n    private static readonly DOUBLE_UNIT = 1.0 / Number(1n << 53n)\r\n\r\n    private seed: bigint\r\n\r\n    private nextNextGaussian: number\r\n    private haveNextNextGaussian = false\r\n\r\n    constructor(seed: bigint) {\r\n        this.setSeed(seed)\r\n    }\r\n\r\n    public setSeed(seed: bigint): void {\r\n        this.seed = Random.initialScramble(seed)\r\n        this.haveNextNextGaussian = false\r\n    }\r\n\r\n    private static initialScramble(seed: bigint): bigint {\r\n        return (seed ^ Random.multiplier) & Random.mask\r\n    }\r\n\r\n    next(bits: number): number {\r\n        const oldseed = this.seed\r\n        const nextseed = (oldseed * Random.multiplier + Random.addend) & Random.mask\r\n        this.seed = nextseed\r\n        return toInt(unsignedShift64(nextseed, toLong(48 - bits)))\r\n    }\r\n\r\n    nextInt(bound?: number): number {\r\n        if (bound === undefined) {\r\n            return this.next(32)\r\n        } else {\r\n            let r = this.next(31)\r\n            const m = bound - 1\r\n            if ((bound & m) == 0)\r\n                // i.e., bound is a power of 2\r\n                r = toInt((toLong(bound) * toLong(r)) >> 31n)\r\n            else {\r\n                // reject over-represented candidates\r\n                for (let u = r; u - (r = u % bound) + m < 0; u = this.next(31));\r\n            }\r\n            return r\r\n        }\r\n    }\r\n\r\n    nextLong(): bigint {\r\n        // it's okay that the bottom word remains signed.\r\n        return (toLong(this.next(32)) << 32n) + toLong(this.next(32))\r\n    }\r\n\r\n    nextBoolean(): boolean {\r\n        return this.next(1) != 0\r\n    }\r\n\r\n    nextFloat(): number {\r\n        return this.next(24) / Random.FLOAT_UNIT\r\n    }\r\n\r\n    nextDouble(): number {\r\n        return Number((toLong(this.next(26)) << 27n) + toLong(this.next(27))) * Random.DOUBLE_UNIT\r\n    }\r\n\r\n    nextGaussian(): number {\r\n        // See Knuth, TAOCP, Vol. 2, 3rd edition, Section 3.4.1 Algorithm C.\r\n        if (this.haveNextNextGaussian) {\r\n            this.haveNextNextGaussian = false\r\n            return this.nextNextGaussian\r\n        } else {\r\n            let v1, v2, s\r\n            do {\r\n                v1 = 2 * this.nextDouble() - 1 // between -1 and 1\r\n                v2 = 2 * this.nextDouble() - 1 // between -1 and 1\r\n                s = v1 * v1 + v2 * v2\r\n            } while (s >= 1 || s == 0)\r\n            const multiplier = Math.sqrt((-2 * Math.log(s)) / s)\r\n            this.nextNextGaussian = v2 * multiplier\r\n            this.haveNextNextGaussian = true\r\n            return v1 * multiplier\r\n        }\r\n    }\r\n}\r\n\r\n// world gen\r\nexport class WorldgenRandom extends Random {\r\n    private count: number\r\n\r\n    constructor(private readonly randomSource: RandomSource) {\r\n        super(0n)\r\n        this.count = 0\r\n    }\r\n\r\n    getCount(): number {\r\n        return this.count\r\n    }\r\n\r\n    fork(): RandomSource {\r\n        return this.randomSource.fork()\r\n    }\r\n\r\n    forkPositional(): PositionalRandomFactory {\r\n        return this.randomSource.forkPositional()\r\n    }\r\n\r\n    next(bits: number): number {\r\n        ++this.count\r\n        const randomsource = this.randomSource\r\n        if (randomsource instanceof LegacyRandomSource) {\r\n            const legacyrandomsource = randomsource\r\n            return legacyrandomsource.next(bits)\r\n        } else {\r\n            return toInt(unsignedShift64(this.randomSource.nextLong(), toLong(64 - bits)))\r\n        }\r\n    }\r\n\r\n    setSeed(seed: bigint): void {\r\n        if (this.randomSource != null) {\r\n            this.randomSource.setSeed(seed)\r\n        }\r\n    }\r\n\r\n    setDecorationSeed(seed: bigint, x: number, y: number): bigint {\r\n        this.setSeed(seed)\r\n        const xSeed = this.nextLong() | 1n\r\n        const ySeed = this.nextLong() | 1n\r\n        const finalSeed = (clamp64(toLong(x) * xSeed) + clamp64(toLong(y) * ySeed)) ^ seed\r\n        this.setSeed(finalSeed)\r\n        return finalSeed\r\n    }\r\n\r\n    setFeatureSeed(seed: bigint, x: number, y: number): void {\r\n        const finalSeed = clamp64(seed + toLong(x) + toLong(toInt(10000n * toLong(y))))\r\n        this.setSeed(finalSeed)\r\n    }\r\n\r\n    setLargeFeatureSeed(seed: bigint, x: number, y: number): void {\r\n        this.setSeed(seed)\r\n        const xSeed = this.nextLong()\r\n        const ySeed = this.nextLong()\r\n        const finalSeed = clamp64(toLong(x) * xSeed) ^ clamp64(toLong(y) * ySeed) ^ seed\r\n        this.setSeed(finalSeed)\r\n    }\r\n\r\n    setLargeFeatureWithSalt(salt: bigint, x: number, y: number, z: number): void {\r\n        const finalSeed = clamp64(\r\n            clamp64(toLong(x) * 341873128712n) +\r\n                clamp64(toLong(y) * 132897987541n) +\r\n                salt +\r\n                toLong(z)\r\n        )\r\n        this.setSeed(finalSeed)\r\n    }\r\n\r\n    public static seedSlimeChunk(x: number, y: number, seed: bigint, salt: bigint): Random {\r\n        return new Random(\r\n            (seed +\r\n                toLong(toInt(toLong(x) * toLong(x) * 4987142n)) +\r\n                toLong(toInt(toLong(x) * 5947611n)) +\r\n                toLong(toInt(toLong(y) * toLong(y))) * 4392871n +\r\n                toLong(toInt(toLong(y) * 389711n))) ^\r\n                salt\r\n        )\r\n    }\r\n}\r\n\r\nexport enum Algorithm {\r\n    LEGACY,\r\n    XOROSHIRO,\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nconst AlgorithmClasses: { [key in Algorithm]: new (seed: bigint) => RandomSource } = {}\r\nAlgorithmClasses[Algorithm.LEGACY] = LegacyRandomSource\r\nAlgorithmClasses[Algorithm.XOROSHIRO] = XoroshiroRandomSource\r\n\r\nexport function Algorithm_newInstance(algorithm: Algorithm, seed: bigint): RandomSource {\r\n    return new AlgorithmClasses[algorithm](seed)\r\n}\r\n\r\nexport class LinearCongruentialGenerator {\r\n    private static readonly MULTIPLIER = 6364136223846793005n\r\n    private static readonly INCREMENT = 1442695040888963407n\r\n\r\n    public static next(seed: bigint, n: bigint): bigint {\r\n        seed = clamp64(\r\n            seed * seed * LinearCongruentialGenerator.MULTIPLIER +\r\n                LinearCongruentialGenerator.INCREMENT\r\n        )\r\n        return clamp64(seed + n)\r\n    }\r\n}\r\n","import { RandomSource } from \"../random\"\r\nimport * as Mth from \"../mth\"\r\n\r\nexport class SimplexNoise {\r\n    static readonly GRADIENT = [\r\n        [1, 1, 0],\r\n        [-1, 1, 0],\r\n        [1, -1, 0],\r\n        [-1, -1, 0],\r\n        [1, 0, 1],\r\n        [-1, 0, 1],\r\n        [1, 0, -1],\r\n        [-1, 0, -1],\r\n        [0, 1, 1],\r\n        [0, -1, 1],\r\n        [0, 1, -1],\r\n        [0, -1, -1],\r\n        [1, 1, 0],\r\n        [0, -1, 1],\r\n        [-1, 1, 0],\r\n        [0, -1, -1],\r\n    ]\r\n    private static readonly SQRT_3 = Math.sqrt(3.0)\r\n    private static readonly F2 = 0.5 * (SimplexNoise.SQRT_3 - 1.0)\r\n    private static readonly G2 = (3.0 - SimplexNoise.SQRT_3) / 6.0\r\n    private readonly p: number[] = new Array(512).fill(0)\r\n    public readonly xo: number\r\n    public readonly yo: number\r\n    public readonly zo: number\r\n\r\n    constructor(randomSource: RandomSource) {\r\n        this.xo = randomSource.nextDouble() * 256.0\r\n        this.yo = randomSource.nextDouble() * 256.0\r\n        this.zo = randomSource.nextDouble() * 256.0\r\n\r\n        for (let i = 0; i < 256; i++) {\r\n            this.p[i] = i\r\n        }\r\n\r\n        for (let i = 0; i < 256; ++i) {\r\n            const value = randomSource.nextInt(256 - i)\r\n            const temp = this.p[i]\r\n            this.p[i] = this.p[value + i]\r\n            this.p[value + i] = temp\r\n        }\r\n    }\r\n\r\n    private get_p(index: number): number {\r\n        return this.p[index & 255]\r\n    }\r\n\r\n    static dot(v: number[], x: number, y: number, z: number): number {\r\n        return v[0] * x + v[1] * y + v[2] * z\r\n    }\r\n\r\n    private getCornerNoise3D(\r\n        gradintIndex: number,\r\n        x: number,\r\n        y: number,\r\n        z: number,\r\n        maxLengthSq: number\r\n    ): number {\r\n        let lengthDiff = maxLengthSq - x * x - y * y - z * z\r\n        let result\r\n        if (lengthDiff < 0.0) {\r\n            result = 0.0\r\n        } else {\r\n            lengthDiff *= lengthDiff\r\n            result =\r\n                lengthDiff *\r\n                lengthDiff *\r\n                SimplexNoise.dot(SimplexNoise.GRADIENT[gradintIndex], x, y, z)\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    public getValue(x: number, y: number, z?: number): number {\r\n        if (z === undefined) {\r\n            const someLength1 = (x + y) * SimplexNoise.F2\r\n            const intX = Mth.floor(x + someLength1)\r\n            const intY = Mth.floor(y + someLength1)\r\n            const someLength2 = (intX + intY) * SimplexNoise.G2\r\n            const d2 = intX - someLength2\r\n            const d3 = intY - someLength2\r\n            const d4 = x - d2\r\n            const d5 = y - d3\r\n            let k\r\n            let l\r\n            if (d4 > d5) {\r\n                k = 1\r\n                l = 0\r\n            } else {\r\n                k = 0\r\n                l = 1\r\n            }\r\n\r\n            const d6 = d4 - k + SimplexNoise.G2\r\n            const d7 = d5 - l + SimplexNoise.G2\r\n            const d8 = d4 - 1.0 + 2.0 * SimplexNoise.G2\r\n            const d9 = d5 - 1.0 + 2.0 * SimplexNoise.G2\r\n            const clampedIntX = intX & 255\r\n            const clampedIntY = intY & 255\r\n            const k1 = this.get_p(clampedIntX + this.get_p(clampedIntY)) % 12\r\n            const l1 = this.get_p(clampedIntX + k + this.get_p(clampedIntY + l)) % 12\r\n            const i2 = this.get_p(clampedIntX + 1 + this.get_p(clampedIntY + 1)) % 12\r\n            const d10 = this.getCornerNoise3D(k1, d4, d5, 0.0, 0.5)\r\n            const d11 = this.getCornerNoise3D(l1, d6, d7, 0.0, 0.5)\r\n            const d12 = this.getCornerNoise3D(i2, d8, d9, 0.0, 0.5)\r\n            return 70.0 * (d10 + d11 + d12)\r\n        } else {\r\n            const ONE_THIRD = 0.3333333333333333\r\n            const ONE_SIXTH = 0.16666666666666666\r\n\r\n            const avgCoord = (x + y + z) * ONE_THIRD\r\n\r\n            const avgIntX = Mth.floor(x + avgCoord)\r\n            const avgIntY = Mth.floor(y + avgCoord)\r\n            const avgIntZ = Mth.floor(z + avgCoord)\r\n            const avgCoord2 = (avgIntX + avgIntY + avgIntZ) * ONE_SIXTH\r\n\r\n            const d4 = avgIntX - avgCoord2\r\n            const d5 = avgIntY - avgCoord2\r\n            const d6 = avgIntZ - avgCoord2\r\n\r\n            const d7 = x - d4\r\n            const d8 = y - d5\r\n            const d9 = z - d6\r\n\r\n            let l\r\n            let i1\r\n            let j1\r\n            let k1\r\n            let l1\r\n            let i2\r\n            if (d7 >= d8) {\r\n                if (d8 >= d9) {\r\n                    l = 1\r\n                    i1 = 0\r\n                    j1 = 0\r\n                    k1 = 1\r\n                    l1 = 1\r\n                    i2 = 0\r\n                } else if (d7 >= d9) {\r\n                    l = 1\r\n                    i1 = 0\r\n                    j1 = 0\r\n                    k1 = 1\r\n                    l1 = 0\r\n                    i2 = 1\r\n                } else {\r\n                    l = 0\r\n                    i1 = 0\r\n                    j1 = 1\r\n                    k1 = 1\r\n                    l1 = 0\r\n                    i2 = 1\r\n                }\r\n            } else if (d8 < d9) {\r\n                l = 0\r\n                i1 = 0\r\n                j1 = 1\r\n                k1 = 0\r\n                l1 = 1\r\n                i2 = 1\r\n            } else if (d7 < d9) {\r\n                l = 0\r\n                i1 = 1\r\n                j1 = 0\r\n                k1 = 0\r\n                l1 = 1\r\n                i2 = 1\r\n            } else {\r\n                l = 0\r\n                i1 = 1\r\n                j1 = 0\r\n                k1 = 1\r\n                l1 = 1\r\n                i2 = 0\r\n            }\r\n\r\n            const d10 = d7 - l + ONE_SIXTH\r\n            const d11 = d8 - i1 + ONE_SIXTH\r\n            const d12 = d9 - j1 + ONE_SIXTH\r\n            const d13 = d7 - k1 + ONE_THIRD\r\n            const d14 = d8 - l1 + ONE_THIRD\r\n            const d15 = d9 - i2 + ONE_THIRD\r\n            const d16 = d7 - 1.0 + 0.5\r\n            const d17 = d8 - 1.0 + 0.5\r\n            const d18 = d9 - 1.0 + 0.5\r\n            const j2 = avgIntX & 255\r\n            const k2 = avgIntY & 255\r\n            const l2 = avgIntZ & 255\r\n            const i3 = this.get_p(j2 + this.get_p(k2 + this.get_p(l2))) % 12\r\n            const j3 = this.get_p(j2 + l + this.get_p(k2 + i1 + this.get_p(l2 + j1))) % 12\r\n            const k3 = this.get_p(j2 + k1 + this.get_p(k2 + l1 + this.get_p(l2 + i2))) % 12\r\n            const l3 = this.get_p(j2 + 1 + this.get_p(k2 + 1 + this.get_p(l2 + 1))) % 12\r\n            const d19 = this.getCornerNoise3D(i3, d7, d8, d9, 0.6)\r\n            const d20 = this.getCornerNoise3D(j3, d10, d11, d12, 0.6)\r\n            const d21 = this.getCornerNoise3D(k3, d13, d14, d15, 0.6)\r\n            const d22 = this.getCornerNoise3D(l3, d16, d17, d18, 0.6)\r\n            return 32.0 * (d19 + d20 + d21 + d22)\r\n        }\r\n    }\r\n}\r\n","import { RandomSource } from \"../random\"\r\nimport { SimplexNoise } from \"./simplex-noise\"\r\nimport * as Mth from \"../mth\"\r\n\r\nexport class ImprovedNoise {\r\n    private static readonly SHIFT_UP_EPSILON = 1.0e-7\r\n    private readonly p: Int8Array\r\n    public readonly xo: number\r\n    public readonly yo: number\r\n    public readonly zo: number\r\n\r\n    constructor(randomSource: RandomSource) {\r\n        this.xo = randomSource.nextDouble() * 256.0\r\n        this.yo = randomSource.nextDouble() * 256.0\r\n        this.zo = randomSource.nextDouble() * 256.0\r\n        this.p = new Int8Array(256)\r\n\r\n        for (let i = 0; i < 256; ++i) {\r\n            this.p[i] = i\r\n        }\r\n\r\n        for (let i = 0; i < 256; ++i) {\r\n            const value = randomSource.nextInt(256 - i)\r\n            const temp = this.p[i]\r\n            this.p[i] = this.p[i + value]\r\n            this.p[i + value] = temp\r\n        }\r\n    }\r\n\r\n    noise(x: number, y: number, z: number, yFractStep = 0, maxYfract = 0): number {\r\n        const xWithOffset = x + this.xo\r\n        const yWithOffset = y + this.yo\r\n        const zWithOffset = z + this.zo\r\n        const intX = Mth.floor(xWithOffset)\r\n        const intY = Mth.floor(yWithOffset)\r\n        const intZ = Mth.floor(zWithOffset)\r\n        const xFract = xWithOffset - intX\r\n        const yFract = yWithOffset - intY\r\n        const zFract = zWithOffset - intZ\r\n        let yFractOffset\r\n        if (yFractStep != 0.0) {\r\n            let yFractToUse\r\n            if (maxYfract >= 0.0 && maxYfract < yFract) {\r\n                yFractToUse = maxYfract\r\n            } else {\r\n                yFractToUse = yFract\r\n            }\r\n\r\n            yFractOffset =\r\n                Mth.floor(yFractToUse / yFractStep + ImprovedNoise.SHIFT_UP_EPSILON) * yFractStep\r\n        } else {\r\n            yFractOffset = 0.0\r\n        }\r\n\r\n        return this.sampleAndLerp(intX, intY, intZ, xFract, yFract - yFractOffset, zFract, yFract)\r\n    }\r\n\r\n    private static gradDot(gradintIndex: number, x: number, y: number, z: number): number {\r\n        return SimplexNoise.dot(SimplexNoise.GRADIENT[gradintIndex & 15], x, y, z)\r\n    }\r\n\r\n    private get_p(index: number): number {\r\n        return this.p[index & 255] & 255\r\n    }\r\n\r\n    private sampleAndLerp(\r\n        x: number,\r\n        y: number,\r\n        z: number,\r\n        xt: number,\r\n        yt: number,\r\n        zt: number,\r\n        yt2: number\r\n    ): number {\r\n        const noiseX0 = this.get_p(x)\r\n        const noiseX1 = this.get_p(x + 1)\r\n        const noiseY00 = this.get_p(noiseX0 + y)\r\n        const noiseY01 = this.get_p(noiseX0 + y + 1)\r\n        const noiseY10 = this.get_p(noiseX1 + y)\r\n        const noiseY11 = this.get_p(noiseX1 + y + 1)\r\n        // cube 2x2x2\r\n        const len0 = ImprovedNoise.gradDot(this.get_p(noiseY00 + z), xt, yt, zt)\r\n        const len1 = ImprovedNoise.gradDot(this.get_p(noiseY10 + z), xt - 1.0, yt, zt)\r\n        const len2 = ImprovedNoise.gradDot(this.get_p(noiseY01 + z), xt, yt - 1.0, zt)\r\n        const len3 = ImprovedNoise.gradDot(this.get_p(noiseY11 + z), xt - 1.0, yt - 1.0, zt)\r\n        const len4 = ImprovedNoise.gradDot(this.get_p(noiseY00 + z + 1), xt, yt, zt - 1.0)\r\n        const len5 = ImprovedNoise.gradDot(this.get_p(noiseY10 + z + 1), xt - 1.0, yt, zt - 1.0)\r\n        const len6 = ImprovedNoise.gradDot(this.get_p(noiseY01 + z + 1), xt, yt - 1.0, zt - 1.0)\r\n        const len7 = ImprovedNoise.gradDot(\r\n            this.get_p(noiseY11 + z + 1),\r\n            xt - 1.0,\r\n            yt - 1.0,\r\n            zt - 1.0\r\n        )\r\n        const smoothXt = Mth.smoothstep(xt)\r\n        const smoothYt = Mth.smoothstep(yt2)\r\n        const smoothZt = Mth.smoothstep(zt)\r\n        return Mth.lerp3(\r\n            smoothXt,\r\n            smoothYt,\r\n            smoothZt,\r\n            len0,\r\n            len1,\r\n            len2,\r\n            len3,\r\n            len4,\r\n            len5,\r\n            len6,\r\n            len7\r\n        )\r\n    }\r\n\r\n    // unused\r\n\r\n    noiseWithDerivative(x: number, y: number, z: number, output: number[]): number {\r\n        const xWithOffset = x + this.xo\r\n        const yWithOffset = y + this.yo\r\n        const zWithOffset = z + this.zo\r\n        const intXwithOffset = Mth.floor(xWithOffset)\r\n        const intYwithOffset = Mth.floor(yWithOffset)\r\n        const intZwithOffset = Mth.floor(zWithOffset)\r\n        const xFract = xWithOffset - intXwithOffset\r\n        const yFract = yWithOffset - intYwithOffset\r\n        const zFract = zWithOffset - intZwithOffset\r\n        return this.sampleWithDerivative(\r\n            intXwithOffset,\r\n            intYwithOffset,\r\n            intZwithOffset,\r\n            xFract,\r\n            yFract,\r\n            zFract,\r\n            output\r\n        )\r\n    }\r\n\r\n    private sampleWithDerivative(\r\n        x: number,\r\n        y: number,\r\n        z: number,\r\n        xFract: number,\r\n        yFract: number,\r\n        zFract: number,\r\n        output: number[]\r\n    ): number {\r\n        const noiseX0 = this.get_p(x)\r\n        const noiseX1 = this.get_p(x + 1)\r\n        const noiseY00 = this.get_p(noiseX0 + y)\r\n        const noiseY01 = this.get_p(noiseX0 + y + 1)\r\n        const noiseY10 = this.get_p(noiseX1 + y)\r\n        const noiseY11 = this.get_p(noiseX1 + y + 1)\r\n        const noiseZ000 = this.get_p(noiseY00 + z)\r\n        const noiseZ100 = this.get_p(noiseY10 + z)\r\n        const noiseZ010 = this.get_p(noiseY01 + z)\r\n        const noiseZ110 = this.get_p(noiseY11 + z)\r\n        const noiseZ001 = this.get_p(noiseY00 + z + 1)\r\n        const noiseZ101 = this.get_p(noiseY10 + z + 1)\r\n        const noiseZ011 = this.get_p(noiseY01 + z + 1)\r\n        const noiseZ111 = this.get_p(noiseY11 + z + 1)\r\n        // here we have 2x2x2 cube\r\n        const gradient0 = SimplexNoise.GRADIENT[noiseZ000 & 15]\r\n        const gradient1 = SimplexNoise.GRADIENT[noiseZ100 & 15]\r\n        const gradient2 = SimplexNoise.GRADIENT[noiseZ010 & 15]\r\n        const gradient3 = SimplexNoise.GRADIENT[noiseZ110 & 15]\r\n        const gradient4 = SimplexNoise.GRADIENT[noiseZ001 & 15]\r\n        const gradient5 = SimplexNoise.GRADIENT[noiseZ101 & 15]\r\n        const gradient6 = SimplexNoise.GRADIENT[noiseZ011 & 15]\r\n        const gradient7 = SimplexNoise.GRADIENT[noiseZ111 & 15]\r\n        const len0 = SimplexNoise.dot(gradient0, xFract, yFract, zFract)\r\n        const len1 = SimplexNoise.dot(gradient1, xFract - 1.0, yFract, zFract)\r\n        const len2 = SimplexNoise.dot(gradient2, xFract, yFract - 1.0, zFract)\r\n        const len3 = SimplexNoise.dot(gradient3, xFract - 1.0, yFract - 1.0, zFract)\r\n        const len4 = SimplexNoise.dot(gradient4, xFract, yFract, zFract - 1.0)\r\n        const len5 = SimplexNoise.dot(gradient5, xFract - 1.0, yFract, zFract - 1.0)\r\n        const len6 = SimplexNoise.dot(gradient6, xFract, yFract - 1.0, zFract - 1.0)\r\n        const len7 = SimplexNoise.dot(gradient7, xFract - 1.0, yFract - 1.0, zFract - 1.0)\r\n        const smoothXfract = Mth.smoothstep(xFract)\r\n        const smoothYfract = Mth.smoothstep(yFract)\r\n        const smoothZfract = Mth.smoothstep(zFract)\r\n        const interpolatedGradientX = Mth.lerp3(\r\n            smoothXfract,\r\n            smoothYfract,\r\n            smoothZfract,\r\n            gradient0[0],\r\n            gradient1[0],\r\n            gradient2[0],\r\n            gradient3[0],\r\n            gradient4[0],\r\n            gradient5[0],\r\n            gradient6[0],\r\n            gradient7[0]\r\n        )\r\n        const interpolatedGradientY = Mth.lerp3(\r\n            smoothXfract,\r\n            smoothYfract,\r\n            smoothZfract,\r\n            gradient0[1],\r\n            gradient1[1],\r\n            gradient2[1],\r\n            gradient3[1],\r\n            gradient4[1],\r\n            gradient5[1],\r\n            gradient6[1],\r\n            gradient7[1]\r\n        )\r\n        const interpolatedGradientZ = Mth.lerp3(\r\n            smoothXfract,\r\n            smoothYfract,\r\n            smoothZfract,\r\n            gradient0[2],\r\n            gradient1[2],\r\n            gradient2[2],\r\n            gradient3[2],\r\n            gradient4[2],\r\n            gradient5[2],\r\n            gradient6[2],\r\n            gradient7[2]\r\n        )\r\n        const xLen = Mth.lerp2(\r\n            smoothYfract,\r\n            smoothZfract,\r\n            len1 - len0,\r\n            len3 - len2,\r\n            len5 - len4,\r\n            len7 - len6\r\n        )\r\n        const yLen = Mth.lerp2(\r\n            smoothZfract,\r\n            smoothXfract,\r\n            len2 - len0,\r\n            len6 - len4,\r\n            len3 - len1,\r\n            len7 - len5\r\n        )\r\n        const zLen = Mth.lerp2(\r\n            smoothXfract,\r\n            smoothYfract,\r\n            len4 - len0,\r\n            len5 - len1,\r\n            len6 - len2,\r\n            len7 - len3\r\n        )\r\n        const xDerivSmooth = Mth.smoothstepDerivative(xFract)\r\n        const yDerivSmooth = Mth.smoothstepDerivative(yFract)\r\n        const zDerivSmooth = Mth.smoothstepDerivative(zFract)\r\n        const outputX = interpolatedGradientX + xDerivSmooth * xLen\r\n        const outputY = interpolatedGradientY + yDerivSmooth * yLen\r\n        const outputZ = interpolatedGradientZ + zDerivSmooth * zLen\r\n        output[0] += outputX\r\n        output[1] += outputY\r\n        output[2] += outputZ\r\n        return Mth.lerp3(\r\n            smoothXfract,\r\n            smoothYfract,\r\n            smoothZfract,\r\n            len0,\r\n            len1,\r\n            len2,\r\n            len3,\r\n            len4,\r\n            len5,\r\n            len6,\r\n            len7\r\n        )\r\n    }\r\n}\r\n","import { Pair } from \"../consumer\"\r\nimport { RandomSource, RandomSupport } from \"../random\"\r\nimport { ImprovedNoise } from \"./improved-noise\"\r\nimport * as Mth from \"../mth\"\r\n\r\nexport abstract class IntStream {\r\n    static rangeClosed(startInclusive: number, endInclusive: number): number[] {\r\n        const result = [] as number[]\r\n\r\n        for (let i = startInclusive; i <= endInclusive; i++) {\r\n            result.push(i)\r\n        }\r\n\r\n        return result\r\n    }\r\n}\r\n\r\nexport class PerlinNoise {\r\n    private readonly noiseLevels: ImprovedNoise[]\r\n    public readonly firstOctave: number\r\n    public readonly amplitudes: number[]\r\n    private readonly lowestFreqValueFactor: number\r\n    private readonly lowestFreqInputFactor: number\r\n\r\n    static createLegacyForBlendedNoise(randomSource: RandomSource, octaves: number[]): PerlinNoise {\r\n        return new PerlinNoise(randomSource, PerlinNoise.makeAmplitudes(octaves), false)\r\n    }\r\n\r\n    static createLegacyForLegacyNormalNoise(\r\n        randomSource: RandomSource,\r\n        firstOctave: number,\r\n        amplitudes: number[]\r\n    ): PerlinNoise {\r\n        return new PerlinNoise(randomSource, Pair.of(firstOctave, amplitudes), false)\r\n    }\r\n\r\n    public static create(randomSource: RandomSource, octaves: number[]): PerlinNoise {\r\n        return new PerlinNoise(randomSource, PerlinNoise.makeAmplitudes(octaves), true)\r\n    }\r\n\r\n    public static create2(\r\n        randomSource: RandomSource,\r\n        firstOctave: number,\r\n        amplitudes: number[]\r\n    ): PerlinNoise {\r\n        return new PerlinNoise(randomSource, Pair.of(firstOctave, amplitudes), true)\r\n    }\r\n\r\n    private static makeAmplitudes(octaves: number[]): Pair<number, number[]> {\r\n        const minusFirstOctave = -octaves[0]\r\n        const lastOctave = octaves[octaves.length - 1]\r\n        const octaveLength = minusFirstOctave + lastOctave + 1\r\n\r\n        const doublelist: number[] = new Array(octaveLength)\r\n        doublelist.fill(0)\r\n\r\n        for (const octave of octaves) {\r\n            doublelist[octave + minusFirstOctave] = 1.0\r\n        }\r\n\r\n        return Pair.of(-minusFirstOctave, doublelist)\r\n    }\r\n\r\n    protected constructor(\r\n        randomSource: RandomSource,\r\n        octaveAndAmplitudes: Pair<number, number[]>,\r\n        notLegacy: boolean\r\n    ) {\r\n        this.firstOctave = octaveAndAmplitudes.first\r\n        this.amplitudes = octaveAndAmplitudes.second\r\n        const amplitudesCount = this.amplitudes.length\r\n        const minusFirstOctave = -this.firstOctave\r\n        this.noiseLevels = new Array(amplitudesCount)\r\n        if (notLegacy) {\r\n            const positionalrandomfactory = randomSource.forkPositional()\r\n\r\n            for (let k = 0; k < amplitudesCount; ++k) {\r\n                if (this.amplitudes[k] != 0.0) {\r\n                    const l = this.firstOctave + k\r\n                    this.noiseLevels[k] = new ImprovedNoise(\r\n                        positionalrandomfactory.fromHashOf(\"octave_\" + l)\r\n                    )\r\n                }\r\n            }\r\n        } else {\r\n            const improvednoise = new ImprovedNoise(randomSource)\r\n            if (minusFirstOctave >= 0 && minusFirstOctave < amplitudesCount) {\r\n                const d0 = this.amplitudes[minusFirstOctave]\r\n                if (d0 != 0.0) {\r\n                    this.noiseLevels[minusFirstOctave] = improvednoise\r\n                }\r\n            }\r\n\r\n            for (let octaveIndex = minusFirstOctave - 1; octaveIndex >= 0; --octaveIndex) {\r\n                if (octaveIndex < amplitudesCount) {\r\n                    const d1 = this.amplitudes[octaveIndex]\r\n                    if (d1 != 0.0) {\r\n                        this.noiseLevels[octaveIndex] = new ImprovedNoise(randomSource)\r\n                    } else {\r\n                        PerlinNoise.skipOctave(randomSource)\r\n                    }\r\n                } else {\r\n                    PerlinNoise.skipOctave(randomSource)\r\n                }\r\n            }\r\n\r\n            if (\r\n                this.noiseLevels.filter(noise => noise).length !=\r\n                this.amplitudes.filter(amplitude => amplitude != 0).length\r\n            ) {\r\n                throw new Error(\r\n                    \"Failed to create correct number of noise levels for given non-zero amplitudes\"\r\n                )\r\n            }\r\n\r\n            if (minusFirstOctave < amplitudesCount - 1) {\r\n                throw new Error(\"Positive octaves are temporarily disabled\")\r\n            }\r\n        }\r\n\r\n        this.lowestFreqInputFactor = Math.pow(2.0, -minusFirstOctave)\r\n        this.lowestFreqValueFactor =\r\n            Math.pow(2.0, amplitudesCount - 1) / (Math.pow(2.0, amplitudesCount) - 1.0)\r\n    }\r\n\r\n    private static skipOctave(randomSource: RandomSource): void {\r\n        RandomSupport.consumeCount(randomSource, 262)\r\n    }\r\n\r\n    public getValue(\r\n        x: number,\r\n        y: number,\r\n        z: number,\r\n        yStep = 0,\r\n        maxYfract = 0,\r\n        useYfractOverride = false\r\n    ): number {\r\n        let value = 0.0\r\n        let inputScale = this.lowestFreqInputFactor\r\n        let outputScale = this.lowestFreqValueFactor\r\n\r\n        for (let i = 0; i < this.noiseLevels.length; ++i) {\r\n            const improvednoise = this.noiseLevels[i]\r\n            if (improvednoise != null) {\r\n                const noise = improvednoise.noise(\r\n                    PerlinNoise.wrap(x * inputScale),\r\n                    useYfractOverride ? -improvednoise.yo : PerlinNoise.wrap(y * inputScale),\r\n                    PerlinNoise.wrap(z * inputScale),\r\n                    yStep * inputScale,\r\n                    maxYfract * inputScale\r\n                )\r\n                value += this.amplitudes[i] * noise * outputScale\r\n            }\r\n\r\n            inputScale *= 2.0\r\n            outputScale /= 2.0\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    getOctaveNoise(octave: number): ImprovedNoise {\r\n        return this.noiseLevels[this.noiseLevels.length - 1 - octave]\r\n    }\r\n\r\n    static wrap(num: number): number {\r\n        return num - Mth.lfloor(num / 3.3554432e7 + 0.5) * 3.3554432e7\r\n    }\r\n}\r\n","import { RandomSource } from \"../random\"\r\nimport { PerlinNoise } from \"./perlin-noise\"\r\n\r\nexport class NoiseParameters {\r\n    public readonly amplitudes: number[]\r\n\r\n    constructor(firstOctave: number, firstAmplitude: number, ...amplitudes: number[])\r\n    constructor(firstOctave: number, amplitudes: number[])\r\n    constructor(\r\n        public readonly firstOctave: number,\r\n        firstAmplitude: number[] | number,\r\n        ...amplitudes: number[]\r\n    ) {\r\n        if (typeof firstAmplitude === \"number\") {\r\n            this.amplitudes = [firstAmplitude, ...amplitudes]\r\n        } else {\r\n            this.amplitudes = firstAmplitude\r\n        }\r\n    }\r\n}\r\n\r\nexport class NormalNoise {\r\n    private static readonly INPUT_FACTOR = 1.0181268882175227\r\n    private static readonly TARGET_DEVIATION = 0.3333333333333333\r\n    private readonly valueFactor: number\r\n    private readonly first: PerlinNoise\r\n    private readonly second: PerlinNoise\r\n\r\n    public static createLegacyNetherBiome(\r\n        randomSource: RandomSource,\r\n        parameters: NoiseParameters\r\n    ): NormalNoise {\r\n        return new NormalNoise(randomSource, parameters.firstOctave, parameters.amplitudes, false)\r\n    }\r\n\r\n    public static create(\r\n        randomSource: RandomSource,\r\n        firstOctave: number,\r\n        ...amplitudes: number[]\r\n    ): NormalNoise {\r\n        return new NormalNoise(randomSource, firstOctave, amplitudes, true)\r\n    }\r\n\r\n    public static create2(p_192849_: RandomSource, p_192850_: NoiseParameters): NormalNoise {\r\n        return new NormalNoise(p_192849_, p_192850_.firstOctave, p_192850_.amplitudes, true)\r\n    }\r\n\r\n    public static create3(\r\n        randomSource: RandomSource,\r\n        firstOctave: number,\r\n        amplitudes: number[]\r\n    ): NormalNoise {\r\n        return new NormalNoise(randomSource, firstOctave, amplitudes, true)\r\n    }\r\n\r\n    private constructor(\r\n        randomSource: RandomSource,\r\n        firstOctave: number,\r\n        amplitudes: number[],\r\n        notLegacy: boolean\r\n    ) {\r\n        if (notLegacy) {\r\n            this.first = PerlinNoise.create2(randomSource, firstOctave, amplitudes)\r\n            this.second = PerlinNoise.create2(randomSource, firstOctave, amplitudes)\r\n        } else {\r\n            this.first = PerlinNoise.createLegacyForLegacyNormalNoise(\r\n                randomSource,\r\n                firstOctave,\r\n                amplitudes\r\n            )\r\n            this.second = PerlinNoise.createLegacyForLegacyNormalNoise(\r\n                randomSource,\r\n                firstOctave,\r\n                amplitudes\r\n            )\r\n        }\r\n\r\n        let minAmplitudeIndex = Number.MAX_SAFE_INTEGER\r\n        let maxAmplitudeIndex = Number.MIN_SAFE_INTEGER\r\n\r\n        for (let amplitudeIndex = 0; amplitudeIndex < amplitudes.length; amplitudeIndex++) {\r\n            const amplitude = amplitudes[amplitudeIndex]\r\n            if (amplitude != 0.0) {\r\n                minAmplitudeIndex = Math.min(minAmplitudeIndex, amplitudeIndex)\r\n                maxAmplitudeIndex = Math.max(maxAmplitudeIndex, amplitudeIndex)\r\n            }\r\n        }\r\n\r\n        this.valueFactor =\r\n            0.16666666666666666 /\r\n            NormalNoise.expectedDeviation(maxAmplitudeIndex - minAmplitudeIndex)\r\n    }\r\n\r\n    private static expectedDeviation(v: number): number {\r\n        return 0.1 * (1.0 + 1.0 / (v + 1))\r\n    }\r\n\r\n    public getValue(x: number, y: number, z: number): number {\r\n        const inputX = x * NormalNoise.INPUT_FACTOR\r\n        const inputY = y * NormalNoise.INPUT_FACTOR\r\n        const inputZ = z * NormalNoise.INPUT_FACTOR\r\n        return (\r\n            (this.first.getValue(x, y, z) + this.second.getValue(inputX, inputY, inputZ)) *\r\n            this.valueFactor\r\n        )\r\n    }\r\n\r\n    public parameters(): NoiseParameters {\r\n        return new NoiseParameters(this.first.firstOctave, this.first.amplitudes)\r\n    }\r\n}\r\n","import { NoiseParameters, NormalNoise } from \"./noise/normal-noise\"\r\nimport { PositionalRandomFactory, toResourceLocation } from \"./random\"\r\n\r\nexport enum Noises {\r\n    TEMPERATURE = \"temperature\",\r\n    VEGETATION = \"vegetation\",\r\n    CONTINENTALNESS = \"continentalness\",\r\n    EROSION = \"erosion\",\r\n    TEMPERATURE_LARGE = \"temperature_large\",\r\n    VEGETATION_LARGE = \"vegetation_large\",\r\n    CONTINENTALNESS_LARGE = \"continentalness_large\",\r\n    EROSION_LARGE = \"erosion_large\",\r\n    RIDGE = \"ridge\",\r\n    SHIFT = \"offset\",\r\n    AQUIFER_BARRIER = \"aquifer_barrier\",\r\n    AQUIFER_FLUID_LEVEL_FLOODEDNESS = \"aquifer_fluid_level_floodedness\",\r\n    AQUIFER_LAVA = \"aquifer_lava\",\r\n    AQUIFER_FLUID_LEVEL_SPREAD = \"aquifer_fluid_level_spread\",\r\n    PILLAR = \"pillar\",\r\n    PILLAR_RARENESS = \"pillar_rareness\",\r\n    PILLAR_THICKNESS = \"pillar_thickness\",\r\n    SPAGHETTI_2 = \"spaghetti_2\",\r\n    SPAGHETTI_2D_ELEVATION = \"spaghetti_2d_elevation\",\r\n    SPAGHETTI_2D_MODULATOR = \"spaghetti_2d_modulator\",\r\n    SPAGHETTI_2D_THICKNESS = \"spaghetti_2d_thickness\",\r\n    SPAGHETTI_3D_1 = \"spaghetti_3d_1\",\r\n    SPAGHETTI_3D_2 = \"spaghetti_3d_2\",\r\n    SPAGHETTI_3D_RARITY = \"spaghetti_3d_rarity\",\r\n    SPAGHETTI_3D_THICKNESS = \"spaghetti_3d_thickness\",\r\n    SPAGHETTI_ROUGHNESS = \"spaghetti_roughness\",\r\n    SPAGHETTI_ROUGHNESS_MODULATOR = \"spaghetti_roughness_modulator\",\r\n    CAVE_ENTRANCE = \"cave_entrance\",\r\n    CAVE_LAYER = \"cave_layer\",\r\n    CAVE_CHEESE = \"cave_cheese\",\r\n    ORE_VEININESS = \"ore_veininess\",\r\n    ORE_VEIN_A = \"ore_vein_a\",\r\n    ORE_VEIN_B = \"ore_vein_b\",\r\n    ORE_GAP = \"ore_gap\",\r\n    NOODLE = \"noodle\",\r\n    NOODLE_THICKNESS = \"noodle_thickness\",\r\n    NOODLE_RIDGE_A = \"noodle_ridge_a\",\r\n    NOODLE_RIDGE_B = \"noodle_ridge_b\",\r\n    JAGGED = \"jagged\",\r\n    SURFACE = \"surface\",\r\n    SURFACE_SECONDARY = \"surface_secondary\",\r\n    CLAY_BANDS_OFFSET = \"clay_bands_offset\",\r\n    BADLANDS_PILLAR = \"badlands_pillar\",\r\n    BADLANDS_PILLAR_ROOF = \"badlands_pillar_roof\",\r\n    BADLANDS_SURFACE = \"badlands_surface\",\r\n    ICEBERG_PILLAR = \"iceberg_pillar\",\r\n    ICEBERG_PILLAR_ROOF = \"iceberg_pillar_roof\",\r\n    ICEBERG_SURFACE = \"iceberg_surface\",\r\n    SWAMP = \"surface_swamp\",\r\n    CALCITE = \"calcite\",\r\n    GRAVEL = \"gravel\",\r\n    POWDER_SNOW = \"powder_snow\",\r\n    PACKED_ICE = \"packed_ice\",\r\n    ICE = \"ice\",\r\n    SOUL_SAND_LAYER = \"soul_sand_layer\",\r\n    GRAVEL_LAYER = \"gravel_layer\",\r\n    PATCH = \"patch\",\r\n    NETHERRACK = \"netherrack\",\r\n    NETHER_WART = \"nether_wart\",\r\n    NETHER_STATE_SELECTOR = \"nether_state_selector\",\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nexport const NOISES: {\r\n    [key in Noises]: NoiseParameters\r\n} = {}\r\n\r\nfunction registerNoises() {\r\n    registerBiomeNoises(\r\n        0,\r\n        Noises.TEMPERATURE,\r\n        Noises.VEGETATION,\r\n        Noises.CONTINENTALNESS,\r\n        Noises.EROSION\r\n    )\r\n    registerBiomeNoises(\r\n        -2,\r\n        Noises.TEMPERATURE_LARGE,\r\n        Noises.VEGETATION_LARGE,\r\n        Noises.CONTINENTALNESS_LARGE,\r\n        Noises.EROSION_LARGE\r\n    )\r\n    register(Noises.RIDGE, -7, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0)\r\n    register(Noises.SHIFT, -3, 1.0, 1.0, 1.0, 0.0)\r\n    register(Noises.AQUIFER_BARRIER, -3, 1.0)\r\n    register(Noises.AQUIFER_FLUID_LEVEL_FLOODEDNESS, -7, 1.0)\r\n    register(Noises.AQUIFER_LAVA, -1, 1.0)\r\n    register(Noises.AQUIFER_FLUID_LEVEL_SPREAD, -5, 1.0)\r\n    register(Noises.PILLAR, -7, 1.0, 1.0)\r\n    register(Noises.PILLAR_RARENESS, -8, 1.0)\r\n    register(Noises.PILLAR_THICKNESS, -8, 1.0)\r\n    register(Noises.SPAGHETTI_2, -7, 1.0)\r\n    register(Noises.SPAGHETTI_2D_ELEVATION, -8, 1.0)\r\n    register(Noises.SPAGHETTI_2D_MODULATOR, -11, 1.0)\r\n    register(Noises.SPAGHETTI_2D_THICKNESS, -11, 1.0)\r\n    register(Noises.SPAGHETTI_3D_1, -7, 1.0)\r\n    register(Noises.SPAGHETTI_3D_2, -7, 1.0)\r\n    register(Noises.SPAGHETTI_3D_RARITY, -11, 1.0)\r\n    register(Noises.SPAGHETTI_3D_THICKNESS, -8, 1.0)\r\n    register(Noises.SPAGHETTI_ROUGHNESS, -5, 1.0)\r\n    register(Noises.SPAGHETTI_ROUGHNESS_MODULATOR, -8, 1.0)\r\n    register(Noises.CAVE_ENTRANCE, -7, 0.4, 0.5, 1.0)\r\n    register(Noises.CAVE_LAYER, -8, 1.0)\r\n    register(Noises.CAVE_CHEESE, -8, 0.5, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 0.0)\r\n    register(Noises.ORE_VEININESS, -8, 1.0)\r\n    register(Noises.ORE_VEIN_A, -7, 1.0)\r\n    register(Noises.ORE_VEIN_B, -7, 1.0)\r\n    register(Noises.ORE_GAP, -5, 1.0)\r\n    register(Noises.NOODLE, -8, 1.0)\r\n    register(Noises.NOODLE_THICKNESS, -8, 1.0)\r\n    register(Noises.NOODLE_RIDGE_A, -7, 1.0)\r\n    register(Noises.NOODLE_RIDGE_B, -7, 1.0)\r\n    register(\r\n        Noises.JAGGED,\r\n        -16,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0\r\n    )\r\n    register(Noises.SURFACE, -6, 1.0, 1.0, 1.0)\r\n    register(Noises.SURFACE_SECONDARY, -6, 1.0, 1.0, 1.0)\r\n    register(Noises.CLAY_BANDS_OFFSET, -8, 1.0)\r\n    register(Noises.BADLANDS_PILLAR, -2, 1.0, 1.0, 1.0, 1.0)\r\n    register(Noises.BADLANDS_PILLAR_ROOF, -8, 1.0)\r\n    register(Noises.BADLANDS_SURFACE, -6, 1.0, 1.0, 1.0)\r\n    register(Noises.ICEBERG_PILLAR, -6, 1.0, 1.0, 1.0, 1.0)\r\n    register(Noises.ICEBERG_PILLAR_ROOF, -3, 1.0)\r\n    register(Noises.ICEBERG_SURFACE, -6, 1.0, 1.0, 1.0)\r\n    register(Noises.SWAMP, -2, 1.0)\r\n    register(Noises.CALCITE, -9, 1.0, 1.0, 1.0, 1.0)\r\n    register(Noises.GRAVEL, -8, 1.0, 1.0, 1.0, 1.0)\r\n    register(Noises.POWDER_SNOW, -6, 1.0, 1.0, 1.0, 1.0)\r\n    register(Noises.PACKED_ICE, -7, 1.0, 1.0, 1.0, 1.0)\r\n    register(Noises.ICE, -4, 1.0, 1.0, 1.0, 1.0)\r\n    register(\r\n        Noises.SOUL_SAND_LAYER,\r\n        -8,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.013333333333333334\r\n    )\r\n    register(Noises.GRAVEL_LAYER, -8, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.013333333333333334)\r\n    register(Noises.PATCH, -5, 1.0, 0.0, 0.0, 0.0, 0.0, 0.013333333333333334)\r\n    register(Noises.NETHERRACK, -3, 1.0, 0.0, 0.0, 0.35)\r\n    register(Noises.NETHER_WART, -3, 1.0, 0.0, 0.0, 0.9)\r\n    register(Noises.NETHER_STATE_SELECTOR, -4, 1.0)\r\n}\r\n\r\nfunction registerBiomeNoises(\r\n    octaveOffset: number,\r\n    temperature: Noises,\r\n    vegetation: Noises,\r\n    continentalness: Noises,\r\n    erosion: Noises\r\n) {\r\n    register(temperature, -10 + octaveOffset, 1.5, 0.0, 1.0, 0.0, 0.0, 0.0)\r\n    register(vegetation, -8 + octaveOffset, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)\r\n    register(continentalness, -9 + octaveOffset, 1.0, 1.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0)\r\n    register(erosion, -9 + octaveOffset, 1.0, 1.0, 0.0, 1.0, 1.0)\r\n}\r\n\r\nfunction register(\r\n    noise: Noises,\r\n    firstOctave: number,\r\n    firstAmplitude: number,\r\n    ...amplitudes: number[]\r\n) {\r\n    NOISES[noise] = new NoiseParameters(firstOctave, firstAmplitude, ...amplitudes)\r\n}\r\n\r\nregisterNoises()\r\n\r\nexport function Noises_instantiate(random: PositionalRandomFactory, noise: Noises): NormalNoise {\r\n    return NormalNoise.create2(random.fromHashOf(toResourceLocation(noise)), NOISES[noise])\r\n}\r\n","import { Biomes } from \"./biomes\"\r\nimport { Blocks } from \"./blocks\"\r\nimport { Noises } from \"./noise-data\"\r\n\r\nclass Context {\r\n    //\r\n}\r\n\r\nexport type SurfaceRule = (x: number, y: number, z: number) => Blocks | null\r\n\r\nexport type RuleSource = (ctx: Context) => SurfaceRule\r\n\r\nfunction makeStateRule(p_194811_: Blocks): RuleSource {\r\n    //return SurfaceRules.state(p_194811_.defaultBlockState());\r\n}\r\n\r\nexport class VerticalAnchor {\r\n    public static absolute(height: number): VerticalAnchor {}\r\n\r\n    public static aboveBottom(height: number): VerticalAnchor {}\r\n\r\n    public static belowTop(height: number): VerticalAnchor {}\r\n\r\n    public static bottom(): VerticalAnchor {}\r\n\r\n    public static top(): VerticalAnchor {}\r\n}\r\n\r\nenum CaveSurface {\r\n    CEILING,\r\n    FLOOR,\r\n}\r\n\r\nexport class SurfaceRules {\r\n    public static yBlockCheck(anchor: VerticalAnchor, p_189402_: number): ConditionSource {}\r\n    public static yStartCheck(anchor: VerticalAnchor, p_189402_: number): ConditionSource {}\r\n\r\n    public static waterBlockCheck(\r\n        offset: number,\r\n        surfaceDepthMultiplier: number\r\n    ): ConditionSource {}\r\n    public static waterStartCheck(\r\n        offset: number,\r\n        surfaceDepthMultiplier: number\r\n    ): ConditionSource {}\r\n\r\n    public static hole(): ConditionSource {}\r\n    public static abovePreliminarySurface(): ConditionSource {}\r\n    public static temperature(): ConditionSource {}\r\n    public static steep(): ConditionSource {}\r\n\r\n    public static isBiome(...biomes: Biomes[]): ConditionSource {}\r\n\r\n    public static ifTrue(cond: ConditionSource, p_189396_: RuleSource): RuleSource {}\r\n\r\n    public static stoneDepthCheck(\r\n        p_189386_: number,\r\n        p_189387_: boolean,\r\n        p_189388_: boolean,\r\n        p_189389_: CaveSurface\r\n    ): ConditionSource {}\r\n\r\n    public static readonly ON_FLOOR = SurfaceRules.stoneDepthCheck(\r\n        0,\r\n        false,\r\n        false,\r\n        CaveSurface.FLOOR\r\n    )\r\n    public static readonly UNDER_FLOOR = SurfaceRules.stoneDepthCheck(\r\n        0,\r\n        true,\r\n        false,\r\n        CaveSurface.FLOOR\r\n    )\r\n    public static readonly ON_CEILING = SurfaceRules.stoneDepthCheck(\r\n        0,\r\n        false,\r\n        false,\r\n        CaveSurface.CEILING\r\n    )\r\n    public static readonly UNDER_CEILING = SurfaceRules.stoneDepthCheck(\r\n        0,\r\n        true,\r\n        false,\r\n        CaveSurface.CEILING\r\n    )\r\n\r\n    static sequence(...rules: RuleSource[]): RuleSource {}\r\n\r\n    public static noiseCondition(\r\n        noise: Noises,\r\n        minNoiseValue: number,\r\n        maxNoiseValue = Number.MAX_VALUE\r\n    ): ConditionSource {}\r\n\r\n    static not(cond: ConditionSource): ConditionSource {}\r\n\r\n    public static bandlands(): RuleSource {}\r\n\r\n    public static verticalGradient(\r\n        p_189404_: string,\r\n        p_189405_: VerticalAnchor,\r\n        p_189406_: VerticalAnchor\r\n    ): ConditionSource {}\r\n\r\n    public static surfaceNoiseAbove(p_194809_: number): ConditionSource {}\r\n}\r\n\r\nexport type Condition = () => boolean\r\nexport type ConditionSource = (ctx: Context) => Condition\r\n\r\nconst AIR = makeStateRule(Blocks.AIR)\r\nconst BEDROCK = makeStateRule(Blocks.BEDROCK)\r\nconst WHITE_TERRACOTTA = makeStateRule(Blocks.WHITE_TERRACOTTA)\r\nconst ORANGE_TERRACOTTA = makeStateRule(Blocks.ORANGE_TERRACOTTA)\r\nconst TERRACOTTA = makeStateRule(Blocks.TERRACOTTA)\r\nconst RED_SAND = makeStateRule(Blocks.RED_SAND)\r\nconst RED_SANDSTONE = makeStateRule(Blocks.RED_SANDSTONE)\r\nconst STONE = makeStateRule(Blocks.STONE)\r\nconst DEEPSLATE = makeStateRule(Blocks.DEEPSLATE)\r\nconst DIRT = makeStateRule(Blocks.DIRT)\r\nconst PODZOL = makeStateRule(Blocks.PODZOL)\r\nconst COARSE_DIRT = makeStateRule(Blocks.COARSE_DIRT)\r\nconst MYCELIUM = makeStateRule(Blocks.MYCELIUM)\r\nconst GRASS_BLOCK = makeStateRule(Blocks.GRASS_BLOCK)\r\nconst CALCITE = makeStateRule(Blocks.CALCITE)\r\nconst GRAVEL = makeStateRule(Blocks.GRAVEL)\r\nconst SAND = makeStateRule(Blocks.SAND)\r\nconst SANDSTONE = makeStateRule(Blocks.SANDSTONE)\r\nconst PACKED_ICE = makeStateRule(Blocks.PACKED_ICE)\r\nconst SNOW_BLOCK = makeStateRule(Blocks.SNOW_BLOCK)\r\nconst POWDER_SNOW = makeStateRule(Blocks.POWDER_SNOW)\r\nconst ICE = makeStateRule(Blocks.ICE)\r\nconst WATER = makeStateRule(Blocks.WATER)\r\n\r\nexport class SurfaceRuleData {\r\n    public static overworld(): RuleSource {\r\n        return SurfaceRuleData.overworldLike(true, false, true)\r\n    }\r\n\r\n    public static overworldLike(\r\n        p_198381_: boolean,\r\n        haveBedrockRoof: boolean,\r\n        haveBedrockFloor: boolean\r\n    ): RuleSource {\r\n        const surfacerules$conditionsource = SurfaceRules.yBlockCheck(\r\n            VerticalAnchor.absolute(97),\r\n            2\r\n        )\r\n        const surfacerules$conditionsource1 = SurfaceRules.yBlockCheck(\r\n            VerticalAnchor.absolute(256),\r\n            0\r\n        )\r\n        const surfacerules$conditionsource2 = SurfaceRules.yStartCheck(\r\n            VerticalAnchor.absolute(63),\r\n            -1\r\n        )\r\n        const surfacerules$conditionsource3 = SurfaceRules.yStartCheck(\r\n            VerticalAnchor.absolute(74),\r\n            1\r\n        )\r\n        const surfacerules$conditionsource4 = SurfaceRules.yBlockCheck(\r\n            VerticalAnchor.absolute(62),\r\n            0\r\n        )\r\n        const surfacerules$conditionsource5 = SurfaceRules.yBlockCheck(\r\n            VerticalAnchor.absolute(63),\r\n            0\r\n        )\r\n        const isWaterAboveTheBlock = SurfaceRules.waterBlockCheck(-1, 0)\r\n        const isWater = SurfaceRules.waterBlockCheck(0, 0)\r\n        const surfacerules$conditionsource8 = SurfaceRules.waterStartCheck(-6, -1)\r\n        const isHole = SurfaceRules.hole()\r\n        const isFrozenOcean = SurfaceRules.isBiome(Biomes.FROZEN_OCEAN, Biomes.DEEP_FROZEN_OCEAN)\r\n        const isSteep = SurfaceRules.steep()\r\n        const replaceGrassWithDirtIfWaterIsAbove = SurfaceRules.sequence(\r\n            SurfaceRules.ifTrue(isWaterAboveTheBlock, GRASS_BLOCK),\r\n            DIRT\r\n        )\r\n        const replaceSandstoneWithSandOnCeiling = SurfaceRules.sequence(\r\n            SurfaceRules.ifTrue(SurfaceRules.ON_CEILING, SANDSTONE),\r\n            SAND\r\n        )\r\n        const replaceStoneWithGravelOnCeiling = SurfaceRules.sequence(\r\n            SurfaceRules.ifTrue(SurfaceRules.ON_CEILING, STONE),\r\n            GRAVEL\r\n        )\r\n        const isWarmOceanDesertOrBeach = SurfaceRules.isBiome(\r\n            Biomes.WARM_OCEAN,\r\n            Biomes.DESERT,\r\n            Biomes.BEACH,\r\n            Biomes.SNOWY_BEACH\r\n        )\r\n        const ceilingRules = SurfaceRules.sequence(\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.STONY_PEAKS),\r\n                SurfaceRules.sequence(\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.noiseCondition(Noises.CALCITE, -0.0125, 0.0125),\r\n                        CALCITE\r\n                    ),\r\n                    STONE\r\n                )\r\n            ),\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.STONY_SHORE),\r\n                SurfaceRules.sequence(\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.noiseCondition(Noises.GRAVEL, -0.05, 0.05),\r\n                        replaceStoneWithGravelOnCeiling\r\n                    ),\r\n                    STONE\r\n                )\r\n            ),\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.WINDSWEPT_HILLS),\r\n                SurfaceRules.ifTrue(SurfaceRules.surfaceNoiseAbove(1.0), STONE)\r\n            ),\r\n            SurfaceRules.ifTrue(isWarmOceanDesertOrBeach, replaceSandstoneWithSandOnCeiling),\r\n            SurfaceRules.ifTrue(SurfaceRules.isBiome(Biomes.DRIPSTONE_CAVES), STONE)\r\n        )\r\n        const powderSnow = SurfaceRules.ifTrue(\r\n            SurfaceRules.noiseCondition(Noises.POWDER_SNOW, 0.45, 0.58),\r\n            POWDER_SNOW\r\n        )\r\n        const anotherPowderSnow = SurfaceRules.ifTrue(\r\n            SurfaceRules.noiseCondition(Noises.POWDER_SNOW, 0.35, 0.6),\r\n            POWDER_SNOW\r\n        )\r\n        const surfacerules$rulesource6 = SurfaceRules.sequence(\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.FROZEN_PEAKS),\r\n                SurfaceRules.sequence(\r\n                    SurfaceRules.ifTrue(isSteep, PACKED_ICE),\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.noiseCondition(Noises.PACKED_ICE, -0.5, 0.2),\r\n                        PACKED_ICE\r\n                    ),\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.noiseCondition(Noises.ICE, -0.0625, 0.025),\r\n                        ICE\r\n                    ),\r\n                    SNOW_BLOCK\r\n                )\r\n            ),\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.SNOWY_SLOPES),\r\n                SurfaceRules.sequence(SurfaceRules.ifTrue(isSteep, STONE), powderSnow, SNOW_BLOCK)\r\n            ),\r\n            SurfaceRules.ifTrue(SurfaceRules.isBiome(Biomes.JAGGED_PEAKS), STONE),\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.GROVE),\r\n                SurfaceRules.sequence(powderSnow, DIRT)\r\n            ),\r\n            ceilingRules,\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.WINDSWEPT_SAVANNA),\r\n                SurfaceRules.ifTrue(SurfaceRules.surfaceNoiseAbove(1.75), STONE)\r\n            ),\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.WINDSWEPT_GRAVELLY_HILLS),\r\n                SurfaceRules.sequence(\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.surfaceNoiseAbove(2.0),\r\n                        replaceStoneWithGravelOnCeiling\r\n                    ),\r\n                    SurfaceRules.ifTrue(SurfaceRules.surfaceNoiseAbove(1.0), STONE),\r\n                    SurfaceRules.ifTrue(SurfaceRules.surfaceNoiseAbove(-1.0), DIRT),\r\n                    replaceStoneWithGravelOnCeiling\r\n                )\r\n            ),\r\n            DIRT\r\n        )\r\n        const surfacerules$rulesource7 = SurfaceRules.sequence(\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.FROZEN_PEAKS),\r\n                SurfaceRules.sequence(\r\n                    SurfaceRules.ifTrue(isSteep, PACKED_ICE),\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.noiseCondition(Noises.PACKED_ICE, 0.0, 0.2),\r\n                        PACKED_ICE\r\n                    ),\r\n                    SurfaceRules.ifTrue(SurfaceRules.noiseCondition(Noises.ICE, 0.0, 0.025), ICE),\r\n                    SNOW_BLOCK\r\n                )\r\n            ),\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.SNOWY_SLOPES),\r\n                SurfaceRules.sequence(\r\n                    SurfaceRules.ifTrue(isSteep, STONE),\r\n                    anotherPowderSnow,\r\n                    SNOW_BLOCK\r\n                )\r\n            ),\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.JAGGED_PEAKS),\r\n                SurfaceRules.sequence(SurfaceRules.ifTrue(isSteep, STONE), SNOW_BLOCK)\r\n            ),\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.GROVE),\r\n                SurfaceRules.sequence(anotherPowderSnow, SNOW_BLOCK)\r\n            ),\r\n            ceilingRules,\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.WINDSWEPT_SAVANNA),\r\n                SurfaceRules.sequence(\r\n                    SurfaceRules.ifTrue(SurfaceRules.surfaceNoiseAbove(1.75), STONE),\r\n                    SurfaceRules.ifTrue(SurfaceRules.surfaceNoiseAbove(-0.5), COARSE_DIRT)\r\n                )\r\n            ),\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.WINDSWEPT_GRAVELLY_HILLS),\r\n                SurfaceRules.sequence(\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.surfaceNoiseAbove(2.0),\r\n                        replaceStoneWithGravelOnCeiling\r\n                    ),\r\n                    SurfaceRules.ifTrue(SurfaceRules.surfaceNoiseAbove(1.0), STONE),\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.surfaceNoiseAbove(-1.0),\r\n                        replaceGrassWithDirtIfWaterIsAbove\r\n                    ),\r\n                    replaceStoneWithGravelOnCeiling\r\n                )\r\n            ),\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(Biomes.OLD_GROWTH_PINE_TAIGA, Biomes.OLD_GROWTH_SPRUCE_TAIGA),\r\n                SurfaceRules.sequence(\r\n                    SurfaceRules.ifTrue(SurfaceRules.surfaceNoiseAbove(1.75), COARSE_DIRT),\r\n                    SurfaceRules.ifTrue(SurfaceRules.surfaceNoiseAbove(-0.95), PODZOL)\r\n                )\r\n            ),\r\n            SurfaceRules.ifTrue(SurfaceRules.isBiome(Biomes.ICE_SPIKES), SNOW_BLOCK),\r\n            SurfaceRules.ifTrue(SurfaceRules.isBiome(Biomes.MUSHROOM_FIELDS), MYCELIUM),\r\n            replaceGrassWithDirtIfWaterIsAbove\r\n        )\r\n        const surfacerules$conditionsource13 = SurfaceRules.noiseCondition(\r\n            Noises.SURFACE,\r\n            -0.909,\r\n            -0.5454\r\n        )\r\n        const surfacerules$conditionsource14 = SurfaceRules.noiseCondition(\r\n            Noises.SURFACE,\r\n            -0.1818,\r\n            0.1818\r\n        )\r\n        const surfacerules$conditionsource15 = SurfaceRules.noiseCondition(\r\n            Noises.SURFACE,\r\n            0.5454,\r\n            0.909\r\n        )\r\n        const surfacerules$rulesource8 = SurfaceRules.sequence(\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.ON_FLOOR,\r\n                SurfaceRules.sequence(\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.isBiome(Biomes.WOODED_BADLANDS),\r\n                        SurfaceRules.ifTrue(\r\n                            surfacerules$conditionsource,\r\n                            SurfaceRules.sequence(\r\n                                SurfaceRules.ifTrue(surfacerules$conditionsource13, COARSE_DIRT),\r\n                                SurfaceRules.ifTrue(surfacerules$conditionsource14, COARSE_DIRT),\r\n                                SurfaceRules.ifTrue(surfacerules$conditionsource15, COARSE_DIRT),\r\n                                replaceGrassWithDirtIfWaterIsAbove\r\n                            )\r\n                        )\r\n                    ),\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.isBiome(Biomes.SWAMP),\r\n                        SurfaceRules.ifTrue(\r\n                            surfacerules$conditionsource4,\r\n                            SurfaceRules.ifTrue(\r\n                                SurfaceRules.not(surfacerules$conditionsource5),\r\n                                SurfaceRules.ifTrue(\r\n                                    SurfaceRules.noiseCondition(Noises.SWAMP, 0.0),\r\n                                    WATER\r\n                                )\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            ),\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.isBiome(\r\n                    Biomes.BADLANDS,\r\n                    Biomes.ERODED_BADLANDS,\r\n                    Biomes.WOODED_BADLANDS\r\n                ),\r\n                SurfaceRules.sequence(\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.ON_FLOOR,\r\n                        SurfaceRules.sequence(\r\n                            SurfaceRules.ifTrue(surfacerules$conditionsource1, ORANGE_TERRACOTTA),\r\n                            SurfaceRules.ifTrue(\r\n                                surfacerules$conditionsource3,\r\n                                SurfaceRules.sequence(\r\n                                    SurfaceRules.ifTrue(surfacerules$conditionsource13, TERRACOTTA),\r\n                                    SurfaceRules.ifTrue(surfacerules$conditionsource14, TERRACOTTA),\r\n                                    SurfaceRules.ifTrue(surfacerules$conditionsource15, TERRACOTTA),\r\n                                    SurfaceRules.bandlands()\r\n                                )\r\n                            ),\r\n                            SurfaceRules.ifTrue(\r\n                                isWaterAboveTheBlock,\r\n                                SurfaceRules.sequence(\r\n                                    SurfaceRules.ifTrue(SurfaceRules.ON_CEILING, RED_SANDSTONE),\r\n                                    RED_SAND\r\n                                )\r\n                            ),\r\n                            SurfaceRules.ifTrue(SurfaceRules.not(isHole), ORANGE_TERRACOTTA),\r\n                            SurfaceRules.ifTrue(surfacerules$conditionsource8, WHITE_TERRACOTTA),\r\n                            replaceStoneWithGravelOnCeiling\r\n                        )\r\n                    ),\r\n                    SurfaceRules.ifTrue(\r\n                        surfacerules$conditionsource2,\r\n                        SurfaceRules.sequence(\r\n                            SurfaceRules.ifTrue(\r\n                                surfacerules$conditionsource5,\r\n                                SurfaceRules.ifTrue(\r\n                                    SurfaceRules.not(surfacerules$conditionsource3),\r\n                                    ORANGE_TERRACOTTA\r\n                                )\r\n                            ),\r\n                            SurfaceRules.bandlands()\r\n                        )\r\n                    ),\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.UNDER_FLOOR,\r\n                        SurfaceRules.ifTrue(surfacerules$conditionsource8, WHITE_TERRACOTTA)\r\n                    )\r\n                )\r\n            ),\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.ON_FLOOR,\r\n                SurfaceRules.ifTrue(\r\n                    isWaterAboveTheBlock,\r\n                    SurfaceRules.sequence(\r\n                        SurfaceRules.ifTrue(\r\n                            isFrozenOcean,\r\n                            SurfaceRules.ifTrue(\r\n                                isHole,\r\n                                SurfaceRules.sequence(\r\n                                    SurfaceRules.ifTrue(isWater, AIR),\r\n                                    SurfaceRules.ifTrue(SurfaceRules.temperature(), ICE),\r\n                                    WATER\r\n                                )\r\n                            )\r\n                        ),\r\n                        surfacerules$rulesource7\r\n                    )\r\n                )\r\n            ),\r\n            SurfaceRules.ifTrue(\r\n                surfacerules$conditionsource8,\r\n                SurfaceRules.sequence(\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.ON_FLOOR,\r\n                        SurfaceRules.ifTrue(isFrozenOcean, SurfaceRules.ifTrue(isHole, WATER))\r\n                    ),\r\n                    SurfaceRules.ifTrue(SurfaceRules.UNDER_FLOOR, surfacerules$rulesource6),\r\n                    SurfaceRules.ifTrue(\r\n                        isWarmOceanDesertOrBeach,\r\n                        SurfaceRules.ifTrue(\r\n                            SurfaceRules.stoneDepthCheck(0, true, true, CaveSurface.FLOOR),\r\n                            SANDSTONE\r\n                        )\r\n                    )\r\n                )\r\n            ),\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.ON_FLOOR,\r\n                SurfaceRules.sequence(\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.isBiome(Biomes.FROZEN_PEAKS, Biomes.JAGGED_PEAKS),\r\n                        STONE\r\n                    ),\r\n                    SurfaceRules.ifTrue(\r\n                        SurfaceRules.isBiome(\r\n                            Biomes.WARM_OCEAN,\r\n                            Biomes.LUKEWARM_OCEAN,\r\n                            Biomes.DEEP_LUKEWARM_OCEAN\r\n                        ),\r\n                        replaceSandstoneWithSandOnCeiling\r\n                    ),\r\n                    replaceStoneWithGravelOnCeiling\r\n                )\r\n            )\r\n        )\r\n        const builder = [] as RuleSource[]\r\n        if (haveBedrockRoof) {\r\n            builder.push(\r\n                SurfaceRules.ifTrue(\r\n                    SurfaceRules.not(\r\n                        SurfaceRules.verticalGradient(\r\n                            \"bedrock_roof\",\r\n                            VerticalAnchor.belowTop(5),\r\n                            VerticalAnchor.top()\r\n                        )\r\n                    ),\r\n                    BEDROCK\r\n                )\r\n            )\r\n        }\r\n\r\n        if (haveBedrockFloor) {\r\n            builder.push(\r\n                SurfaceRules.ifTrue(\r\n                    SurfaceRules.verticalGradient(\r\n                        \"bedrock_floor\",\r\n                        VerticalAnchor.bottom(),\r\n                        VerticalAnchor.aboveBottom(5)\r\n                    ),\r\n                    BEDROCK\r\n                )\r\n            )\r\n        }\r\n\r\n        const surfacerules$rulesource9 = SurfaceRules.ifTrue(\r\n            SurfaceRules.abovePreliminarySurface(),\r\n            surfacerules$rulesource8\r\n        )\r\n        builder.push(p_198381_ ? surfacerules$rulesource9 : surfacerules$rulesource8)\r\n        builder.push(\r\n            SurfaceRules.ifTrue(\r\n                SurfaceRules.verticalGradient(\r\n                    \"deepslate\",\r\n                    VerticalAnchor.absolute(0),\r\n                    VerticalAnchor.absolute(8)\r\n                ),\r\n                DEEPSLATE\r\n            )\r\n        )\r\n        return SurfaceRules.sequence(...builder)\r\n    }\r\n}\r\n","import * as Mth from \"./mth\"\r\n\r\nexport type ToFloatFunction<C> = (p: C) => number\r\n\r\nexport abstract class CubicSpline<C> {\r\n    abstract apply(value: C): number\r\n\r\n    static constant(value: number): Constant {\r\n        return new Constant(value)\r\n    }\r\n\r\n    static builder<C>(\r\n        coordinate: ToFloatFunction<C>,\r\n        valueTransformer?: ToFloatFunction<number>\r\n    ): CubicSplineBuilder<C> {\r\n        return new CubicSplineBuilder<C>(coordinate, valueTransformer)\r\n    }\r\n}\r\n\r\nclass CubicSplineBuilder<C> {\r\n    private readonly valueTransformer: ToFloatFunction<number>\r\n\r\n    private readonly locations: number[] = []\r\n    private readonly values: CubicSpline<C>[] = []\r\n    private readonly derivatives: number[] = []\r\n\r\n    constructor(\r\n        private readonly coordinate: ToFloatFunction<C>,\r\n        valueTransformer?: ToFloatFunction<number>\r\n    ) {\r\n        this.valueTransformer = valueTransformer ? valueTransformer : value => value\r\n    }\r\n\r\n    addPoint(t: number, value: CubicSpline<C> | number, derivative: number): CubicSplineBuilder<C> {\r\n        if (typeof value === \"number\") {\r\n            value = new Constant(this.valueTransformer(value))\r\n        }\r\n\r\n        this.locations.push(t)\r\n        this.values.push(value)\r\n        this.derivatives.push(derivative)\r\n\r\n        return this\r\n    }\r\n\r\n    build(): CubicSpline<C> {\r\n        return new Multipoint<C>(\r\n            this.coordinate,\r\n            this.locations,\r\n            this.values.slice(),\r\n            this.derivatives\r\n        )\r\n    }\r\n}\r\n\r\nclass Constant extends CubicSpline<any> {\r\n    constructor(private readonly value: number) {\r\n        super()\r\n    }\r\n\r\n    apply(): number {\r\n        return this.value\r\n    }\r\n}\r\n\r\nclass Multipoint<C> extends CubicSpline<C> {\r\n    constructor(\r\n        private readonly coordinate: ToFloatFunction<C>,\r\n        private readonly locations: number[],\r\n        private readonly values: CubicSpline<C>[],\r\n        private readonly derivatives: number[]\r\n    ) {\r\n        super()\r\n    }\r\n\r\n    apply(value: C): number {\r\n        const loc = this.coordinate(value)\r\n        const index =\r\n            Mth.binarySearch(0, this.locations.length, index => loc < this.locations[index]) - 1\r\n\r\n        const j = this.locations.length - 1\r\n        if (index < 0) {\r\n            return this.values[0].apply(value) + this.derivatives[0] * (loc - this.locations[0])\r\n        } else if (index == j) {\r\n            return this.values[j].apply(value) + this.derivatives[j] * (loc - this.locations[j])\r\n        } else {\r\n            const prevLoc = this.locations[index]\r\n            const nextLoc = this.locations[index + 1]\r\n\r\n            const t = (loc - prevLoc) / (nextLoc - prevLoc)\r\n\r\n            const tofloatfunction = this.values[index]\r\n            const tofloatfunction1 = this.values[index + 1]\r\n\r\n            const d0 = this.derivatives[index]\r\n            const d1 = this.derivatives[index + 1]\r\n\r\n            const v0 = tofloatfunction.apply(value)\r\n            const v1 = tofloatfunction1.apply(value)\r\n\r\n            const v2 = d0 * (nextLoc - prevLoc) - (v1 - v0)\r\n            const v3 = -d1 * (nextLoc - prevLoc) + (v1 - v0)\r\n\r\n            return Mth.lerp(t, v0, v1) + t * (1 - t) * Mth.lerp(t, v2, v3)\r\n        }\r\n    }\r\n}\r\n","import { CubicSpline, ToFloatFunction } from \"./cubic-spline\"\r\nimport * as Mth from \"./mth\"\r\n\r\nclass Point {\r\n    constructor(\r\n        readonly continents: number,\r\n        readonly erosion: number,\r\n        readonly ridges: number,\r\n        readonly weirdness: number\r\n    ) {}\r\n\r\n    static CONTINENTS(value: Point) {\r\n        return value.continents\r\n    }\r\n    static EROSION(value: Point) {\r\n        return value.erosion\r\n    }\r\n    static RIDGES(value: Point) {\r\n        return value.ridges\r\n    }\r\n    static WEIRDNESS(value: Point) {\r\n        return value.weirdness\r\n    }\r\n}\r\n\r\nconst NO_TRANSFORM = v => v\r\n\r\nexport class TerrainShaper {\r\n    constructor(\r\n        private readonly offsetSampler: CubicSpline<Point>,\r\n        private readonly factorSampler: CubicSpline<Point>,\r\n        private readonly jaggednessSampler: CubicSpline<Point>\r\n    ) {\r\n        //\r\n    }\r\n\r\n    private static getAmplifiedOffset(value: number): number {\r\n        return value < 0 ? value : value * 2\r\n    }\r\n\r\n    private static getAmplifiedFactor(value: number): number {\r\n        return 1.25 - 6.25 / (value + 5)\r\n    }\r\n\r\n    private static getAmplifiedJaggedness(value: number): number {\r\n        return value * 2\r\n    }\r\n\r\n    static overworld(isAmplified: boolean): TerrainShaper {\r\n        const offsetTransformer = isAmplified ? TerrainShaper.getAmplifiedOffset : NO_TRANSFORM\r\n        const factorTransformer = isAmplified ? TerrainShaper.getAmplifiedFactor : NO_TRANSFORM\r\n        const jaggednessTransformer = isAmplified\r\n            ? TerrainShaper.getAmplifiedJaggedness\r\n            : NO_TRANSFORM\r\n        const erosionOffset1 = TerrainShaper.buildErosionOffsetSpline(\r\n            -0.15,\r\n            0.0,\r\n            0.0,\r\n            0.1,\r\n            0.0,\r\n            -0.03,\r\n            false,\r\n            false,\r\n            offsetTransformer\r\n        )\r\n        const erosionOffset2 = TerrainShaper.buildErosionOffsetSpline(\r\n            -0.1,\r\n            0.03,\r\n            0.1,\r\n            0.1,\r\n            0.01,\r\n            -0.03,\r\n            false,\r\n            false,\r\n            offsetTransformer\r\n        )\r\n        const erosionOffset3 = TerrainShaper.buildErosionOffsetSpline(\r\n            -0.1,\r\n            0.03,\r\n            0.1,\r\n            0.7,\r\n            0.01,\r\n            -0.03,\r\n            true,\r\n            true,\r\n            offsetTransformer\r\n        )\r\n        const erosionOffset4 = TerrainShaper.buildErosionOffsetSpline(\r\n            -0.05,\r\n            0.03,\r\n            0.1,\r\n            1.0,\r\n            0.01,\r\n            0.01,\r\n            true,\r\n            true,\r\n            offsetTransformer\r\n        )\r\n        const offsetSampler = CubicSpline.builder(Point.CONTINENTS, offsetTransformer)\r\n            .addPoint(-1.1, 0.044, 0.0)\r\n            .addPoint(-1.02, -0.2222, 0.0)\r\n            .addPoint(-0.51, -0.2222, 0.0)\r\n            .addPoint(-0.44, -0.12, 0.0)\r\n            .addPoint(-0.18, -0.12, 0.0)\r\n            .addPoint(-0.16, erosionOffset1, 0.0)\r\n            .addPoint(-0.15, erosionOffset1, 0.0)\r\n            .addPoint(-0.1, erosionOffset2, 0.0)\r\n            .addPoint(0.25, erosionOffset3, 0.0)\r\n            .addPoint(1.0, erosionOffset4, 0.0)\r\n            .build()\r\n        const factorSampler = CubicSpline.builder(Point.CONTINENTS, NO_TRANSFORM)\r\n            .addPoint(-0.19, 3.95, 0.0)\r\n            .addPoint(-0.15, TerrainShaper.getErosionFactor(6.25, true, NO_TRANSFORM), 0.0)\r\n            .addPoint(-0.1, TerrainShaper.getErosionFactor(5.47, true, factorTransformer), 0.0)\r\n            .addPoint(0.03, TerrainShaper.getErosionFactor(5.08, true, factorTransformer), 0.0)\r\n            .addPoint(0.06, TerrainShaper.getErosionFactor(4.69, false, factorTransformer), 0.0)\r\n            .build()\r\n        const jaggednessSampler = CubicSpline.builder(Point.CONTINENTS, jaggednessTransformer)\r\n            .addPoint(-0.11, 0.0, 0.0)\r\n            .addPoint(\r\n                0.03,\r\n                TerrainShaper.buildErosionJaggednessSpline(\r\n                    1.0,\r\n                    0.5,\r\n                    0.0,\r\n                    0.0,\r\n                    jaggednessTransformer\r\n                ),\r\n                0.0\r\n            )\r\n            .addPoint(\r\n                0.65,\r\n                TerrainShaper.buildErosionJaggednessSpline(\r\n                    1.0,\r\n                    1.0,\r\n                    1.0,\r\n                    0.0,\r\n                    jaggednessTransformer\r\n                ),\r\n                0.0\r\n            )\r\n            .build()\r\n        return new TerrainShaper(offsetSampler, factorSampler, jaggednessSampler)\r\n    }\r\n\r\n    public offset(value: Point): number {\r\n        return this.offsetSampler.apply(value) + -0.50375\r\n    }\r\n\r\n    public factor(value: Point): number {\r\n        return this.factorSampler.apply(value)\r\n    }\r\n\r\n    public jaggedness(value: Point): number {\r\n        return this.jaggednessSampler.apply(value)\r\n    }\r\n\r\n    public makePoint(continents: number, erosion: number, weirdness: number): Point {\r\n        return new Point(continents, erosion, TerrainShaper.peaksAndValleys(weirdness), weirdness)\r\n    }\r\n\r\n    public static peaksAndValleys(weirdness: number): number {\r\n        return -(Math.abs(Math.abs(weirdness) - 0.6666667) - 0.33333334) * 3.0\r\n    }\r\n\r\n    private static mountainContinentalness(x: number, y: number, z: number): number {\r\n        const f2 = 1.0 - (1.0 - y) * 0.5\r\n        const f3 = 0.5 * (1.0 - y)\r\n        const f4 = (x + 1.17) * 0.46082947\r\n        const f5 = f4 * f2 - f3\r\n        return x < z ? Math.max(f5, -0.2222) : Math.max(f5, 0.0)\r\n    }\r\n\r\n    private static calculateMountainRidgeZeroContinentalnessPoint(p_187344_: number): number {\r\n        const f2 = 1.0 - (1.0 - p_187344_) * 0.5\r\n        const f3 = 0.5 * (1.0 - p_187344_)\r\n        return f3 / (0.46082947 * f2) - 1.17\r\n    }\r\n\r\n    private static calculateSlope(\r\n        p_187272_: number,\r\n        p_187273_: number,\r\n        p_187274_: number,\r\n        p_187275_: number\r\n    ): number {\r\n        return (p_187273_ - p_187272_) / (p_187275_ - p_187274_)\r\n    }\r\n\r\n    private static buildMountainRidgeSplineWithPoints(\r\n        p_187331_: number,\r\n        p_187332_: boolean,\r\n        transformer: ToFloatFunction<number>\r\n    ): CubicSpline<Point> {\r\n        const builder = CubicSpline.builder(Point.RIDGES, transformer)\r\n        const f2 = TerrainShaper.mountainContinentalness(-1.0, p_187331_, -0.7)\r\n        const f4 = TerrainShaper.mountainContinentalness(1.0, p_187331_, -0.7)\r\n        const f5 = TerrainShaper.calculateMountainRidgeZeroContinentalnessPoint(p_187331_)\r\n        if (-0.65 < f5 && f5 < 1.0) {\r\n            const f14 = TerrainShaper.mountainContinentalness(-0.65, p_187331_, -0.7)\r\n            const f9 = TerrainShaper.mountainContinentalness(-0.75, p_187331_, -0.7)\r\n            const f10 = TerrainShaper.calculateSlope(f2, f9, -1.0, -0.75)\r\n            builder.addPoint(-1.0, f2, f10)\r\n            builder.addPoint(-0.75, f9, 0.0)\r\n            builder.addPoint(-0.65, f14, 0.0)\r\n            const f11 = TerrainShaper.mountainContinentalness(f5, p_187331_, -0.7)\r\n            const f12 = TerrainShaper.calculateSlope(f11, f4, f5, 1.0)\r\n            builder.addPoint(f5 - 0.01, f11, 0.0)\r\n            builder.addPoint(f5, f11, f12)\r\n            builder.addPoint(1.0, f4, f12)\r\n        } else {\r\n            const f7 = TerrainShaper.calculateSlope(f2, f4, -1.0, 1.0)\r\n            if (p_187332_) {\r\n                builder.addPoint(-1.0, Math.max(0.2, f2), 0.0)\r\n                builder.addPoint(0.0, Mth.lerp(0.5, f2, f4), f7)\r\n            } else {\r\n                builder.addPoint(-1.0, f2, f7)\r\n            }\r\n\r\n            builder.addPoint(1.0, f4, f7)\r\n        }\r\n\r\n        return builder.build()\r\n    }\r\n\r\n    private static buildErosionOffsetSpline(\r\n        p_187285_: number,\r\n        p_187286_: number,\r\n        p_187287_: number,\r\n        p_187288_: number,\r\n        p_187289_: number,\r\n        p_187290_: number,\r\n        p_187291_: boolean,\r\n        p_187292_: boolean,\r\n        transformer: ToFloatFunction<number>\r\n    ): CubicSpline<Point> {\r\n        const cubicspline = TerrainShaper.buildMountainRidgeSplineWithPoints(\r\n            Mth.lerp(p_187288_, 0.6, 1.5),\r\n            p_187292_,\r\n            transformer\r\n        )\r\n        const cubicspline1 = TerrainShaper.buildMountainRidgeSplineWithPoints(\r\n            Mth.lerp(p_187288_, 0.6, 1.0),\r\n            p_187292_,\r\n            transformer\r\n        )\r\n        const cubicspline2 = TerrainShaper.buildMountainRidgeSplineWithPoints(\r\n            p_187288_,\r\n            p_187292_,\r\n            transformer\r\n        )\r\n        const cubicspline3 = TerrainShaper.ridgeSpline(\r\n            p_187285_ - 0.15,\r\n            0.5 * p_187288_,\r\n            Mth.lerp(0.5, 0.5, 0.5) * p_187288_,\r\n            0.5 * p_187288_,\r\n            0.6 * p_187288_,\r\n            0.5,\r\n            transformer\r\n        )\r\n        const cubicspline4 = TerrainShaper.ridgeSpline(\r\n            p_187285_,\r\n            p_187289_ * p_187288_,\r\n            p_187286_ * p_187288_,\r\n            0.5 * p_187288_,\r\n            0.6 * p_187288_,\r\n            0.5,\r\n            transformer\r\n        )\r\n        const cubicspline5 = TerrainShaper.ridgeSpline(\r\n            p_187285_,\r\n            p_187289_,\r\n            p_187289_,\r\n            p_187286_,\r\n            p_187287_,\r\n            0.5,\r\n            transformer\r\n        )\r\n        const cubicspline6 = TerrainShaper.ridgeSpline(\r\n            p_187285_,\r\n            p_187289_,\r\n            p_187289_,\r\n            p_187286_,\r\n            p_187287_,\r\n            0.5,\r\n            transformer\r\n        )\r\n        const cubicspline7 = CubicSpline.builder(Point.RIDGES, transformer)\r\n            .addPoint(-1.0, p_187285_, 0.0)\r\n            .addPoint(-0.4, cubicspline5, 0.0)\r\n            .addPoint(0.0, p_187287_ + 0.07, 0.0)\r\n            .build()\r\n        const cubicspline8 = TerrainShaper.ridgeSpline(\r\n            -0.02,\r\n            p_187290_,\r\n            p_187290_,\r\n            p_187286_,\r\n            p_187287_,\r\n            0.0,\r\n            transformer\r\n        )\r\n        const builder = CubicSpline.builder(Point.EROSION, transformer)\r\n            .addPoint(-0.85, cubicspline, 0.0)\r\n            .addPoint(-0.7, cubicspline1, 0.0)\r\n            .addPoint(-0.4, cubicspline2, 0.0)\r\n            .addPoint(-0.35, cubicspline3, 0.0)\r\n            .addPoint(-0.1, cubicspline4, 0.0)\r\n            .addPoint(0.2, cubicspline5, 0.0)\r\n        if (p_187291_) {\r\n            builder\r\n                .addPoint(0.4, cubicspline6, 0.0)\r\n                .addPoint(0.45, cubicspline7, 0.0)\r\n                .addPoint(0.55, cubicspline7, 0.0)\r\n                .addPoint(0.58, cubicspline6, 0.0)\r\n        }\r\n\r\n        builder.addPoint(0.7, cubicspline8, 0.0)\r\n        return builder.build()\r\n    }\r\n\r\n    private static getErosionFactor(\r\n        p_187308_: number,\r\n        p_187309_: boolean,\r\n        transformer: ToFloatFunction<number>\r\n    ): CubicSpline<Point> {\r\n        const cubicspline = CubicSpline.builder(Point.WEIRDNESS, transformer)\r\n            .addPoint(-0.2, 6.3, 0.0)\r\n            .addPoint(0.2, p_187308_, 0.0)\r\n            .build()\r\n        const builder = CubicSpline.builder(Point.EROSION, transformer)\r\n            .addPoint(-0.6, cubicspline, 0.0)\r\n            .addPoint(\r\n                -0.5,\r\n                CubicSpline.builder(Point.WEIRDNESS, transformer)\r\n                    .addPoint(-0.05, 6.3, 0.0)\r\n                    .addPoint(0.05, 2.67, 0.0)\r\n                    .build(),\r\n                0.0\r\n            )\r\n            .addPoint(-0.35, cubicspline, 0.0)\r\n            .addPoint(-0.25, cubicspline, 0.0)\r\n            .addPoint(\r\n                -0.1,\r\n                CubicSpline.builder(Point.WEIRDNESS, transformer)\r\n                    .addPoint(-0.05, 2.67, 0.0)\r\n                    .addPoint(0.05, 6.3, 0.0)\r\n                    .build(),\r\n                0.0\r\n            )\r\n            .addPoint(0.03, cubicspline, 0.0)\r\n        if (p_187309_) {\r\n            const cubicspline1 = CubicSpline.builder(Point.WEIRDNESS, transformer)\r\n                .addPoint(0.0, p_187308_, 0.0)\r\n                .addPoint(0.1, 0.625, 0.0)\r\n                .build()\r\n            const cubicspline2 = CubicSpline.builder(Point.RIDGES, transformer)\r\n                .addPoint(-0.9, p_187308_, 0.0)\r\n                .addPoint(-0.69, cubicspline1, 0.0)\r\n                .build()\r\n            builder\r\n                .addPoint(0.35, p_187308_, 0.0)\r\n                .addPoint(0.45, cubicspline2, 0.0)\r\n                .addPoint(0.55, cubicspline2, 0.0)\r\n                .addPoint(0.62, p_187308_, 0.0)\r\n        } else {\r\n            const cubicspline3 = CubicSpline.builder(Point.RIDGES, transformer)\r\n                .addPoint(-0.7, cubicspline, 0.0)\r\n                .addPoint(-0.15, 1.37, 0.0)\r\n                .build()\r\n            const cubicspline4 = CubicSpline.builder(Point.RIDGES, transformer)\r\n                .addPoint(0.45, cubicspline, 0.0)\r\n                .addPoint(0.7, 1.56, 0.0)\r\n                .build()\r\n            builder\r\n                .addPoint(0.05, cubicspline4, 0.0)\r\n                .addPoint(0.4, cubicspline4, 0.0)\r\n                .addPoint(0.45, cubicspline3, 0.0)\r\n                .addPoint(0.55, cubicspline3, 0.0)\r\n                .addPoint(0.58, p_187308_, 0.0)\r\n        }\r\n\r\n        return builder.build()\r\n    }\r\n\r\n    private static ridgeSpline(\r\n        p_187277_: number,\r\n        p_187278_: number,\r\n        p_187279_: number,\r\n        p_187280_: number,\r\n        p_187281_: number,\r\n        p_187282_: number,\r\n        transformer: ToFloatFunction<number>\r\n    ): CubicSpline<Point> {\r\n        const f = Math.max(0.5 * (p_187278_ - p_187277_), p_187282_)\r\n        const f1 = 5.0 * (p_187279_ - p_187278_)\r\n        return CubicSpline.builder(Point.RIDGES, transformer)\r\n            .addPoint(-1.0, p_187277_, f)\r\n            .addPoint(-0.4, p_187278_, Math.min(f, f1))\r\n            .addPoint(0.0, p_187279_, f1)\r\n            .addPoint(0.4, p_187280_, 2.0 * (p_187280_ - p_187279_))\r\n            .addPoint(1.0, p_187281_, 0.7 * (p_187281_ - p_187280_))\r\n            .build()\r\n    }\r\n\r\n    private static buildErosionJaggednessSpline(\r\n        p_187295_: number,\r\n        p_187296_: number,\r\n        p_187297_: number,\r\n        p_187298_: number,\r\n        p_187299_: ToFloatFunction<number>\r\n    ): CubicSpline<Point> {\r\n        const cubicspline = TerrainShaper.buildRidgeJaggednessSpline(\r\n            p_187295_,\r\n            p_187297_,\r\n            p_187299_\r\n        )\r\n        const cubicspline1 = TerrainShaper.buildRidgeJaggednessSpline(\r\n            p_187296_,\r\n            p_187298_,\r\n            p_187299_\r\n        )\r\n        return CubicSpline.builder(Point.EROSION, p_187299_)\r\n            .addPoint(-1.0, cubicspline, 0.0)\r\n            .addPoint(-0.78, cubicspline1, 0.0)\r\n            .addPoint(-0.5775, cubicspline1, 0.0)\r\n            .addPoint(-0.375, 0.0, 0.0)\r\n            .build()\r\n    }\r\n\r\n    private static buildWeirdnessJaggednessSpline(\r\n        p_187305_: number,\r\n        transformer: ToFloatFunction<number>\r\n    ): CubicSpline<Point> {\r\n        const v0 = 0.63 * p_187305_\r\n        const v1 = 0.3 * p_187305_\r\n        return CubicSpline.builder(Point.WEIRDNESS, transformer)\r\n            .addPoint(-0.01, v0, 0.0)\r\n            .addPoint(0.01, v1, 0.0)\r\n            .build()\r\n    }\r\n\r\n    private static buildRidgeJaggednessSpline(\r\n        weirdness1: number,\r\n        weirdness0: number,\r\n        transformer: ToFloatFunction<number>\r\n    ): CubicSpline<Point> {\r\n        const f = TerrainShaper.peaksAndValleys(0.4)\r\n        const f1 = TerrainShaper.peaksAndValleys(0.56666666)\r\n        const middlePeaksAndValleys = (f + f1) / 2.0\r\n        const builder = CubicSpline.builder(Point.RIDGES, transformer)\r\n        builder.addPoint(f, 0.0, 0.0)\r\n        if (weirdness0 > 0.0) {\r\n            builder.addPoint(\r\n                middlePeaksAndValleys,\r\n                TerrainShaper.buildWeirdnessJaggednessSpline(weirdness0, transformer),\r\n                0.0\r\n            )\r\n        } else {\r\n            builder.addPoint(middlePeaksAndValleys, 0.0, 0.0)\r\n        }\r\n\r\n        if (weirdness1 > 0.0) {\r\n            builder.addPoint(\r\n                1.0,\r\n                TerrainShaper.buildWeirdnessJaggednessSpline(weirdness1, transformer),\r\n                0.0\r\n            )\r\n        } else {\r\n            builder.addPoint(1.0, 0.0, 0.0)\r\n        }\r\n\r\n        return builder.build()\r\n    }\r\n}\r\n","import { NoiseSamplingSettings } from \"../chunk-generator\"\r\nimport { RandomSource } from \"../random\"\r\nimport { IntStream, PerlinNoise } from \"./perlin-noise\"\r\nimport * as Mth from \"../mth\"\r\n\r\nexport interface NoiseFiller {\r\n    calculateNoise(x: number, y: number, z: number): number\r\n}\r\n\r\nexport class BlendedNoise implements NoiseFiller {\r\n    private readonly xzScale: number\r\n    private readonly yScale: number\r\n    private readonly xzMainScale: number\r\n    private readonly yMainScale: number\r\n\r\n    private constructor(\r\n        private readonly minLimitNoise: PerlinNoise,\r\n        private readonly maxLimitNoise: PerlinNoise,\r\n        private readonly mainNoise: PerlinNoise,\r\n        settings: NoiseSamplingSettings,\r\n        private readonly cellWidth: number,\r\n        private readonly cellHeight: number\r\n    ) {\r\n        this.xzScale = 684.412 * settings.xzScale\r\n        this.yScale = 684.412 * settings.yScale\r\n        this.xzMainScale = this.xzScale / settings.xzFactor\r\n        this.yMainScale = this.yScale / settings.yFactor\r\n    }\r\n\r\n    public static create(\r\n        randomSource: RandomSource,\r\n        settings: NoiseSamplingSettings,\r\n        cellWidth: number,\r\n        cellHeight: number\r\n    ): BlendedNoise {\r\n        return new BlendedNoise(\r\n            PerlinNoise.createLegacyForBlendedNoise(randomSource, IntStream.rangeClosed(-15, 0)),\r\n            PerlinNoise.createLegacyForBlendedNoise(randomSource, IntStream.rangeClosed(-15, 0)),\r\n            PerlinNoise.createLegacyForBlendedNoise(randomSource, IntStream.rangeClosed(-7, 0)),\r\n            settings,\r\n            cellWidth,\r\n            cellHeight\r\n        )\r\n    }\r\n\r\n    public calculateNoise(x: number, y: number, z: number): number {\r\n        const cellX = Mth.floorDiv(x, this.cellWidth)\r\n        const cellY = Mth.floorDiv(y, this.cellHeight)\r\n        const cellZ = Mth.floorDiv(z, this.cellWidth)\r\n        let minNoiseValue = 0.0\r\n        let maxNoiseValue = 0.0\r\n        let noiseValue = 0.0\r\n        let scale = 1.0\r\n\r\n        for (let octave = 0; octave < 8; ++octave) {\r\n            const improvedNoise = this.mainNoise.getOctaveNoise(octave)\r\n            if (improvedNoise != null) {\r\n                noiseValue +=\r\n                    improvedNoise.noise(\r\n                        PerlinNoise.wrap(cellX * this.xzMainScale * scale),\r\n                        PerlinNoise.wrap(cellY * this.yMainScale * scale),\r\n                        PerlinNoise.wrap(cellZ * this.xzMainScale * scale),\r\n                        this.yMainScale * scale,\r\n                        cellY * this.yMainScale * scale\r\n                    ) / scale\r\n            }\r\n\r\n            scale /= 2.0\r\n        }\r\n\r\n        const t = (noiseValue / 10.0 + 1.0) / 2.0\r\n        const isMaxOrHigher = t >= 1.0\r\n        const isMinOrLower = t <= 0.0\r\n        scale = 1.0\r\n\r\n        for (let octave = 0; octave < 16; ++octave) {\r\n            const x = PerlinNoise.wrap(cellX * this.xzScale * scale)\r\n            const y = PerlinNoise.wrap(cellY * this.yScale * scale)\r\n            const z = PerlinNoise.wrap(cellZ * this.xzScale * scale)\r\n            const yScale = this.yScale * scale\r\n            if (!isMaxOrHigher) {\r\n                const improvedNoise = this.minLimitNoise.getOctaveNoise(octave)\r\n                if (improvedNoise != null) {\r\n                    minNoiseValue += improvedNoise.noise(x, y, z, yScale, cellY * yScale) / scale\r\n                }\r\n            }\r\n\r\n            if (!isMinOrLower) {\r\n                const improvedNoise = this.maxLimitNoise.getOctaveNoise(octave)\r\n                if (improvedNoise != null) {\r\n                    maxNoiseValue += improvedNoise.noise(x, y, z, yScale, cellY * yScale) / scale\r\n                }\r\n            }\r\n\r\n            scale /= 2.0\r\n        }\r\n\r\n        return Mth.clampedLerp(minNoiseValue / 512.0, maxNoiseValue / 512.0, t) / 128.0\r\n    }\r\n}\r\n","import * as Mth from \"./mth\"\r\n\r\nexport class BlockPos {\r\n    private static readonly PACKED_X_LENGTH = BigInt(\r\n        1 + Mth.log2(Mth.smallestEncompassingPowerOfTwo(30000000))\r\n    )\r\n    private static readonly PACKED_Z_LENGTH = BlockPos.PACKED_X_LENGTH\r\n    public static readonly PACKED_Y_LENGTH =\r\n        64n - BlockPos.PACKED_X_LENGTH - BlockPos.PACKED_Z_LENGTH\r\n    private static readonly PACKED_X_MASK = (1n << BigInt(BlockPos.PACKED_X_LENGTH)) - 1n\r\n    private static readonly PACKED_Y_MASK = (1n << BigInt(BlockPos.PACKED_Y_LENGTH)) - 1n\r\n    private static readonly PACKED_Z_MASK = (1n << BigInt(BlockPos.PACKED_Z_LENGTH)) - 1n\r\n    private static readonly Y_OFFSET = 0n\r\n    private static readonly Z_OFFSET = BlockPos.PACKED_Y_LENGTH\r\n    private static readonly X_OFFSET = BlockPos.PACKED_Y_LENGTH + BlockPos.PACKED_Z_LENGTH\r\n\r\n    constructor(readonly x: number, readonly y: number, readonly z: number) {}\r\n\r\n    public static getX(num: bigint): number {\r\n        return Mth.toInt(\r\n            (num << (64n - BlockPos.X_OFFSET - BlockPos.PACKED_X_LENGTH)) >>\r\n                (64n - BlockPos.PACKED_X_LENGTH)\r\n        )\r\n    }\r\n\r\n    public static getY(num: bigint): number {\r\n        return Mth.toInt(\r\n            (num << (64n - BlockPos.PACKED_Y_LENGTH)) >> (64n - BlockPos.PACKED_Y_LENGTH)\r\n        )\r\n    }\r\n\r\n    public static getZ(num: bigint): number {\r\n        return Mth.toInt(\r\n            (num << (64n - BlockPos.Z_OFFSET - BlockPos.PACKED_Z_LENGTH)) >>\r\n                (64n - BlockPos.PACKED_Z_LENGTH)\r\n        )\r\n    }\r\n\r\n    public static asLong(x: number, y: number, z: number): bigint {\r\n        let result = 0n\r\n        result |= (Mth.toLong(x) & BlockPos.PACKED_X_MASK) << BlockPos.X_OFFSET\r\n        result |= (Mth.toLong(y) & BlockPos.PACKED_Y_MASK) << BlockPos.Y_OFFSET\r\n        return result | ((Mth.toLong(z) & BlockPos.PACKED_Z_MASK) << BlockPos.Z_OFFSET)\r\n    }\r\n}\r\n\r\nexport abstract class SectionPos {\r\n    public static blockToSectionCoord(coord: number): number {\r\n        return coord >> 4\r\n    }\r\n\r\n    public static sectionToBlockCoord(coord: number, offset?: number): number {\r\n        return (coord << 4) + (offset ?? 0)\r\n    }\r\n}\r\n","import { Blocks } from \"./blocks\"\r\nimport { ChunkPos, NoiseChunk } from \"./chunk-generator\"\r\nimport { NormalNoise } from \"./noise/normal-noise\"\r\nimport { PositionalRandomFactory } from \"./random\"\r\nimport * as Mth from \"./mth\"\r\nimport { BlockPos, SectionPos } from \"./pos\"\r\n\r\nclass DimensionType {\r\n    static readonly BITS_FOR_Y = Number(BlockPos.PACKED_Y_LENGTH)\r\n    static readonly MIN_HEIGHT = 16\r\n    static readonly Y_SIZE = (1 << DimensionType.BITS_FOR_Y) - 32\r\n    static readonly MAX_Y = (DimensionType.Y_SIZE >> 1) - 1\r\n    static readonly MIN_Y = DimensionType.MAX_Y - DimensionType.Y_SIZE + 1\r\n    static readonly WAY_ABOVE_MAX_Y = DimensionType.MAX_Y << 4\r\n    static readonly WAY_BELOW_MIN_Y = DimensionType.MIN_Y << 4\r\n}\r\n\r\nexport class FluidStatus {\r\n    constructor(readonly fluidLevel: number, readonly fluidType: Blocks) {}\r\n\r\n    at(y: number): Blocks {\r\n        return y < this.fluidLevel ? this.fluidType : Blocks.AIR\r\n    }\r\n}\r\n\r\nexport interface FluidPicker {\r\n    computeFluid(x: number, y: number, z: number): FluidStatus\r\n}\r\n\r\nexport interface Aquifer {\r\n    computeSubstance(\r\n        x: number,\r\n        y: number,\r\n        z: number,\r\n        baseNoise: number,\r\n        clampedBaseNoise: number\r\n    ): Blocks | null\r\n    shouldScheduleFluidUpdate(): boolean\r\n}\r\n\r\nconst Long_MAX_VALUE = 2n ** 63n - 1n\r\nconst Integer_MAX_VALUE = 2 ** 31 - 1\r\n\r\nclass MutableDouble {\r\n    constructor(private value: number) {}\r\n\r\n    setValue(value: number): void {\r\n        this.value = value\r\n    }\r\n\r\n    getValue(): number {\r\n        return this.value\r\n    }\r\n}\r\n\r\nclass NoiseBasedAquifer implements Aquifer {\r\n    private static readonly X_RANGE = 10\r\n    private static readonly Y_RANGE = 9\r\n    private static readonly Z_RANGE = 10\r\n    private static readonly X_SEPARATION = 6\r\n    private static readonly Y_SEPARATION = 3\r\n    private static readonly Z_SEPARATION = 6\r\n    private static readonly X_SPACING = 16\r\n    private static readonly Y_SPACING = 12\r\n    private static readonly Z_SPACING = 16\r\n    private static readonly MAX_REASONABLE_DISTANCE_TO_AQUIFER_CENTER = 11\r\n    private static readonly FLOWING_UPDATE_SIMULARITY = NoiseBasedAquifer.similarity(\r\n        Mth.square(10),\r\n        Mth.square(12)\r\n    )\r\n    private static readonly SURFACE_SAMPLING_OFFSETS_IN_CHUNKS = [\r\n        [-2, -1],\r\n        [-1, -1],\r\n        [0, -1],\r\n        [1, -1],\r\n        [-3, 0],\r\n        [-2, 0],\r\n        [-1, 0],\r\n        [0, 0],\r\n        [1, 0],\r\n        [-2, 1],\r\n        [-1, 1],\r\n        [0, 1],\r\n        [1, 1],\r\n    ]\r\n\r\n    private readonly minGridX: number\r\n    private readonly minGridY: number\r\n    private readonly minGridZ: number\r\n    private readonly gridSizeX: number\r\n    private readonly gridSizeZ: number\r\n\r\n    private readonly aquiferCache: FluidStatus[]\r\n    private readonly aquiferLocationCache: bigint[]\r\n\r\n    private _shouldScheduleFluidUpdate: boolean\r\n\r\n    constructor(\r\n        readonly noiseChunk: NoiseChunk,\r\n        chunkPos: ChunkPos,\r\n        readonly barrierNoise: NormalNoise,\r\n        readonly fluidLevelFloodednessNoise: NormalNoise,\r\n        readonly fluidLevelSpreadNoise: NormalNoise,\r\n        readonly lavaNoise: NormalNoise,\r\n        readonly positionalRandomFactory: PositionalRandomFactory,\r\n        y: number,\r\n        height: number,\r\n        readonly globalFluidPicker: FluidPicker\r\n    ) {\r\n        this.minGridX = this.gridX(chunkPos.getMinBlockX()) - 1\r\n        this.minGridY = this.gridY(y) - 1\r\n        this.minGridZ = this.gridZ(chunkPos.getMinBlockZ()) - 1\r\n\r\n        const maxGridX = this.gridX(chunkPos.getMaxBlockX()) + 1\r\n        const maxGridY = this.gridY(y + height) + 1\r\n        const maxGridZ = this.gridZ(chunkPos.getMaxBlockZ()) + 1\r\n\r\n        this.gridSizeX = maxGridX - this.minGridX + 1\r\n        const gridSizeY = maxGridY - this.minGridY + 1\r\n        this.gridSizeZ = maxGridZ - this.minGridZ + 1\r\n\r\n        const gridSize = this.gridSizeX * gridSizeY * this.gridSizeZ\r\n\r\n        this.aquiferCache = new Array(gridSize) as FluidStatus[]\r\n        this.aquiferLocationCache = new Array(gridSize) as bigint[]\r\n        this.aquiferLocationCache.fill(Long_MAX_VALUE)\r\n    }\r\n\r\n    private getIndex(x: number, y: number, z: number): number {\r\n        const gridX = x - this.minGridX\r\n        const gridY = y - this.minGridY\r\n        const gridZ = z - this.minGridZ\r\n        return (gridY * this.gridSizeZ + gridZ) * this.gridSizeX + gridX\r\n    }\r\n\r\n    computeSubstance(\r\n        x: number,\r\n        y: number,\r\n        z: number,\r\n        baseNoise: number,\r\n        clampedBaseNoise: number\r\n    ): Blocks | null {\r\n        if (baseNoise <= -64) {\r\n            return this.globalFluidPicker.computeFluid(x, y, z).at(y)\r\n        } else {\r\n            if (clampedBaseNoise <= 0) {\r\n                const fluidStatus = this.globalFluidPicker.computeFluid(x, y, z)\r\n                let clampedMaxPressureMulBySim: number\r\n                let blockstate: Blocks\r\n                let shouldScheduleFluidUpdate: boolean\r\n                if (fluidStatus.at(y) === Blocks.LAVA) {\r\n                    blockstate = Blocks.LAVA\r\n                    clampedMaxPressureMulBySim = 0\r\n                    shouldScheduleFluidUpdate = false\r\n                } else {\r\n                    const someX = Mth.floorDiv(x - 5, 16)\r\n                    const someY = Mth.floorDiv(y + 1, 12)\r\n                    const someZ = Mth.floorDiv(z - 5, 16)\r\n\r\n                    let minDistanceSq0 = Integer_MAX_VALUE\r\n                    let minDistanceSq1 = Integer_MAX_VALUE\r\n                    let minDistanceSq2 = Integer_MAX_VALUE\r\n\r\n                    let minLocation0 = 0n\r\n                    let minLocation1 = 0n\r\n                    let minLocation2 = 0n\r\n\r\n                    for (let xOffset = 0; xOffset <= 1; ++xOffset) {\r\n                        for (let yOffset = -1; yOffset <= 1; ++yOffset) {\r\n                            for (let zOffset = 0; zOffset <= 1; ++zOffset) {\r\n                                const currentX = someX + xOffset\r\n                                const currentY = someY + yOffset\r\n                                const currentZ = someZ + zOffset\r\n                                const gridIndex = this.getIndex(currentX, currentY, currentZ)\r\n                                const cachedLocation = this.aquiferLocationCache[gridIndex]\r\n                                let location: bigint\r\n                                if (cachedLocation != Long_MAX_VALUE) {\r\n                                    location = cachedLocation\r\n                                } else {\r\n                                    const randomSource = this.positionalRandomFactory.at(\r\n                                        currentX,\r\n                                        currentY,\r\n                                        currentZ\r\n                                    )\r\n                                    location = BlockPos.asLong(\r\n                                        currentX * 16 + randomSource.nextInt(10),\r\n                                        currentY * 12 + randomSource.nextInt(9),\r\n                                        currentZ * 16 + randomSource.nextInt(10)\r\n                                    )\r\n                                    this.aquiferLocationCache[gridIndex] = location\r\n                                }\r\n\r\n                                const dx = BlockPos.getX(location) - x\r\n                                const dy = BlockPos.getY(location) - y\r\n                                const dz = BlockPos.getZ(location) - z\r\n\r\n                                const distanceSq = dx * dx + dy * dy + dz * dz\r\n\r\n                                if (minDistanceSq0 >= distanceSq) {\r\n                                    minLocation2 = minLocation1\r\n                                    minLocation1 = minLocation0\r\n                                    minLocation0 = location\r\n                                    minDistanceSq2 = minDistanceSq1\r\n                                    minDistanceSq1 = minDistanceSq0\r\n                                    minDistanceSq0 = distanceSq\r\n                                } else if (minDistanceSq1 >= distanceSq) {\r\n                                    minLocation2 = minLocation1\r\n                                    minLocation1 = location\r\n                                    minDistanceSq2 = minDistanceSq1\r\n                                    minDistanceSq1 = distanceSq\r\n                                } else if (minDistanceSq2 >= distanceSq) {\r\n                                    minLocation2 = location\r\n                                    minDistanceSq2 = distanceSq\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const minFluidStatus0 = this.getAquiferStatus(minLocation0)\r\n                    const minFluidStatus1 = this.getAquiferStatus(minLocation1)\r\n                    const minFluidStatus2 = this.getAquiferStatus(minLocation2)\r\n\r\n                    const sim01 = NoiseBasedAquifer.similarity(minDistanceSq0, minDistanceSq1)\r\n                    const sim02 = NoiseBasedAquifer.similarity(minDistanceSq0, minDistanceSq2)\r\n                    const sim12 = NoiseBasedAquifer.similarity(minDistanceSq1, minDistanceSq2)\r\n\r\n                    shouldScheduleFluidUpdate = sim01 >= NoiseBasedAquifer.FLOWING_UPDATE_SIMULARITY\r\n                    if (\r\n                        minFluidStatus0.at(y) === Blocks.WATER &&\r\n                        this.globalFluidPicker.computeFluid(x, y - 1, z).at(y - 1) === Blocks.LAVA\r\n                    ) {\r\n                        clampedMaxPressureMulBySim = 1\r\n                    } else if (sim01 > -1) {\r\n                        const barrierNoise = new MutableDouble(NaN)\r\n                        const pressure01 = this.calculatePressure(\r\n                            x,\r\n                            y,\r\n                            z,\r\n                            barrierNoise,\r\n                            minFluidStatus0,\r\n                            minFluidStatus1\r\n                        )\r\n                        const pressure02 = this.calculatePressure(\r\n                            x,\r\n                            y,\r\n                            z,\r\n                            barrierNoise,\r\n                            minFluidStatus0,\r\n                            minFluidStatus2\r\n                        )\r\n                        const pressure12 = this.calculatePressure(\r\n                            x,\r\n                            y,\r\n                            z,\r\n                            barrierNoise,\r\n                            minFluidStatus1,\r\n                            minFluidStatus2\r\n                        )\r\n                        const clampedSim01 = Math.max(0, sim01)\r\n                        const clampedSim02 = Math.max(0, sim02)\r\n                        const clampedSim12 = Math.max(0, sim12)\r\n                        const maxPressureMulBySim =\r\n                            2 *\r\n                            clampedSim01 *\r\n                            Math.max(\r\n                                pressure01,\r\n                                Math.max(pressure02 * clampedSim02, pressure12 * clampedSim12)\r\n                            )\r\n                        clampedMaxPressureMulBySim = Math.max(0, maxPressureMulBySim)\r\n                    } else {\r\n                        clampedMaxPressureMulBySim = 0\r\n                    }\r\n\r\n                    blockstate = minFluidStatus0.at(y)\r\n                }\r\n\r\n                if (clampedBaseNoise + clampedMaxPressureMulBySim <= 0) {\r\n                    this._shouldScheduleFluidUpdate = shouldScheduleFluidUpdate\r\n                    return blockstate\r\n                }\r\n            }\r\n\r\n            this._shouldScheduleFluidUpdate = false\r\n            return null\r\n        }\r\n    }\r\n\r\n    shouldScheduleFluidUpdate(): boolean {\r\n        return this._shouldScheduleFluidUpdate\r\n    }\r\n\r\n    private static similarity(distanceSq0: number, distanceSq1: number): number {\r\n        return 1 - Math.abs(distanceSq1 - distanceSq0) / 25\r\n    }\r\n\r\n    private calculatePressure(\r\n        x: number,\r\n        y: number,\r\n        z: number,\r\n        savedBarrierNoise: MutableDouble,\r\n        fluidStart: FluidStatus,\r\n        fluidEnd: FluidStatus\r\n    ): number {\r\n        const startBlock = fluidStart.at(y)\r\n        const endBlock = fluidEnd.at(y)\r\n        if (\r\n            (startBlock !== Blocks.LAVA || endBlock !== Blocks.WATER) &&\r\n            (startBlock !== Blocks.WATER || endBlock !== Blocks.LAVA)\r\n        ) {\r\n            const fluidDistance = Math.abs(fluidStart.fluidLevel - fluidEnd.fluidLevel)\r\n            if (fluidDistance == 0) {\r\n                return 0\r\n            } else {\r\n                const fluidMiddleLevel = 0.5 * (fluidStart.fluidLevel + fluidEnd.fluidLevel)\r\n                const distanceAboveFluidMiddleLevel = y + 0.5 - fluidMiddleLevel\r\n                const halfFluidDistance = fluidDistance / 2\r\n                const distanceToFluidEdge =\r\n                    halfFluidDistance - Math.abs(distanceAboveFluidMiddleLevel)\r\n                let pressure: number\r\n                // above middle level\r\n                if (distanceAboveFluidMiddleLevel > 0) {\r\n                    const shiftedDistanceToFluidEdge = 0 + distanceToFluidEdge\r\n                    // before the edge\r\n                    if (shiftedDistanceToFluidEdge > 0) {\r\n                        pressure = shiftedDistanceToFluidEdge / 1.5\r\n                    } else {\r\n                        // past the edge\r\n                        pressure = shiftedDistanceToFluidEdge / 2.5\r\n                    }\r\n                } else {\r\n                    // below middle level\r\n                    const shiftedDistanceToFluidEdge = 3 + distanceToFluidEdge\r\n                    // before the edge\r\n                    if (shiftedDistanceToFluidEdge > 0) {\r\n                        pressure = shiftedDistanceToFluidEdge / 3\r\n                    } else {\r\n                        // past the edge\r\n                        pressure = shiftedDistanceToFluidEdge / 10\r\n                    }\r\n                }\r\n\r\n                if (!(pressure < -2) && !(pressure > 2)) {\r\n                    const currentBarrierNoise = savedBarrierNoise.getValue()\r\n                    if (isNaN(currentBarrierNoise)) {\r\n                        const barrierNoise = this.barrierNoise.getValue(x, y * 0.5, z)\r\n                        savedBarrierNoise.setValue(barrierNoise)\r\n                        return barrierNoise + pressure\r\n                    } else {\r\n                        return currentBarrierNoise + pressure\r\n                    }\r\n                } else {\r\n                    return pressure\r\n                }\r\n            }\r\n        } else {\r\n            return 1\r\n        }\r\n    }\r\n\r\n    private gridX(x: number): number {\r\n        return Mth.floorDiv(x, 16)\r\n    }\r\n\r\n    private gridY(y: number): number {\r\n        return Mth.floorDiv(y, 12)\r\n    }\r\n\r\n    private gridZ(z: number): number {\r\n        return Mth.floorDiv(z, 16)\r\n    }\r\n\r\n    private getAquiferStatus(coord: bigint): FluidStatus {\r\n        const x = BlockPos.getX(coord)\r\n        const y = BlockPos.getY(coord)\r\n        const z = BlockPos.getZ(coord)\r\n        const gridX = this.gridX(x)\r\n        const gridY = this.gridY(y)\r\n        const gridZ = this.gridZ(z)\r\n        const gridIndex = this.getIndex(gridX, gridY, gridZ)\r\n        const fluidStatus = this.aquiferCache[gridIndex]\r\n        if (fluidStatus != null) {\r\n            return fluidStatus\r\n        } else {\r\n            const fluidStatus = this.computeFluid(x, y, z)\r\n            this.aquiferCache[gridIndex] = fluidStatus\r\n            return fluidStatus\r\n        }\r\n    }\r\n\r\n    public computeFluid(x: number, y: number, z: number): FluidStatus {\r\n        const fluidStatus = this.globalFluidPicker.computeFluid(x, y, z)\r\n        let minSurfaceY = Integer_MAX_VALUE\r\n        const maxY = y + 12\r\n        const minY = y - 12\r\n        let haveFluidAtMaxSurfaceYinPlace = false\r\n\r\n        for (const offset of NoiseBasedAquifer.SURFACE_SAMPLING_OFFSETS_IN_CHUNKS) {\r\n            const shiftedX = x + SectionPos.sectionToBlockCoord(offset[0])\r\n            const shiftedZ = z + SectionPos.sectionToBlockCoord(offset[1])\r\n            const surfaceY = this.noiseChunk.preliminarySurfaceLevel(shiftedX, shiftedZ)\r\n            const maxSurfaceY = surfaceY + 8\r\n            const isOffsetInPlace = offset[0] == 0 && offset[1] == 0\r\n            if (isOffsetInPlace && minY > maxSurfaceY) {\r\n                return fluidStatus\r\n            }\r\n\r\n            const isMaxSurfaceYinYRange = maxY > maxSurfaceY\r\n            if (isMaxSurfaceYinYRange || isOffsetInPlace) {\r\n                const fluidStatus = this.globalFluidPicker.computeFluid(\r\n                    shiftedX,\r\n                    maxSurfaceY,\r\n                    shiftedZ\r\n                )\r\n                if (fluidStatus.at(maxSurfaceY) !== Blocks.AIR) {\r\n                    if (isOffsetInPlace) {\r\n                        haveFluidAtMaxSurfaceYinPlace = true\r\n                    }\r\n\r\n                    if (isMaxSurfaceYinYRange) {\r\n                        return fluidStatus\r\n                    }\r\n                }\r\n            }\r\n\r\n            minSurfaceY = Math.min(minSurfaceY, surfaceY)\r\n        }\r\n\r\n        const distanceBetweenMinSurfaceYandYPlus8 = minSurfaceY + 8 - y\r\n        const t = haveFluidAtMaxSurfaceYinPlace\r\n            ? Mth.clampedMap(distanceBetweenMinSurfaceYandYPlus8, 0, 64, 1, 0)\r\n            : 0\r\n        const floodedness = Mth.clamp(\r\n            this.fluidLevelFloodednessNoise.getValue(x, y * 0.67, z),\r\n            -1,\r\n            1\r\n        )\r\n        const minFloodedness = Mth.map(t, 1, 0, -0.3, 0.8)\r\n        if (floodedness > minFloodedness) {\r\n            return fluidStatus\r\n        } else {\r\n            const d5 = Mth.map(t, 1, 0, -0.8, 0.4)\r\n            if (floodedness <= d5) {\r\n                return new FluidStatus(DimensionType.WAY_BELOW_MIN_Y, fluidStatus.fluidType)\r\n            } else {\r\n                const scaledX = Mth.floorDiv(x, 16)\r\n                const scaledY = Mth.floorDiv(y, 40)\r\n                const scaledZ = Mth.floorDiv(z, 16)\r\n                const fluidBaseY = scaledY * 40 + 20\r\n                const fluidLevelSpread =\r\n                    this.fluidLevelSpreadNoise.getValue(scaledX, scaledY / 1.4, scaledZ) * 10\r\n                const quantizedFluidLevelSpread = Mth.quantize(fluidLevelSpread, 3)\r\n                const fluidY = fluidBaseY + quantizedFluidLevelSpread\r\n                const fluidLevel = Math.min(minSurfaceY, fluidY)\r\n                const blockState = this.getFluidType(x, y, z, fluidStatus, fluidY)\r\n                return new FluidStatus(fluidLevel, blockState)\r\n            }\r\n        }\r\n    }\r\n\r\n    private getFluidType(\r\n        x: number,\r\n        y: number,\r\n        z: number,\r\n        fluidStatus: FluidStatus,\r\n        fluidY: number\r\n    ): Blocks {\r\n        if (fluidY <= -10) {\r\n            const scaledX = Mth.floorDiv(x, 64)\r\n            const scaledY = Mth.floorDiv(y, 40)\r\n            const scaledZ = Mth.floorDiv(z, 64)\r\n            const lavaNoise = this.lavaNoise.getValue(scaledX, scaledY, scaledZ)\r\n            if (Math.abs(lavaNoise) > 0.3) {\r\n                return Blocks.LAVA\r\n            }\r\n        }\r\n\r\n        return fluidStatus.fluidType\r\n    }\r\n}\r\n\r\nexport class Aquifer {\r\n    static create(\r\n        noiseChunk: NoiseChunk,\r\n        chunkPos: ChunkPos,\r\n        barrierNoise: NormalNoise,\r\n        fluidLevelFloodednessNoise: NormalNoise,\r\n        fluidLevelSpreadNoise: NormalNoise,\r\n        lavaNoise: NormalNoise,\r\n        positionalRandomFactory: PositionalRandomFactory,\r\n        y: number,\r\n        height: number,\r\n        picker: FluidPicker\r\n    ): Aquifer {\r\n        return new NoiseBasedAquifer(\r\n            noiseChunk,\r\n            chunkPos,\r\n            barrierNoise,\r\n            fluidLevelFloodednessNoise,\r\n            fluidLevelSpreadNoise,\r\n            lavaNoise,\r\n            positionalRandomFactory,\r\n            y,\r\n            height,\r\n            picker\r\n        )\r\n    }\r\n\r\n    static createDisabled(picker: FluidPicker): Aquifer {\r\n        return {\r\n            computeSubstance: (\r\n                x: number,\r\n                y: number,\r\n                z: number,\r\n                baseNoise: number,\r\n                clampedBaseNoise: number\r\n            ): Blocks | null => {\r\n                return clampedBaseNoise > 0 ? null : picker.computeFluid(x, y, z).at(y)\r\n            },\r\n\r\n            shouldScheduleFluidUpdate: (): boolean => {\r\n                return false\r\n            },\r\n        }\r\n    }\r\n}\r\n","import { Blocks } from \"./blocks\"\r\nimport {\r\n    Algorithm,\r\n    Algorithm_newInstance,\r\n    PositionalRandomFactory,\r\n    toResourceLocation,\r\n} from \"./random\"\r\nimport { Noises_instantiate, Noises } from \"./noise-data\"\r\nimport { NormalNoise } from \"./noise/normal-noise\"\r\nimport * as Mth from \"./mth\"\r\nimport { BiomeManager } from \"./biome-source\"\r\nimport { LevelHeightAccessor } from \"./chunks\"\r\nimport { ChunkGenerator } from \"./chunk-generator\"\r\n\r\nclass WorldGenerationContext {\r\n    readonly minY: number\r\n    readonly height: number\r\n\r\n    constructor(chunkGenerator: ChunkGenerator, heightAccessor: LevelHeightAccessor) {\r\n        this.minY = Math.max(heightAccessor.getMinBuildHeight(), chunkGenerator.getMinY())\r\n        this.height = Math.min(heightAccessor.getHeight(), chunkGenerator.getGenDepth())\r\n    }\r\n}\r\n\r\nexport class SurfaceSystem {\r\n    private readonly noiseIntances = new Map<Noises, NormalNoise>()\r\n    private readonly positionalRandoms = new Map<string, PositionalRandomFactory>()\r\n    private readonly randomFactory: PositionalRandomFactory\r\n    private readonly surfaceNoise: NormalNoise\r\n    private readonly surfaceSecondaryNoise: NormalNoise\r\n\r\n    constructor(\r\n        private readonly defaultBlock: Blocks,\r\n        private readonly seaLevel: number,\r\n        seed: bigint,\r\n        algorithm: Algorithm\r\n    ) {\r\n        this.randomFactory = Algorithm_newInstance(algorithm, seed).forkPositional()\r\n\r\n        this.surfaceNoise = Noises_instantiate(this.randomFactory, Noises.SURFACE)\r\n        this.surfaceSecondaryNoise = Noises_instantiate(\r\n            this.randomFactory,\r\n            Noises.SURFACE_SECONDARY\r\n        )\r\n    }\r\n\r\n    protected getOrCreateNoise(noise: Noises): NormalNoise {\r\n        return Mth.computeIfAbsent(this.noiseIntances, noise, () => {\r\n            return Noises_instantiate(this.randomFactory, noise)\r\n        })\r\n    }\r\n\r\n    protected getOrCreateRandomFactory(name: string): PositionalRandomFactory {\r\n        return Mth.computeIfAbsent(this.positionalRandoms, name, () => {\r\n            return this.randomFactory.fromHashOf(toResourceLocation(name)).forkPositional()\r\n        })\r\n    }\r\n\r\n    /*\r\n     public  buildSurface( biomeManager: BiomeManager,  useLegacyRandomSource: boolean,  generationContext: WorldGenerationContext,   chunkAccess: ChunkAccess,  noiseChunk: NoiseChunk,  p_189951_: RuleSource): void {\r\n        const blockpos$mutableblockpos = new BlockPos.MutableBlockPos();\r\n        const chunkpos = chunkAccess.getPos();\r\n        const startX = chunkpos.getMinBlockX();\r\n        const startZ = chunkpos.getMinBlockZ();\r\n        const blockcolumn = new BlockColumn() {\r\n           public BlockState getBlock(int y) {\r\n              return chunkAccess.getBlockState(blockpos$mutableblockpos.setY(y));\r\n           }\r\n  \r\n           public void setBlock(int y, BlockState blockState) {\r\n              LevelHeightAccessor levelheightaccessor = chunkAccess.getHeightAccessorForGeneration();\r\n              if (y >= levelheightaccessor.getMinBuildHeight() && y < levelheightaccessor.getMaxBuildHeight()) {\r\n                 chunkAccess.setBlockState(blockpos$mutableblockpos.setY(y), blockState, false);\r\n                 if (!blockState.getFluidState().isEmpty()) {\r\n                    chunkAccess.markPosForPostprocessing(blockpos$mutableblockpos);\r\n                 }\r\n              }\r\n  \r\n           }\r\n  \r\n           public String toString() {\r\n              return \"ChunkBlockColumn \" + chunkpos;\r\n           }\r\n        };\r\n        SurfaceRules.Context surfacerules$context = new SurfaceRules.Context(this, chunkAccess, noiseChunk, p_189945_::getBiome, biomeRegistry, generationContext);\r\n        SurfaceRules.SurfaceRule surfacerules$surfacerule = p_189951_.apply(surfacerules$context);\r\n        BlockPos.MutableBlockPos blockpos$mutableblockpos1 = new BlockPos.MutableBlockPos();\r\n  \r\n        for(int offsetX = 0; offsetX < 16; ++offsetX) {\r\n           for(int offsetZ = 0; offsetZ < 16; ++offsetZ) {\r\n              int x = startX + offsetX;\r\n              int z = startZ + offsetZ;\r\n              int initialY = chunkAccess.getHeight(Heightmap.Types.WORLD_SURFACE_WG, offsetX, offsetZ) + 1;\r\n              blockpos$mutableblockpos.setX(x).setZ(z);\r\n              Biome biome = p_189945_.getBiome(blockpos$mutableblockpos1.set(x, p_189947_ ? 0 : initialY, z));\r\n              ResourceKey<Biome> resourcekey = biomeRegistry.getResourceKey(biome).orElseThrow(() -> {\r\n                 return new IllegalStateException(\"Unregistered biome: \" + biome);\r\n              });\r\n              if (resourcekey == Biomes.ERODED_BADLANDS) {\r\n                 this.erodedBadlandsExtension(blockcolumn, x, z, initialY, chunkAccess);\r\n              }\r\n  \r\n              int maxY = chunkAccess.getHeight(Heightmap.Types.WORLD_SURFACE_WG, offsetX, offsetZ) + 1;\r\n              surfacerules$context.updateXZ(x, z);\r\n              int startY = 0;\r\n              int waterY = Integer.MIN_VALUE;\r\n              int beforeStoneY = Integer.MAX_VALUE;\r\n              int minY = chunkAccess.getMinBuildHeight();\r\n  \r\n              for(int y = maxY; y >= minY; --y) {\r\n                 BlockState blockstate = blockcolumn.getBlock(y);\r\n                 if (blockstate.isAir()) {\r\n                    startY = 0;\r\n                    waterY = Integer.MIN_VALUE;\r\n                 } else if (!blockstate.getFluidState().isEmpty()) {\r\n                    if (waterY == Integer.MIN_VALUE) {\r\n                       waterY = y + 1;\r\n                    }\r\n                 } else {\r\n                    if (beforeStoneY >= y) {\r\n                       beforeStoneY = DimensionType.WAY_BELOW_MIN_Y;\r\n  \r\n                       for(int currentY = y - 1; currentY >= minY - 1; --currentY) {\r\n                          BlockState blockstate1 = blockcolumn.getBlock(currentY);\r\n                          if (!this.isStone(blockstate1)) {\r\n                             beforeStoneY = currentY + 1;\r\n                             break;\r\n                          }\r\n                       }\r\n                    }\r\n  \r\n                    ++startY;\r\n                    int countY = y - beforeStoneY + 1;\r\n                    surfacerules$context.updateY(startY, countY, waterY, x, y, z);\r\n                    if (blockstate == this.defaultBlock) {\r\n                       BlockState blockstate2 = surfacerules$surfacerule.tryApply(x, y, z);\r\n                       if (blockstate2 != null) {\r\n                          blockcolumn.setBlock(y, blockstate2);\r\n                       }\r\n                    }\r\n                 }\r\n              }\r\n  \r\n              if (resourcekey == Biomes.FROZEN_OCEAN || resourcekey == Biomes.DEEP_FROZEN_OCEAN) {\r\n                 this.frozenOceanExtension(surfacerules$context.getMinSurfaceLevel(), biome, blockcolumn, blockpos$mutableblockpos1, x, z, initialY);\r\n              }\r\n           }\r\n        }\r\n  \r\n     }\r\n  \r\n     protected int getSurfaceDepth(int p_189928_, int p_189929_) {\r\n        return this.getSurfaceDepth(this.surfaceNoise, p_189928_, p_189929_);\r\n     }\r\n  \r\n     protected int getSurfaceSecondaryDepth(int p_189994_, int p_189995_) {\r\n        return this.getSurfaceDepth(this.surfaceSecondaryNoise, p_189994_, p_189995_);\r\n     }\r\n  \r\n     private int getSurfaceDepth(NormalNoise p_189980_, int p_189981_, int p_189982_) {\r\n        return (int)(p_189980_.getValue((double)p_189981_, 0.0D, (double)p_189982_) * 2.75D + 3.0D + this.randomFactory.at(p_189981_, 0, p_189982_).nextDouble() * 0.25D);\r\n     }\r\n  \r\n     private boolean isStone(BlockState p_189953_) {\r\n        return !p_189953_.isAir() && p_189953_.getFluidState().isEmpty();\r\n     }\r\n     */\r\n}\r\n","import { BiomeResolver, BiomeSource } from \"./biome-source\"\r\nimport { Biomes } from \"./biomes\"\r\nimport { Blocks } from \"./blocks\"\r\nimport { TargetPoint } from \"./climate\"\r\nimport * as Climate from \"./climate\"\r\nimport { RuleSource, SurfaceRuleData } from \"./surface-rules\"\r\nimport { TerrainShaper } from \"./terrain-shaper\"\r\nimport {\r\n    Algorithm,\r\n    Algorithm_newInstance,\r\n    PositionalRandomFactory,\r\n    toResourceLocation,\r\n} from \"./random\"\r\nimport { BlendedNoise, NoiseFiller } from \"./noise/blended-noise\"\r\nimport { NoiseParameters, NormalNoise } from \"./noise/normal-noise\"\r\nimport { Noises_instantiate, Noises } from \"./noise-data\"\r\nimport * as Mth from \"./mth\"\r\nimport { Aquifer, FluidPicker, FluidStatus } from \"./aquifer\"\r\nimport { Supplier } from \"./consumer\"\r\nimport { BlockPos, SectionPos } from \"./pos\"\r\nimport { SurfaceSystem } from \"./surface-system\"\r\nimport { ChunkAccess } from \"./chunks\"\r\n\r\nexport class ChunkPos {\r\n    readonly x: number\r\n    readonly z: number\r\n\r\n    constructor(x: number, z: number)\r\n    constructor(pos: BlockPos)\r\n    constructor(l: bigint)\r\n    constructor(x: number | BlockPos | bigint, z?: number) {\r\n        if (typeof x === \"bigint\") {\r\n            const coord = x\r\n            this.x = Mth.toInt(coord)\r\n            this.z = Mth.toInt(coord >> 32n)\r\n        } else if (typeof x === \"number\") {\r\n            this.x = x\r\n            this.z = z!\r\n        } else {\r\n            const pos = x\r\n            this.x = SectionPos.blockToSectionCoord(pos.x)\r\n            this.z = SectionPos.blockToSectionCoord(pos.z)\r\n        }\r\n    }\r\n\r\n    toLong(): bigint {\r\n        return ChunkPos.asLong(this.x, this.z)\r\n    }\r\n\r\n    static asLong(pos: BlockPos): bigint\r\n    static asLong(x: number, z: number): bigint\r\n    static asLong(x: number | BlockPos, z?: number): bigint {\r\n        if (typeof x === \"number\") {\r\n            return (Mth.toLong(x) & 4294967295n) | ((Mth.toLong(z!) & 4294967295n) << 32n)\r\n        } else {\r\n            const pos = x\r\n            return ChunkPos.asLong(\r\n                SectionPos.blockToSectionCoord(pos.x),\r\n                SectionPos.blockToSectionCoord(pos.z)\r\n            )\r\n        }\r\n    }\r\n\r\n    static getX(coord: bigint): number {\r\n        return Mth.toInt(coord & 4294967295n)\r\n    }\r\n\r\n    static getZ(coord: bigint): number {\r\n        return Mth.toInt(Mth.unsignedShift64(coord, 32n) & 4294967295n)\r\n    }\r\n\r\n    getMiddleBlockX(): number {\r\n        return this.getBlockX(8)\r\n    }\r\n\r\n    getMiddleBlockZ(): number {\r\n        return this.getBlockZ(8)\r\n    }\r\n\r\n    getMinBlockX(): number {\r\n        return SectionPos.sectionToBlockCoord(this.x)\r\n    }\r\n\r\n    getMinBlockZ(): number {\r\n        return SectionPos.sectionToBlockCoord(this.z)\r\n    }\r\n\r\n    getMaxBlockX(): number {\r\n        return this.getBlockX(15)\r\n    }\r\n\r\n    getMaxBlockZ(): number {\r\n        return this.getBlockZ(15)\r\n    }\r\n\r\n    getRegionX(): number {\r\n        return this.x >> 5\r\n    }\r\n\r\n    getRegionZ(): number {\r\n        return this.z >> 5\r\n    }\r\n\r\n    getRegionLocalX(): number {\r\n        return this.x & 31\r\n    }\r\n\r\n    getRegionLocalZ(): number {\r\n        return this.z & 31\r\n    }\r\n\r\n    getBlockAt(x: number, y: number, z: number): BlockPos {\r\n        return new BlockPos(this.getBlockX(x), y, this.getBlockZ(z))\r\n    }\r\n\r\n    getBlockX(x: number): number {\r\n        return SectionPos.sectionToBlockCoord(this.x, x)\r\n    }\r\n\r\n    getBlockZ(z: number): number {\r\n        return SectionPos.sectionToBlockCoord(this.z, z)\r\n    }\r\n\r\n    getMiddleBlockPosition(y: number): BlockPos {\r\n        return new BlockPos(this.getMiddleBlockX(), y, this.getMiddleBlockZ())\r\n    }\r\n\r\n    getWorldPosition(): BlockPos {\r\n        return new BlockPos(this.getMinBlockX(), 0, this.getMinBlockZ())\r\n    }\r\n}\r\n\r\n// generator\r\n\r\nclass WorldGenRegion {}\r\n\r\nexport interface NoiseBiomeSource {\r\n    getNoiseBiome(x: number, y: number, z: number): Biomes\r\n}\r\n\r\nexport abstract class ChunkGenerator implements NoiseBiomeSource {\r\n    constructor(readonly biomeSource: BiomeSource) {\r\n        //\r\n    }\r\n\r\n    public abstract climateSampler(): Climate.Sampler\r\n\r\n    getNoiseBiome(x: number, y: number, z: number): Biomes {\r\n        return this.biomeSource.getNoiseBiome(x, y, z, this.climateSampler())\r\n    }\r\n\r\n    public abstract buildSurface(region: WorldGenRegion, access: ChunkAccess): void\r\n\r\n    public abstract withSeed(seed: bigint): ChunkGenerator\r\n\r\n    public createBiomes(blender: Blender, chunk: ChunkAccess): ChunkAccess {\r\n        chunk.fillBiomesFromNoise(this.biomeSource, this.climateSampler())\r\n        return chunk\r\n    }\r\n\r\n    abstract getMinY(): number\r\n    abstract getGenDepth(): number\r\n}\r\n\r\nexport class NoiseSamplingSettings {\r\n    constructor(\r\n        readonly xzScale: number,\r\n        readonly yScale: number,\r\n        readonly xzFactor: number,\r\n        readonly yFactor: number\r\n    ) {}\r\n}\r\n\r\nexport class NoiseSlider {\r\n    constructor(readonly target: number, readonly size: number, readonly offset: number) {}\r\n\r\n    public applySlide(y: number, cellY: number): number {\r\n        if (this.size <= 0) {\r\n            return y\r\n        } else {\r\n            const t = (cellY - this.offset) / this.size\r\n            return Mth.clampedLerp(this.target, y, t)\r\n        }\r\n    }\r\n}\r\n\r\nexport abstract class QuartPos {\r\n    public static readonly BITS = 2\r\n    public static readonly SIZE = 4\r\n    public static readonly MASK = 3\r\n    private static readonly SECTION_TO_QUARTS_BITS = 2\r\n\r\n    private constructor() {\r\n        //\r\n    }\r\n\r\n    public static fromBlock(coord: number): number {\r\n        return coord >> QuartPos.BITS\r\n    }\r\n\r\n    public static quartLocal(coord: number): number {\r\n        return coord & QuartPos.MASK\r\n    }\r\n\r\n    public static toBlock(coord: number): number {\r\n        return coord << QuartPos.BITS\r\n    }\r\n\r\n    public static fromSection(coord: number): number {\r\n        return coord << QuartPos.SECTION_TO_QUARTS_BITS\r\n    }\r\n\r\n    public static toSection(coord): number {\r\n        return coord >> QuartPos.SECTION_TO_QUARTS_BITS\r\n    }\r\n}\r\n\r\nexport class NoiseSettings {\r\n    constructor(\r\n        readonly minY: number,\r\n        readonly height: number,\r\n        readonly noiseSamplingSettings: NoiseSamplingSettings,\r\n        readonly topSlideSettings: NoiseSlider,\r\n        readonly bottomSlideSettings: NoiseSlider,\r\n        readonly noiseSizeHorizontal: number,\r\n        readonly noiseSizeVertical: number,\r\n        readonly islandNoiseOverride: boolean,\r\n        readonly isAmplified: boolean,\r\n        readonly largeBiomes: boolean,\r\n        readonly terrainShaper: TerrainShaper\r\n    ) {}\r\n\r\n    get cellHeight(): number {\r\n        return QuartPos.toBlock(this.noiseSizeVertical)\r\n    }\r\n\r\n    get cellWidth(): number {\r\n        return QuartPos.toBlock(this.noiseSizeHorizontal)\r\n    }\r\n\r\n    get cellCountY(): number {\r\n        return Math.trunc(this.height / this.cellHeight)\r\n    }\r\n\r\n    get minCellY(): number {\r\n        return Mth.intFloorDiv(this.minY, this.cellHeight)\r\n    }\r\n}\r\n\r\nexport class NoiseGeneratorSettings {\r\n    static readonly OVERWORLD = NoiseGeneratorSettings.overworld(false, false)\r\n\r\n    constructor(\r\n        readonly noiseSettings: NoiseSettings,\r\n        readonly defaultBlock: Blocks,\r\n        readonly defaultFluid: Blocks,\r\n        readonly surfaceRule: RuleSource,\r\n        readonly seaLevel: number,\r\n        readonly disableMobGeneration: boolean,\r\n        readonly aquifersEnabled: boolean,\r\n        readonly noiseCavesEnabled: boolean,\r\n        readonly oreVeinsEnabled: boolean,\r\n        readonly noodleCavesEnabled: boolean,\r\n        readonly useLegacyRandom: boolean\r\n    ) {}\r\n\r\n    private static overworld(isAmplified: boolean, isLargeBiomes: boolean) {\r\n        return new NoiseGeneratorSettings(\r\n            new NoiseSettings(\r\n                -64,\r\n                384,\r\n                new NoiseSamplingSettings(1, 1, 80, 160),\r\n                new NoiseSlider(-0.078125, 2, isAmplified ? 0 : 8),\r\n                new NoiseSlider(isAmplified ? 0.4 : 0.1171875, 3, 0),\r\n                1,\r\n                2,\r\n                false,\r\n                isAmplified,\r\n                isLargeBiomes,\r\n                TerrainShaper.overworld(isAmplified)\r\n            ),\r\n            Blocks.STONE,\r\n            Blocks.WATER,\r\n            SurfaceRuleData.overworld(),\r\n            63,\r\n            false,\r\n            true,\r\n            true,\r\n            true,\r\n            true,\r\n            false\r\n        )\r\n    }\r\n\r\n    get randomSource(): Algorithm {\r\n        return this.useLegacyRandom ? Algorithm.LEGACY : Algorithm.XOROSHIRO\r\n    }\r\n}\r\n\r\nclass NoiseInterpolator implements Sampler {\r\n    private slice0: number[][]\r\n    private slice1: number[][]\r\n    private noise000: number\r\n    private noise001: number\r\n    private noise100: number\r\n    private noise101: number\r\n    private noise010: number\r\n    private noise011: number\r\n    private noise110: number\r\n    private noise111: number\r\n    private valueXZ00: number\r\n    private valueXZ10: number\r\n    private valueXZ01: number\r\n    private valueXZ11: number\r\n    private valueZ0: number\r\n    private valueZ1: number\r\n    private value: number\r\n\r\n    constructor(\r\n        private readonly noiseChunk: NoiseChunk,\r\n        private readonly noiseFiller: NoiseFiller\r\n    ) {\r\n        this.slice0 = this.allocateSlice(this.noiseChunk.cellCountY, this.noiseChunk.cellCountXZ)\r\n        this.slice1 = this.allocateSlice(this.noiseChunk.cellCountY, this.noiseChunk.cellCountXZ)\r\n        this.noiseChunk.interpolators.push(this)\r\n    }\r\n\r\n    private allocateSlice(cellCountY: number, cellCountXZ: number): number[][] {\r\n        const sliceWidth = cellCountXZ + 1\r\n        const sliceHeight = cellCountY + 1\r\n\r\n        const slice = new Array(sliceWidth) as number[][]\r\n\r\n        for (let k = 0; k < sliceWidth; ++k) {\r\n            slice[k] = new Array(sliceHeight) as number[]\r\n        }\r\n\r\n        return slice\r\n    }\r\n\r\n    initializeForFirstCellX(): void {\r\n        this.fillSlice(this.slice0, this.noiseChunk.firstCellX)\r\n    }\r\n\r\n    advanceCellX(cellOffsetX: number): void {\r\n        this.fillSlice(this.slice1, this.noiseChunk.firstCellX + cellOffsetX + 1)\r\n    }\r\n\r\n    private fillSlice(slice: number[][], cellX: number): void {\r\n        const cellWidth = this.noiseChunk.noiseSettings.cellWidth\r\n        const cellHeight = this.noiseChunk.noiseSettings.cellHeight\r\n\r\n        for (let offsetZ = 0; offsetZ < this.noiseChunk.cellCountXZ + 1; ++offsetZ) {\r\n            const cellZ = this.noiseChunk.firstCellZ + offsetZ\r\n\r\n            for (let offsetY = 0; offsetY < this.noiseChunk.cellCountY + 1; ++offsetY) {\r\n                const cellY = offsetY + this.noiseChunk.cellNoiseMinY\r\n                const y = cellY * cellHeight\r\n                const noise = this.noiseFiller.calculateNoise(\r\n                    cellX * cellWidth,\r\n                    y,\r\n                    cellZ * cellWidth\r\n                )\r\n                slice[offsetZ][offsetY] = noise\r\n            }\r\n        }\r\n    }\r\n\r\n    selectCellYZ(cellY: number, cellZ: number): void {\r\n        this.noise000 = this.slice0[cellZ][cellY]\r\n        this.noise001 = this.slice0[cellZ + 1][cellY]\r\n        this.noise100 = this.slice1[cellZ][cellY]\r\n        this.noise101 = this.slice1[cellZ + 1][cellY]\r\n        this.noise010 = this.slice0[cellZ][cellY + 1]\r\n        this.noise011 = this.slice0[cellZ + 1][cellY + 1]\r\n        this.noise110 = this.slice1[cellZ][cellY + 1]\r\n        this.noise111 = this.slice1[cellZ + 1][cellY + 1]\r\n    }\r\n\r\n    updateForY(t: number): void {\r\n        this.valueXZ00 = Mth.lerp(t, this.noise000, this.noise010)\r\n        this.valueXZ10 = Mth.lerp(t, this.noise100, this.noise110)\r\n        this.valueXZ01 = Mth.lerp(t, this.noise001, this.noise011)\r\n        this.valueXZ11 = Mth.lerp(t, this.noise101, this.noise111)\r\n    }\r\n\r\n    updateForX(t: number): void {\r\n        this.valueZ0 = Mth.lerp(t, this.valueXZ00, this.valueXZ10)\r\n        this.valueZ1 = Mth.lerp(t, this.valueXZ01, this.valueXZ11)\r\n    }\r\n\r\n    updateForZ(t: number): void {\r\n        this.value = Mth.lerp(t, this.valueZ0, this.valueZ1)\r\n    }\r\n\r\n    sample(): number {\r\n        return this.value\r\n    }\r\n\r\n    swapSlices(): void {\r\n        const temp = this.slice0\r\n        this.slice0 = this.slice1\r\n        this.slice1 = temp\r\n    }\r\n}\r\n\r\nclass FlatNoiseData {\r\n    constructor(\r\n        readonly shiftedX: number,\r\n        readonly shiftedZ: number,\r\n        readonly continentalness: number,\r\n        readonly weirdness: number,\r\n        readonly erosion: number,\r\n        readonly terrainInfo: TerrainInfo\r\n    ) {}\r\n}\r\n\r\nexport interface Sampler {\r\n    sample(): number\r\n}\r\n\r\nexport class NoiseChunk {\r\n    readonly noiseSettings: NoiseSettings\r\n\r\n    readonly firstCellX: number\r\n    readonly firstCellZ: number\r\n    private readonly firstNoiseX: number\r\n    private readonly firstNoiseZ: number\r\n    readonly interpolators: NoiseInterpolator[]\r\n    private readonly _noiseData: FlatNoiseData[][]\r\n    private readonly _preliminarySurfaceLevel = new Map<bigint, number>()\r\n\r\n    readonly aquifer: Aquifer\r\n    private readonly baseNoise: BlockStateFiller\r\n    readonly blender: Blender\r\n\r\n    static forChunk(\r\n        chunkAccess: ChunkAccess,\r\n        sampler: NoiseSampler,\r\n        filler: Supplier<NoiseFiller>,\r\n        generatorSettings: NoiseGeneratorSettings,\r\n        fluidPicker: FluidPicker,\r\n        blender: Blender\r\n    ): NoiseChunk {\r\n        const chunkPos = chunkAccess.getPos()\r\n        const noiseSettings = generatorSettings.noiseSettings\r\n        const minY = Math.max(noiseSettings.minY, chunkAccess.getMinBuildHeight())\r\n        const maxY = Math.min(\r\n            noiseSettings.minY + noiseSettings.height,\r\n            chunkAccess.getMaxBuildHeight()\r\n        )\r\n        const cellMinY = Mth.intFloorDiv(minY, noiseSettings.cellHeight)\r\n        const cellCountY = Mth.intFloorDiv(maxY - minY, noiseSettings.cellHeight)\r\n        return new NoiseChunk(\r\n            Math.trunc(16 / noiseSettings.cellWidth),\r\n            cellCountY,\r\n            cellMinY,\r\n            sampler,\r\n            chunkPos.getMinBlockX(),\r\n            chunkPos.getMinBlockZ(),\r\n            filler(),\r\n            generatorSettings,\r\n            fluidPicker,\r\n            blender\r\n        )\r\n    }\r\n\r\n    static forColumn(\r\n        startX: number,\r\n        startZ: number,\r\n        cellNoiseMinY: number,\r\n        cellCountY: number,\r\n        sampler: NoiseSampler,\r\n        noiseSettings: NoiseGeneratorSettings,\r\n        fluidPicker: FluidPicker\r\n    ): NoiseChunk {\r\n        return new NoiseChunk(\r\n            1,\r\n            cellCountY,\r\n            cellNoiseMinY,\r\n            sampler,\r\n            startX,\r\n            startZ,\r\n            {\r\n                calculateNoise: () => 0,\r\n            },\r\n            noiseSettings,\r\n            fluidPicker,\r\n            Blender.empty()\r\n        )\r\n    }\r\n\r\n    private constructor(\r\n        readonly cellCountXZ: number,\r\n        readonly cellCountY: number,\r\n        readonly cellNoiseMinY: number,\r\n        private readonly sampler: NoiseSampler,\r\n        startX: number,\r\n        startZ: number,\r\n        filler: NoiseFiller,\r\n        noiseSettings: NoiseGeneratorSettings,\r\n        fluidPicker: FluidPicker,\r\n        blender: Blender\r\n    ) {\r\n        this.noiseSettings = noiseSettings.noiseSettings\r\n        this.cellCountXZ = cellCountXZ\r\n        this.cellCountY = cellCountY\r\n        this.cellNoiseMinY = cellNoiseMinY\r\n        this.sampler = sampler\r\n        const cellWidth = this.noiseSettings.cellWidth\r\n        this.firstCellX = Mth.floorDiv(startX, cellWidth)\r\n        this.firstCellZ = Mth.floorDiv(startZ, cellWidth)\r\n        this.interpolators = []\r\n        this.firstNoiseX = QuartPos.fromBlock(startX)\r\n        this.firstNoiseZ = QuartPos.fromBlock(startZ)\r\n        const countXZ = QuartPos.fromBlock(cellCountXZ * cellWidth)\r\n        this._noiseData = new Array(countXZ + 1) as FlatNoiseData[][]\r\n        this.blender = blender\r\n\r\n        for (let offsetX = 0; offsetX <= countXZ; ++offsetX) {\r\n            const x = this.firstNoiseX + offsetX\r\n            this._noiseData[offsetX] = new Array(countXZ + 1) as FlatNoiseData[]\r\n\r\n            for (let offsetZ = 0; offsetZ <= countXZ; ++offsetZ) {\r\n                const z = this.firstNoiseZ + offsetZ\r\n                this._noiseData[offsetX][offsetZ] = sampler.noiseData(x, z, blender)\r\n            }\r\n        }\r\n\r\n        this.aquifer = sampler.createAquifer(\r\n            this,\r\n            startX,\r\n            startZ,\r\n            cellNoiseMinY,\r\n            cellCountY,\r\n            fluidPicker,\r\n            noiseSettings.aquifersEnabled\r\n        )\r\n        this.baseNoise = sampler.makeBaseNoiseFiller(this, filler)\r\n    }\r\n\r\n    noiseData(x: number, z: number): FlatNoiseData {\r\n        return this._noiseData[x - this.firstNoiseX][z - this.firstNoiseZ]\r\n    }\r\n\r\n    preliminarySurfaceLevel(x: number, z: number): number {\r\n        return Mth.computeIfAbsent(\r\n            this._preliminarySurfaceLevel,\r\n            ChunkPos.asLong(QuartPos.fromBlock(x), QuartPos.fromBlock(z)),\r\n            linearCoord => this.computePreliminarySurfaceLevel(linearCoord)\r\n        )\r\n    }\r\n\r\n    private computePreliminarySurfaceLevel(linearCoord: bigint): number {\r\n        const x = ChunkPos.getX(linearCoord)\r\n        const z = ChunkPos.getZ(linearCoord)\r\n        const baseX = x - this.firstNoiseX\r\n        const baseZ = z - this.firstNoiseZ\r\n        const noiseSize = this._noiseData.length\r\n        let terraininfo: TerrainInfo\r\n        if (baseX >= 0 && baseZ >= 0 && baseX < noiseSize && baseZ < noiseSize) {\r\n            terraininfo = this.noiseData[baseX][baseZ].terrainInfo()\r\n        } else {\r\n            terraininfo = this.sampler.noiseData(x, z, this.blender).terrainInfo\r\n        }\r\n\r\n        return this.sampler.getPreliminarySurfaceLevel(\r\n            QuartPos.toBlock(x),\r\n            QuartPos.toBlock(z),\r\n            terraininfo\r\n        )\r\n    }\r\n\r\n    createNoiseInterpolator(filler: NoiseFiller): NoiseInterpolator {\r\n        return new NoiseInterpolator(this, filler)\r\n    }\r\n\r\n    initializeForFirstCellX(): void {\r\n        for (const interpolator of this.interpolators) {\r\n            interpolator.initializeForFirstCellX()\r\n        }\r\n    }\r\n\r\n    advanceCellX(cellOffsetX: number): void {\r\n        for (const interpolator of this.interpolators) {\r\n            interpolator.advanceCellX(cellOffsetX)\r\n        }\r\n    }\r\n\r\n    selectCellYZ(cellY: number, cellZ: number): void {\r\n        for (const interpolator of this.interpolators) {\r\n            interpolator.selectCellYZ(cellY, cellZ)\r\n        }\r\n    }\r\n\r\n    updateForY(t: number): void {\r\n        for (const interpolator of this.interpolators) {\r\n            interpolator.updateForY(t)\r\n        }\r\n    }\r\n\r\n    updateForX(t: number) {\r\n        for (const interpolator of this.interpolators) {\r\n            interpolator.updateForX(t)\r\n        }\r\n    }\r\n\r\n    updateForZ(t: number) {\r\n        for (const interpolator of this.interpolators) {\r\n            interpolator.updateForZ(t)\r\n        }\r\n    }\r\n\r\n    swapSlices(): void {\r\n        for (const interpolator of this.interpolators) {\r\n            interpolator.swapSlices()\r\n        }\r\n    }\r\n\r\n    updateNoiseAndGenerateBaseState(x: number, y: number, z: number): Blocks | null {\r\n        return this.baseNoise(x, y, z)\r\n    }\r\n}\r\n\r\nexport type InterpolatableNoise = (chunk: NoiseChunk) => Sampler\r\n\r\n// always empty\r\nexport class Blender {\r\n    private static EMPTY = new Blender()\r\n\r\n    public blendOffsetAndFactor(x: number, y: number, terrainInfo: TerrainInfo): TerrainInfo {\r\n        return terrainInfo\r\n    }\r\n\r\n    public blendDensity(x: number, y: number, z: number, density: number): number {\r\n        return density\r\n    }\r\n\r\n    public getBiomeResolver(resolver: BiomeResolver): BiomeResolver {\r\n        return resolver\r\n    }\r\n\r\n    static empty(): Blender {\r\n        return Blender.EMPTY\r\n    }\r\n}\r\n\r\nclass TerrainInfo {\r\n    constructor(readonly offset: number, readonly factor: number, readonly jaggedness: number) {}\r\n}\r\n\r\ntype BlockStateFiller = (x: number, y: number, z: number) => Blocks | null\r\n\r\nexport class NoiseSampler implements Climate.Sampler {\r\n    private readonly baseNoise: InterpolatableNoise\r\n\r\n    private readonly blendedNoise: BlendedNoise\r\n    private readonly temperatureNoise: NormalNoise\r\n    private readonly humidityNoise: NormalNoise\r\n    private readonly continentalnessNoise: NormalNoise\r\n    private readonly erosionNoise: NormalNoise\r\n    private readonly weirdnessNoise: NormalNoise\r\n    private readonly offsetNoise: NormalNoise\r\n    private readonly jaggedNoise: NormalNoise\r\n\r\n    // water\r\n    private readonly aquiferPositionalRandomFactory: PositionalRandomFactory\r\n    private readonly barrierNoise: NormalNoise\r\n    private readonly fluidLevelFloodednessNoise: NormalNoise\r\n    private readonly fluidLevelSpreadNoise: NormalNoise\r\n    private readonly lavaNoise: NormalNoise\r\n\r\n    constructor(private readonly noiseSettings: NoiseSettings, seed: bigint, algorithm: Algorithm) {\r\n        this.baseNoise = noiseChunk =>\r\n            noiseChunk.createNoiseInterpolator({\r\n                calculateNoise: (x: number, y: number, z: number) => {\r\n                    return this.calculateBaseNoise2(\r\n                        x,\r\n                        y,\r\n                        z,\r\n                        noiseChunk.noiseData(QuartPos.fromBlock(x), QuartPos.fromBlock(z))\r\n                            .terrainInfo,\r\n                        noiseChunk.blender\r\n                    )\r\n                },\r\n            })\r\n\r\n        const largeBiomes = noiseSettings.largeBiomes\r\n        const positionalrandomfactory = Algorithm_newInstance(algorithm, seed).forkPositional()\r\n        if (algorithm != Algorithm.LEGACY) {\r\n            this.blendedNoise = BlendedNoise.create(\r\n                positionalrandomfactory.fromHashOf(\"terrain\"),\r\n                noiseSettings.noiseSamplingSettings,\r\n                noiseSettings.cellWidth,\r\n                noiseSettings.cellHeight\r\n            )\r\n            this.temperatureNoise = Noises_instantiate(\r\n                positionalrandomfactory,\r\n                largeBiomes ? Noises.TEMPERATURE_LARGE : Noises.TEMPERATURE\r\n            )\r\n            this.humidityNoise = Noises_instantiate(\r\n                positionalrandomfactory,\r\n                largeBiomes ? Noises.VEGETATION_LARGE : Noises.VEGETATION\r\n            )\r\n            this.offsetNoise = Noises_instantiate(positionalrandomfactory, Noises.SHIFT)\r\n        } else {\r\n            this.blendedNoise = BlendedNoise.create(\r\n                Algorithm_newInstance(algorithm, seed),\r\n                noiseSettings.noiseSamplingSettings,\r\n                noiseSettings.cellWidth,\r\n                noiseSettings.cellHeight\r\n            )\r\n            this.temperatureNoise = NormalNoise.createLegacyNetherBiome(\r\n                Algorithm_newInstance(algorithm, seed),\r\n                new NoiseParameters(-7, 1.0, 1.0)\r\n            )\r\n            this.humidityNoise = NormalNoise.createLegacyNetherBiome(\r\n                Algorithm_newInstance(algorithm, seed + 1n),\r\n                new NoiseParameters(-7, 1.0, 1.0)\r\n            )\r\n            this.offsetNoise = NormalNoise.create2(\r\n                positionalrandomfactory.fromHashOf(toResourceLocation(Noises.SHIFT)),\r\n                new NoiseParameters(0, 0.0)\r\n            )\r\n        }\r\n\r\n        this.aquiferPositionalRandomFactory = positionalrandomfactory\r\n            .fromHashOf(\"aquifer\")\r\n            .forkPositional()\r\n        this.barrierNoise = Noises_instantiate(positionalrandomfactory, Noises.AQUIFER_BARRIER)\r\n        this.fluidLevelFloodednessNoise = Noises_instantiate(\r\n            positionalrandomfactory,\r\n            Noises.AQUIFER_FLUID_LEVEL_FLOODEDNESS\r\n        )\r\n        this.lavaNoise = Noises_instantiate(positionalrandomfactory, Noises.AQUIFER_LAVA)\r\n        this.fluidLevelSpreadNoise = Noises_instantiate(\r\n            positionalrandomfactory,\r\n            Noises.AQUIFER_FLUID_LEVEL_SPREAD\r\n        )\r\n        this.continentalnessNoise = Noises_instantiate(\r\n            positionalrandomfactory,\r\n            largeBiomes ? Noises.CONTINENTALNESS_LARGE : Noises.CONTINENTALNESS\r\n        )\r\n        this.erosionNoise = Noises_instantiate(\r\n            positionalrandomfactory,\r\n            largeBiomes ? Noises.EROSION_LARGE : Noises.EROSION\r\n        )\r\n        this.weirdnessNoise = Noises_instantiate(positionalrandomfactory, Noises.RIDGE)\r\n        this.jaggedNoise = Noises_instantiate(positionalrandomfactory, Noises.JAGGED)\r\n    }\r\n\r\n    private calculateBaseNoise2(\r\n        x: number,\r\n        y: number,\r\n        z: number,\r\n        terrainInfo: TerrainInfo,\r\n        blender: Blender\r\n    ): number {\r\n        const blended = this.blendedNoise.calculateNoise(x, y, z)\r\n        return this.calculateBaseNoise(x, y, z, terrainInfo, blended, true, blender)\r\n    }\r\n\r\n    private calculateBaseNoise(\r\n        x: number,\r\n        y: number,\r\n        z: number,\r\n        terrainInfo: TerrainInfo,\r\n        blended: number,\r\n        useJagged: boolean,\r\n        blender: Blender\r\n    ): number {\r\n        const jagged = useJagged ? this.sampleJaggedNoise(terrainInfo.jaggedness, x, z) : 0\r\n        const density = (this.computeBaseDensity(y, terrainInfo) + jagged) * terrainInfo.factor\r\n        const height = density * (density > 0.0 ? 4 : 1)\r\n\r\n        const blendedHeight = height + blended\r\n\r\n        const someHeight = blendedHeight\r\n        const spaghettiHeight = 64\r\n        const pillars = -64\r\n\r\n        let finalHeight = Math.max(Math.min(someHeight, spaghettiHeight), pillars)\r\n        finalHeight = this.applySlide(finalHeight, Math.trunc(y / this.noiseSettings.cellHeight))\r\n        finalHeight = blender.blendDensity(x, y, z, finalHeight)\r\n\r\n        return Mth.clamp(finalHeight, -64, 64)\r\n    }\r\n\r\n    private sampleJaggedNoise(jaggedness: number, x: number, z: number): number {\r\n        if (jaggedness === 0.0) {\r\n            return 0.0\r\n        } else {\r\n            const jagged = this.jaggedNoise.getValue(x * 1500, 0, z * 1500)\r\n            return jagged > 0 ? jaggedness * jagged : (jaggedness / 2) * jagged\r\n        }\r\n    }\r\n\r\n    private computeBaseDensity(y: number, terrainInfo: TerrainInfo): number {\r\n        const normalizedY = 1 - y / 128\r\n        return normalizedY + terrainInfo.offset\r\n    }\r\n\r\n    private applySlide(height: number, cellY: number): number {\r\n        const baseCellY = cellY - this.noiseSettings.minCellY\r\n        height = this.noiseSettings.topSlideSettings.applySlide(\r\n            height,\r\n            this.noiseSettings.cellCountY - baseCellY\r\n        )\r\n        return this.noiseSettings.bottomSlideSettings.applySlide(height, baseCellY)\r\n    }\r\n\r\n    makeBaseNoiseFiller(chunk: NoiseChunk, filler: NoiseFiller): BlockStateFiller {\r\n        const baseNoiseSampler = this.baseNoise(chunk)\r\n        return (x, y, z) => {\r\n            const baseNoise = baseNoiseSampler.sample()\r\n            let clampedBaseNoise = Mth.clamp(baseNoise * 0.64, -1, 1)\r\n            clampedBaseNoise =\r\n                clampedBaseNoise / 2 - (clampedBaseNoise * clampedBaseNoise * clampedBaseNoise) / 24\r\n\r\n            clampedBaseNoise += filler.calculateNoise(x, y, z)\r\n\r\n            return chunk.aquifer.computeSubstance(x, y, z, baseNoise, clampedBaseNoise)\r\n        }\r\n    }\r\n\r\n    getPreliminarySurfaceLevel(x: number, z: number, terrainInfo: TerrainInfo): number {\r\n        for (\r\n            let cellY = this.noiseSettings.minCellY + this.noiseSettings.cellCountY;\r\n            cellY >= this.noiseSettings.minCellY;\r\n            --cellY\r\n        ) {\r\n            const y = cellY * this.noiseSettings.cellHeight\r\n            const baseNoise = this.calculateBaseNoise(\r\n                x,\r\n                y,\r\n                z,\r\n                terrainInfo,\r\n                -0.703125,\r\n                false,\r\n                Blender.empty()\r\n            )\r\n            if (baseNoise > 0.390625) {\r\n                return y\r\n            }\r\n        }\r\n\r\n        return 2 ** 31 - 1\r\n    }\r\n\r\n    createAquifer(\r\n        noiseChunk: NoiseChunk,\r\n        x: number,\r\n        y: number,\r\n        cellX: number,\r\n        cellY: number,\r\n        picker: FluidPicker,\r\n        enabled: boolean\r\n    ): Aquifer {\r\n        if (!enabled) {\r\n            return Aquifer.createDisabled(picker)\r\n        } else {\r\n            const sectionX = SectionPos.blockToSectionCoord(x)\r\n            const sectionY = SectionPos.blockToSectionCoord(y)\r\n            return Aquifer.create(\r\n                noiseChunk,\r\n                new ChunkPos(sectionX, sectionY),\r\n                this.barrierNoise,\r\n                this.fluidLevelFloodednessNoise,\r\n                this.fluidLevelSpreadNoise,\r\n                this.lavaNoise,\r\n                this.aquiferPositionalRandomFactory,\r\n                cellX * this.noiseSettings.cellHeight,\r\n                cellY * this.noiseSettings.cellHeight,\r\n                picker\r\n            )\r\n        }\r\n    }\r\n\r\n    noiseData(x: number, z: number, blender: Blender): FlatNoiseData {\r\n        const shiftedX = x + this.getOffset(x, 0, z)\r\n        const shiftedZ = z + this.getOffset(z, x, 0)\r\n        const continentalness = this.getContinentalness(shiftedX, 0, shiftedZ)\r\n        const weirdness = this.getWeirdness(shiftedX, 0, shiftedZ)\r\n        const erosion = this.getErosion(shiftedX, 0, shiftedZ)\r\n        const terrainInfo = this.terrainInfo(\r\n            QuartPos.toBlock(x),\r\n            QuartPos.toBlock(z),\r\n            continentalness,\r\n            weirdness,\r\n            erosion,\r\n            blender\r\n        )\r\n        return new FlatNoiseData(\r\n            shiftedX,\r\n            shiftedZ,\r\n            continentalness,\r\n            weirdness,\r\n            erosion,\r\n            terrainInfo\r\n        )\r\n    }\r\n\r\n    sample(x: number, y: number, z: number): TargetPoint {\r\n        return this.target(x, y, z, this.noiseData(x, z, Blender.empty()))\r\n    }\r\n\r\n    target(x: number, y: number, z: number, flatData: FlatNoiseData): TargetPoint {\r\n        const shiftedX = flatData.shiftedX\r\n        const shiftedY = y + this.getOffset(y, z, x)\r\n        const shiftedZ = flatData.shiftedZ\r\n        const baseDensity = this.computeBaseDensity(QuartPos.toBlock(y), flatData.terrainInfo)\r\n        return Climate.target(\r\n            this.getTemperature(shiftedX, shiftedY, shiftedZ),\r\n            this.getHumidity(shiftedX, shiftedY, shiftedZ),\r\n            flatData.continentalness,\r\n            flatData.erosion,\r\n            baseDensity,\r\n            flatData.weirdness\r\n        )\r\n    }\r\n\r\n    terrainInfo(\r\n        x: number,\r\n        y: number,\r\n        continents: number,\r\n        weirdness: number,\r\n        erosion: number,\r\n        blender: Blender\r\n    ): TerrainInfo {\r\n        const terrainShaper = this.noiseSettings.terrainShaper\r\n        const point = terrainShaper.makePoint(continents, erosion, weirdness)\r\n        const offset = terrainShaper.offset(point)\r\n        const factor = terrainShaper.factor(point)\r\n        const jaggedness = terrainShaper.jaggedness(point)\r\n        const terrainInfo = new TerrainInfo(offset, factor, jaggedness)\r\n        return blender.blendOffsetAndFactor(x, y, terrainInfo)\r\n    }\r\n\r\n    getOffset(x: number, y: number, z: number): number {\r\n        return this.offsetNoise.getValue(x, y, z) * 4\r\n    }\r\n\r\n    private getTemperature(x: number, y: number, z: number): number {\r\n        return this.temperatureNoise.getValue(x, 0, z)\r\n    }\r\n\r\n    private getHumidity(x: number, y: number, z: number): number {\r\n        return this.humidityNoise.getValue(x, 0, z)\r\n    }\r\n\r\n    public getContinentalness(x: number, y: number, z: number): number {\r\n        return this.continentalnessNoise.getValue(x, y, z)\r\n    }\r\n\r\n    public getErosion(x: number, y: number, z: number): number {\r\n        return this.erosionNoise.getValue(x, y, z)\r\n    }\r\n\r\n    public getWeirdness(x: number, y: number, z: number): number {\r\n        return this.weirdnessNoise.getValue(x, y, z)\r\n    }\r\n}\r\n\r\ninterface WorldGenMaterialRule {\r\n    apply(noiseChunk: NoiseChunk, x: number, y: number, z: number): Blocks | null\r\n}\r\nclass MaterialRuleList implements WorldGenMaterialRule {\r\n    constructor(private readonly materialRuleList: WorldGenMaterialRule[]) {}\r\n\r\n    apply(noiseChunk: NoiseChunk, x: number, y: number, z: number): Blocks | null {\r\n        for (const worldgenmaterialrule of this.materialRuleList) {\r\n            const blockState = worldgenmaterialrule.apply(noiseChunk, x, y, z)\r\n            if (blockState != null) {\r\n                return blockState\r\n            }\r\n        }\r\n\r\n        return null\r\n    }\r\n}\r\n\r\nclass BelowZeroRetrogen {\r\n    static getBiomeResolver(resolver: BiomeResolver, chunkAccess: ChunkAccess): BiomeResolver {\r\n        return resolver\r\n    }\r\n}\r\n\r\nclass Beardifier {\r\n    constructor(private readonly chunkAccess: ChunkAccess) {\r\n        //\r\n    }\r\n\r\n    calculateNoise(x: number, y: number, z: number): number {\r\n        return 0\r\n    }\r\n}\r\n\r\nexport class NoiseBasedChunkGenerator extends ChunkGenerator {\r\n    private readonly defaultBlock: Blocks\r\n    private readonly sampler: NoiseSampler\r\n    private readonly surfaceSystem: SurfaceSystem\r\n    private readonly materialRule: WorldGenMaterialRule\r\n    private readonly globalFluidPicker: FluidPicker\r\n\r\n    constructor(\r\n        biomeSource: BiomeSource,\r\n        private readonly seed: bigint,\r\n        private readonly settings: NoiseGeneratorSettings\r\n    ) {\r\n        super(biomeSource)\r\n\r\n        this.defaultBlock = settings.defaultBlock\r\n\r\n        const noiseSettings = settings.noiseSettings\r\n\r\n        this.sampler = new NoiseSampler(noiseSettings, seed, settings.randomSource)\r\n\r\n        this.materialRule = new MaterialRuleList([\r\n            {\r\n                apply: (noiseChunk: NoiseChunk, x: number, y: number, z: number) =>\r\n                    noiseChunk.updateNoiseAndGenerateBaseState(x, y, z),\r\n            },\r\n        ])\r\n        const lava = new FluidStatus(-54, Blocks.LAVA)\r\n        const seaLevel = settings.seaLevel\r\n        const defaultFluid = new FluidStatus(seaLevel, settings.defaultFluid)\r\n        const air = new FluidStatus(noiseSettings.minY - 1, Blocks.AIR)\r\n        this.globalFluidPicker = {\r\n            computeFluid: (x: number, y: number): FluidStatus => {\r\n                return y < Math.min(-54, seaLevel) ? lava : defaultFluid\r\n            },\r\n        }\r\n        this.surfaceSystem = new SurfaceSystem(\r\n            this.defaultBlock,\r\n            seaLevel,\r\n            seed,\r\n            settings.randomSource\r\n        )\r\n    }\r\n\r\n    withSeed(seed: bigint): ChunkGenerator {\r\n        return new NoiseBasedChunkGenerator(this.biomeSource.withSeed(seed), seed, this.settings)\r\n    }\r\n\r\n    climateSampler(): Climate.Sampler {\r\n        return this.sampler\r\n    }\r\n\r\n    createBiomes(blender: Blender, chunkAccess: ChunkAccess): ChunkAccess {\r\n        const noiseChunk = chunkAccess.getOrCreateNoiseChunk(\r\n            this.sampler,\r\n            () => {\r\n                return new Beardifier(chunkAccess)\r\n            },\r\n            this.settings,\r\n            this.globalFluidPicker,\r\n            blender\r\n        )\r\n        const biomeResolver = BelowZeroRetrogen.getBiomeResolver(\r\n            blender.getBiomeResolver(this.biomeSource),\r\n            chunkAccess\r\n        )\r\n        chunkAccess.fillBiomesFromNoise(biomeResolver, {\r\n            sample: (x: number, y: number, z: number): TargetPoint => {\r\n                return this.sampler.target(x, y, z, noiseChunk.noiseData(x, z))\r\n            },\r\n        })\r\n\r\n        return chunkAccess\r\n    }\r\n\r\n    getGenDepth(): number {\r\n        return this.settings.noiseSettings.height\r\n    }\r\n\r\n    getSeaLevel(): number {\r\n        return this.settings.seaLevel\r\n    }\r\n\r\n    getMinY(): number {\r\n        return this.settings.noiseSettings.minY\r\n    }\r\n}\r\n","/**\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\n *\n * @version 0.9.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA256_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [-2147483648, 8388608, 32768, 128];\n  var SHIFT = [24, 16, 8, 0];\n  var K = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n  ];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];\n\n  var blocks = [];\n\n  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (outputType, is224) {\n    return function (message) {\n      return new Sha256(is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createMethod = function (is224) {\n    var method = createOutputMethod('hex', is224);\n    if (NODE_JS) {\n      method = nodeWrap(method, is224);\n    }\n    method.create = function () {\n      return new Sha256(is224);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method, is224) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var algorithm = is224 ? 'sha224' : 'sha256';\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw new Error(ERROR);\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  var createHmacOutputMethod = function (outputType, is224) {\n    return function (key, message) {\n      return new HmacSha256(key, is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createHmacMethod = function (is224) {\n    var method = createHmacOutputMethod('hex', is224);\n    method.create = function (key) {\n      return new HmacSha256(key, is224);\n    };\n    method.update = function (key, message) {\n      return method.create(key).update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createHmacOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  function Sha256(is224, sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n    } else {\n      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    if (is224) {\n      this.h0 = 0xc1059ed8;\n      this.h1 = 0x367cd507;\n      this.h2 = 0x3070dd17;\n      this.h3 = 0xf70e5939;\n      this.h4 = 0xffc00b31;\n      this.h5 = 0x68581511;\n      this.h6 = 0x64f98fa7;\n      this.h7 = 0xbefa4fa4;\n    } else { // 256\n      this.h0 = 0x6a09e667;\n      this.h1 = 0xbb67ae85;\n      this.h2 = 0x3c6ef372;\n      this.h3 = 0xa54ff53a;\n      this.h4 = 0x510e527f;\n      this.h5 = 0x9b05688c;\n      this.h6 = 0x1f83d9ab;\n      this.h7 = 0x5be0cd19;\n    }\n\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n    this.is224 = is224;\n  }\n\n  Sha256.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(ERROR);\n          }\n        }\n      } else {\n        throw new Error(ERROR);\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n          blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n          blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        for (i = this.start; index < length && i < 64; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < 64; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.block = blocks[16];\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Sha256.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = this.block;\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n  };\n\n  Sha256.prototype.hash = function () {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,\n      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\n\n    for (j = 16; j < 64; ++j) {\n      // rightrotate\n      t1 = blocks[j - 15];\n      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);\n      t1 = blocks[j - 2];\n      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);\n      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;\n    }\n\n    bc = b & c;\n    for (j = 0; j < 64; j += 4) {\n      if (this.first) {\n        if (this.is224) {\n          ab = 300032;\n          t1 = blocks[0] - 1413257819;\n          h = t1 - 150054599 << 0;\n          d = t1 + 24177077 << 0;\n        } else {\n          ab = 704751109;\n          t1 = blocks[0] - 210244248;\n          h = t1 - 1521486534 << 0;\n          d = t1 + 143694565 << 0;\n        }\n        this.first = false;\n      } else {\n        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));\n        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));\n        ab = a & b;\n        maj = ab ^ (a & c) ^ bc;\n        ch = (e & f) ^ (~e & g);\n        t1 = h + s1 + ch + K[j] + blocks[j];\n        t2 = s0 + maj;\n        h = d + t1 << 0;\n        d = t1 + t2 << 0;\n      }\n      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));\n      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));\n      da = d & a;\n      maj = da ^ (d & b) ^ ab;\n      ch = (h & e) ^ (~h & f);\n      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];\n      t2 = s0 + maj;\n      g = c + t1 << 0;\n      c = t1 + t2 << 0;\n      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));\n      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));\n      cd = c & d;\n      maj = cd ^ (c & a) ^ da;\n      ch = (g & h) ^ (~g & e);\n      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];\n      t2 = s0 + maj;\n      f = b + t1 << 0;\n      b = t1 + t2 << 0;\n      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));\n      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));\n      bc = b & c;\n      maj = bc ^ (b & d) ^ cd;\n      ch = (f & g) ^ (~f & h);\n      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];\n      t2 = s0 + maj;\n      e = a + t1 << 0;\n      a = t1 + t2 << 0;\n    }\n\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n    this.h5 = this.h5 + f << 0;\n    this.h6 = this.h6 + g << 0;\n    this.h7 = this.h7 + h << 0;\n  };\n\n  Sha256.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +\n      HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +\n      HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +\n      HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +\n      HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +\n      HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +\n      HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +\n      HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +\n      HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +\n      HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +\n      HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +\n      HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];\n    if (!this.is224) {\n      hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +\n        HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +\n        HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +\n        HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];\n    }\n    return hex;\n  };\n\n  Sha256.prototype.toString = Sha256.prototype.hex;\n\n  Sha256.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var arr = [\n      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,\n      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,\n      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,\n      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,\n      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,\n      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,\n      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF\n    ];\n    if (!this.is224) {\n      arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);\n    }\n    return arr;\n  };\n\n  Sha256.prototype.array = Sha256.prototype.digest;\n\n  Sha256.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    dataView.setUint32(20, this.h5);\n    dataView.setUint32(24, this.h6);\n    if (!this.is224) {\n      dataView.setUint32(28, this.h7);\n    }\n    return buffer;\n  };\n\n  function HmacSha256(key, is224, sharedMemory) {\n    var i, type = typeof key;\n    if (type === 'string') {\n      var bytes = [], length = key.length, index = 0, code;\n      for (i = 0; i < length; ++i) {\n        code = key.charCodeAt(i);\n        if (code < 0x80) {\n          bytes[index++] = code;\n        } else if (code < 0x800) {\n          bytes[index++] = (0xc0 | (code >> 6));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes[index++] = (0xe0 | (code >> 12));\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));\n          bytes[index++] = (0xf0 | (code >> 18));\n          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        }\n      }\n      key = bytes;\n    } else {\n      if (type === 'object') {\n        if (key === null) {\n          throw new Error(ERROR);\n        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {\n          key = new Uint8Array(key);\n        } else if (!Array.isArray(key)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {\n            throw new Error(ERROR);\n          }\n        }\n      } else {\n        throw new Error(ERROR);\n      }\n    }\n\n    if (key.length > 64) {\n      key = (new Sha256(is224, true)).update(key).array();\n    }\n\n    var oKeyPad = [], iKeyPad = [];\n    for (i = 0; i < 64; ++i) {\n      var b = key[i] || 0;\n      oKeyPad[i] = 0x5c ^ b;\n      iKeyPad[i] = 0x36 ^ b;\n    }\n\n    Sha256.call(this, is224, sharedMemory);\n\n    this.update(iKeyPad);\n    this.oKeyPad = oKeyPad;\n    this.inner = true;\n    this.sharedMemory = sharedMemory;\n  }\n  HmacSha256.prototype = new Sha256();\n\n  HmacSha256.prototype.finalize = function () {\n    Sha256.prototype.finalize.call(this);\n    if (this.inner) {\n      this.inner = false;\n      var innerHash = this.array();\n      Sha256.call(this, this.is224, this.sharedMemory);\n      this.update(this.oKeyPad);\n      this.update(innerHash);\n      Sha256.prototype.finalize.call(this);\n    }\n  };\n\n  var exports = createMethod();\n  exports.sha256 = exports;\n  exports.sha224 = createMethod(true);\n  exports.sha256.hmac = createHmacMethod();\n  exports.sha224.hmac = createHmacMethod(true);\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.sha256 = exports.sha256;\n    root.sha224 = exports.sha224;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","import { Biomes } from \"./biomes\"\r\nimport { NoiseBiomeSource, QuartPos } from \"./chunk-generator\"\r\nimport * as Climate from \"./climate\"\r\nimport { ParameterPoint, TargetPoint, findValueBruteForce } from \"./climate\"\r\nimport { Pair } from \"./consumer\"\r\nimport { sha256 } from \"js-sha256\"\r\nimport { BlockPos } from \"./pos\"\r\nimport * as Mth from \"./mth\"\r\nimport { LinearCongruentialGenerator } from \"./random\"\r\n\r\nexport interface BiomeResolver {\r\n    getNoiseBiome(x: number, y: number, z: number, sampler: Climate.Sampler): Biomes\r\n}\r\n\r\nexport abstract class BiomeSource implements BiomeResolver {\r\n    private readonly biomes: Set<Biomes>\r\n\r\n    constructor(biomes: Biomes[]) {\r\n        this.biomes = new Set(biomes)\r\n    }\r\n\r\n    abstract getNoiseBiome(x: number, y: number, z: number, sampler: Climate.Sampler): Biomes\r\n\r\n    abstract withSeed(seed: bigint): BiomeSource\r\n}\r\n\r\nexport class MultiNoiseBiomeSource extends BiomeSource {\r\n    constructor(private readonly parameters: Pair<ParameterPoint, Biomes>[]) {\r\n        super(parameters.map(e => e.second))\r\n    }\r\n\r\n    withSeed(seed: bigint): BiomeSource {\r\n        return this\r\n    }\r\n\r\n    getNoiseBiome(x: number, y: number, z: number, sampler: Climate.Sampler): Biomes\r\n    getNoiseBiome(targetPoint: TargetPoint): Biomes\r\n    getNoiseBiome(\r\n        x: TargetPoint | number,\r\n        y?: number,\r\n        z?: number,\r\n        sampler?: Climate.Sampler\r\n    ): Biomes {\r\n        if (typeof x === \"number\") {\r\n            if (y === undefined || z === undefined || !sampler) {\r\n                throw new Error()\r\n            }\r\n            x = sampler.sample(x, y, z)\r\n        }\r\n\r\n        return findValueBruteForce(x, this.parameters)\r\n    }\r\n}\r\n\r\nfunction toBytes(str: string): Uint8Array {\r\n    const length = str.length\r\n    const bArr = new Uint8Array(length / 2)\r\n    for (let i = 0; i < length; i += 2) {\r\n        bArr[i / 2] = parseInt(str.charAt(i + 1), 16) + (parseInt(str.charAt(i), 16) << 4)\r\n    }\r\n    return bArr\r\n}\r\n\r\nexport class BiomeManager {\r\n    public static readonly CHUNK_CENTER_QUART = QuartPos.fromBlock(8)\r\n    private static readonly ZOOM_BITS = 2\r\n    private static readonly ZOOM = 4\r\n    private static readonly ZOOM_MASK = 3\r\n\r\n    constructor(\r\n        private readonly noiseBiomeSource: NoiseBiomeSource,\r\n        private readonly biomeZoomSeed: bigint\r\n    ) {}\r\n\r\n    public static obfuscateSeed(seed: bigint): bigint {\r\n        const input = new Uint8Array(BigInt64Array.from([seed]).buffer)\r\n        const output = sha256.digest(input)\r\n        return new BigInt64Array(Uint8Array.from(output).buffer)[0]\r\n    }\r\n\r\n    public withDifferentSource(biomeSource: NoiseBiomeSource): BiomeManager {\r\n        return new BiomeManager(biomeSource, this.biomeZoomSeed)\r\n    }\r\n\r\n    public getBiome(pos: BlockPos): Biomes {\r\n        const x = pos.x - 2\r\n        const y = pos.y - 2\r\n        const z = pos.z - 2\r\n        const shiftedX = x >> 2\r\n        const shiftedY = y >> 2\r\n        const shiftedZ = z >> 2\r\n        const fracX = (x & 3) / 4\r\n        const fracY = (y & 3) / 4\r\n        const fracZ = (z & 3) / 4\r\n        let minIndex = 0\r\n        let minDistance = Infinity\r\n\r\n        for (let index = 0; index < 8; ++index) {\r\n            const shouldUseNextX = (index & 4) == 0\r\n            const shouldUseNextY = (index & 2) == 0\r\n            const shouldUseNextZ = (index & 1) == 0\r\n            const xToUse = shouldUseNextX ? shiftedX : shiftedX + 1\r\n            const yToUse = shouldUseNextY ? shiftedY : shiftedY + 1\r\n            const zToUse = shouldUseNextZ ? shiftedZ : shiftedZ + 1\r\n            const xFractToUse = shouldUseNextX ? fracX : fracX - 1\r\n            const yFractToUse = shouldUseNextY ? fracY : fracY - 1\r\n            const zFractToUse = shouldUseNextZ ? fracZ : fracZ - 1\r\n            const distance = BiomeManager.getFiddledDistance(\r\n                this.biomeZoomSeed,\r\n                xToUse,\r\n                yToUse,\r\n                zToUse,\r\n                xFractToUse,\r\n                yFractToUse,\r\n                zFractToUse\r\n            )\r\n            if (minDistance > distance) {\r\n                minIndex = index\r\n                minDistance = distance\r\n            }\r\n        }\r\n\r\n        const resultX = (minIndex & 4) == 0 ? shiftedX : shiftedX + 1\r\n        const resultY = (minIndex & 2) == 0 ? shiftedY : shiftedY + 1\r\n        const resultZ = (minIndex & 1) == 0 ? shiftedZ : shiftedZ + 1\r\n\r\n        return this.noiseBiomeSource.getNoiseBiome(resultX, resultY, resultZ)\r\n    }\r\n\r\n    public getNoiseBiomeAtPosition(x: number, y: number, z: number): Biomes\r\n    public getNoiseBiomeAtPosition(pos: BlockPos): Biomes\r\n    public getNoiseBiomeAtPosition(x: number | BlockPos, y?: number, z?: number): Biomes {\r\n        if (typeof x === \"number\") {\r\n            const qx = QuartPos.fromBlock(Mth.floor(x))\r\n            const qy = QuartPos.fromBlock(Mth.floor(y!))\r\n            const qz = QuartPos.fromBlock(Mth.floor(z!))\r\n            return this.getNoiseBiomeAtQuart(qx, qy, qz)\r\n        } else {\r\n            const pos = x\r\n            const qx = QuartPos.fromBlock(pos.x)\r\n            const qy = QuartPos.fromBlock(pos.y)\r\n            const qz = QuartPos.fromBlock(pos.z)\r\n            return this.getNoiseBiomeAtQuart(qx, qy, qz)\r\n        }\r\n    }\r\n\r\n    public getNoiseBiomeAtQuart(qx: number, qy: number, qz: number): Biomes {\r\n        return this.noiseBiomeSource.getNoiseBiome(qx, qy, qz)\r\n    }\r\n\r\n    private static getFiddledDistance(\r\n        initialSeed: bigint,\r\n        x: number,\r\n        y: number,\r\n        z: number,\r\n        xFract: number,\r\n        yFract: number,\r\n        zFract: number\r\n    ): number {\r\n        let seed = LinearCongruentialGenerator.next(initialSeed, Mth.toLong(x))\r\n        seed = LinearCongruentialGenerator.next(seed, Mth.toLong(y))\r\n        seed = LinearCongruentialGenerator.next(seed, Mth.toLong(z))\r\n        seed = LinearCongruentialGenerator.next(seed, Mth.toLong(x))\r\n        seed = LinearCongruentialGenerator.next(seed, Mth.toLong(y))\r\n        seed = LinearCongruentialGenerator.next(seed, Mth.toLong(z))\r\n        const xOffset = BiomeManager.getFiddle(seed)\r\n        seed = LinearCongruentialGenerator.next(seed, initialSeed)\r\n        const yOffset = BiomeManager.getFiddle(seed)\r\n        seed = LinearCongruentialGenerator.next(seed, initialSeed)\r\n        const zOffset = BiomeManager.getFiddle(seed)\r\n        return (\r\n            Mth.square(zFract + zOffset) +\r\n            Mth.square(yFract + yOffset) +\r\n            Mth.square(xFract + xOffset)\r\n        )\r\n    }\r\n\r\n    private static getFiddle(seed: bigint): number {\r\n        const r = Mth.floorMod(seed >> 24n, 1024) / 1024\r\n        return (r - 0.5) * 0.9\r\n    }\r\n}\r\n","import { BiomeManager } from \"./biome-source\"\r\nimport { Biomes } from \"./biomes\"\r\nimport { Blender, ChunkGenerator, ChunkPos, NoiseBiomeSource, QuartPos } from \"./chunk-generator\"\r\nimport { ChunkAccess } from \"./chunks\"\r\nimport { ServerLevel, WorldGenRegion } from \"./level\"\r\nimport * as Climate from \"./climate\"\r\n\r\nexport enum HeightmapTypes {\r\n    WORLD_SURFACE_WG = \"WORLD_SURFACE_WG\",\r\n    WORLD_SURFACE = \"WORLD_SURFACE\",\r\n    OCEAN_FLOOR_WG = \"OCEAN_FLOOR_WG\",\r\n    OCEAN_FLOOR = \"OCEAN_FLOOR\",\r\n    MOTION_BLOCKING = \"MOTION_BLOCKING\",\r\n    MOTION_BLOCKING_NO_LEAVES = \"MOTION_BLOCKING_NO_LEAVES\",\r\n}\r\n\r\ntype GenerationTask = (\r\n    chunkStatus: ChunkStatus,\r\n    level: ServerLevel,\r\n    generator: ChunkGenerator,\r\n    converter: (chunkAccess: ChunkAccess) => ChunkAccess,\r\n    cache: ChunkAccess[],\r\n    chunkAccess: ChunkAccess\r\n) => ChunkAccess\r\n\r\ntype LoadingTask = (\r\n    chunkStatus: ChunkStatus,\r\n    level: ServerLevel,\r\n    chunkAccess: ChunkAccess\r\n) => ChunkAccess\r\n\r\nconst PASSTHROUGH_LOAD_TASK = (\r\n    chunkStatus: ChunkStatus,\r\n    level: ServerLevel,\r\n    chunkAccess: ChunkAccess\r\n) => chunkAccess\r\n\r\nexport class ChunkStatus {\r\n    parent: ChunkStatus\r\n    index: number\r\n\r\n    constructor(\r\n        private readonly name: string,\r\n        parent: ChunkStatus | null,\r\n        private readonly range: number,\r\n        private readonly heightmapsAfter: HeightmapTypes[],\r\n        private readonly generationTask: GenerationTask,\r\n        private readonly loadingTask: LoadingTask\r\n    ) {\r\n        this.parent = parent == null ? this : parent\r\n        this.index = parent == null ? 0 : parent.index + 1\r\n    }\r\n\r\n    isOrAfter(otherStatus: ChunkStatus): boolean {\r\n        return this.index >= otherStatus.index\r\n    }\r\n}\r\n\r\nconst PRE_FEATURES = [HeightmapTypes.OCEAN_FLOOR_WG, HeightmapTypes.WORLD_SURFACE_WG]\r\nconst POST_FEATURES = [\r\n    HeightmapTypes.OCEAN_FLOOR,\r\n    HeightmapTypes.WORLD_SURFACE,\r\n    HeightmapTypes.MOTION_BLOCKING,\r\n    HeightmapTypes.MOTION_BLOCKING_NO_LEAVES,\r\n]\r\n\r\nexport const EMPTY = registerSimple(\r\n    \"empty\",\r\n    null,\r\n    -1,\r\n    PRE_FEATURES,\r\n    (\r\n        chunkStatus: ChunkStatus,\r\n        level: ServerLevel,\r\n        generator: ChunkGenerator,\r\n        converter: (chunkAccess: ChunkAccess) => ChunkAccess,\r\n        cache: ChunkAccess[],\r\n        chunkAccess: ChunkAccess\r\n    ) => chunkAccess\r\n)\r\n\r\nexport const STRUCTURE_STARTS = register(\r\n    \"structure_starts\",\r\n    EMPTY,\r\n    0,\r\n    PRE_FEATURES,\r\n    (\r\n        chunkStatus: ChunkStatus,\r\n        level: ServerLevel,\r\n        generator: ChunkGenerator,\r\n        converter: (chunkAccess: ChunkAccess) => ChunkAccess,\r\n        cache: ChunkAccess[],\r\n        chunkAccess: ChunkAccess\r\n    ) => chunkAccess\r\n)\r\n\r\nexport const STRUCTURE_REFERENCES = registerSimple(\r\n    \"structure_references\",\r\n    STRUCTURE_STARTS,\r\n    8,\r\n    PRE_FEATURES,\r\n    (\r\n        chunkStatus: ChunkStatus,\r\n        level: ServerLevel,\r\n        generator: ChunkGenerator,\r\n        converter: (chunkAccess: ChunkAccess) => ChunkAccess,\r\n        cache: ChunkAccess[],\r\n        chunkAccess: ChunkAccess\r\n    ) => chunkAccess\r\n)\r\n\r\nexport const BIOMES = register(\r\n    \"biomes\",\r\n    STRUCTURE_REFERENCES,\r\n    8,\r\n    PRE_FEATURES,\r\n    (\r\n        chunkStatus: ChunkStatus,\r\n        level: ServerLevel,\r\n        generator: ChunkGenerator,\r\n        converter: (chunkAccess: ChunkAccess) => ChunkAccess,\r\n        cache: ChunkAccess[],\r\n        chunkAccess: ChunkAccess\r\n    ) => {\r\n        return generator.createBiomes(Blender.empty(), chunkAccess)\r\n    }\r\n)\r\n\r\nfunction registerSimple(\r\n    name: string,\r\n    chunkStatus: ChunkStatus | null,\r\n    range: number,\r\n    heightmapsAfter: HeightmapTypes[],\r\n    generationTask: GenerationTask\r\n): ChunkStatus {\r\n    return register(name, chunkStatus, range, heightmapsAfter, generationTask)\r\n}\r\n\r\nfunction register(\r\n    name: string,\r\n    chunkStatus: ChunkStatus | null,\r\n    range: number,\r\n    heightmapsAfter: HeightmapTypes[],\r\n    generationTask: GenerationTask,\r\n    loadingTask: LoadingTask = PASSTHROUGH_LOAD_TASK\r\n): ChunkStatus {\r\n    return new ChunkStatus(name, chunkStatus, range, heightmapsAfter, generationTask, loadingTask)\r\n}\r\n","import { BiomeResolver } from \"./biome-source\"\r\nimport {\r\n    Blender,\r\n    ChunkPos,\r\n    NoiseChunk,\r\n    NoiseGeneratorSettings,\r\n    NoiseSampler,\r\n    QuartPos,\r\n} from \"./chunk-generator\"\r\nimport { BlockPos, SectionPos } from \"./pos\"\r\nimport * as Climate from \"./climate\"\r\nimport { ChunkStatus, EMPTY } from \"./chunk-status\"\r\nimport { Biomes } from \"./biomes\"\r\nimport * as Mth from \"./mth\"\r\nimport { Blocks } from \"./blocks\"\r\nimport { Supplier } from \"./consumer\"\r\nimport { NoiseFiller } from \"./noise/blended-noise\"\r\nimport { FluidPicker } from \"./aquifer\"\r\n\r\n// chunk access\r\n\r\nexport class LevelHeightAccessor {\r\n    getHeight(): number {\r\n        return 384\r\n    }\r\n\r\n    getMinBuildHeight(): number {\r\n        return -64\r\n    }\r\n\r\n    getMaxBuildHeight(): number {\r\n        return this.getMinBuildHeight() + this.getHeight()\r\n    }\r\n\r\n    getSectionsCount(): number {\r\n        return this.getMaxSection() - this.getMinSection()\r\n    }\r\n\r\n    getMinSection(): number {\r\n        return SectionPos.blockToSectionCoord(this.getMinBuildHeight())\r\n    }\r\n\r\n    getMaxSection(): number {\r\n        return SectionPos.blockToSectionCoord(this.getMaxBuildHeight() - 1) + 1\r\n    }\r\n\r\n    isOutsideBuildHeight(y: number): boolean\r\n    isOutsideBuildHeight(pos: BlockPos): boolean\r\n    isOutsideBuildHeight(y: number | BlockPos): boolean {\r\n        if (typeof y === \"number\") {\r\n            return y < this.getMinBuildHeight() || y >= this.getMaxBuildHeight()\r\n        } else {\r\n            const pos = y\r\n            return this.isOutsideBuildHeight(pos.y)\r\n        }\r\n    }\r\n\r\n    getSectionIndex(coord: number): number {\r\n        return this.getSectionIndexFromSectionY(SectionPos.blockToSectionCoord(coord))\r\n    }\r\n\r\n    getSectionIndexFromSectionY(y: number): number {\r\n        return y - this.getMinSection()\r\n    }\r\n\r\n    getSectionYFromSectionIndex(sectionIndex: number): number {\r\n        return sectionIndex + this.getMinSection()\r\n    }\r\n}\r\nexport class LevelChunkSection {\r\n    public static readonly SECTION_WIDTH = 16\r\n    public static readonly SECTION_HEIGHT = 16\r\n    public static readonly SECTION_SIZE = 4096\r\n    public static readonly BIOME_CONTAINER_BITS = 2\r\n    public static readonly STATES_CONTAINER_BITS = 4\r\n\r\n    public static readonly BIOME_CONTAINER_SIZE = 1 << LevelChunkSection.BIOME_CONTAINER_BITS\r\n    public static readonly STATES_CONTAINER_SIZE = 1 << LevelChunkSection.STATES_CONTAINER_BITS\r\n\r\n    private readonly bottomBlockY: number\r\n    private readonly biomes: Biomes[]\r\n    private readonly states: Blocks[]\r\n\r\n    constructor(y: number) {\r\n        this.bottomBlockY = LevelChunkSection.getBottomBlockY(y)\r\n\r\n        const biomesSize = 1 << LevelChunkSection.BIOME_CONTAINER_BITS\r\n        this.biomes = new Array(biomesSize * biomesSize * biomesSize) as Biomes[]\r\n        this.biomes.fill(Biomes.PLAINS)\r\n\r\n        const statesSize = 1 << LevelChunkSection.STATES_CONTAINER_BITS\r\n        this.states = new Array(statesSize * statesSize * statesSize) as Blocks[]\r\n        this.states.fill(Blocks.AIR)\r\n    }\r\n\r\n    static getBottomBlockY(y: number): number {\r\n        return y << 4\r\n    }\r\n\r\n    private static getBlockStateIndex(x: number, y: number, z: number): number {\r\n        return (\r\n            z * LevelChunkSection.STATES_CONTAINER_BITS * LevelChunkSection.STATES_CONTAINER_BITS +\r\n            y * LevelChunkSection.STATES_CONTAINER_BITS +\r\n            x\r\n        )\r\n    }\r\n\r\n    private static getBiomesIndex(x: number, y: number, z: number): number {\r\n        return (\r\n            z * LevelChunkSection.BIOME_CONTAINER_SIZE * LevelChunkSection.BIOME_CONTAINER_SIZE +\r\n            y * LevelChunkSection.BIOME_CONTAINER_SIZE +\r\n            x\r\n        )\r\n    }\r\n\r\n    getBlockState(x: number, y: number, z: number): Blocks {\r\n        const index = LevelChunkSection.getBlockStateIndex(x, y, z)\r\n        return this.states[index]\r\n    }\r\n\r\n    setBlockState(x: number, y: number, z: number, block: Blocks): Blocks {\r\n        const index = LevelChunkSection.getBlockStateIndex(x, y, z)\r\n        const prevBlock = this.states[index]\r\n        this.states[index] = block\r\n        return prevBlock\r\n    }\r\n\r\n    getNoiseBiome(x: number, y: number, z: number): Biomes {\r\n        const index = LevelChunkSection.getBiomesIndex(x, y, z)\r\n        return this.biomes[index]\r\n    }\r\n\r\n    fillBiomesFromNoise(\r\n        resolver: BiomeResolver,\r\n        sampler: Climate.Sampler,\r\n        offsetX: number,\r\n        offsetZ: number\r\n    ): void {\r\n        const offsetY = QuartPos.fromBlock(this.bottomBlockY)\r\n\r\n        for (let x = 0; x < 4; ++x) {\r\n            for (let y = 0; y < 4; ++y) {\r\n                for (let z = 0; z < 4; ++z) {\r\n                    const index = LevelChunkSection.getBiomesIndex(x, y, z)\r\n\r\n                    this.biomes[index] = resolver.getNoiseBiome(\r\n                        offsetX + x,\r\n                        offsetY + y,\r\n                        offsetZ + z,\r\n                        sampler\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport abstract class ChunkAccess extends LevelHeightAccessor {\r\n    private readonly sections: LevelChunkSection[]\r\n    private noiseChunk: NoiseChunk\r\n\r\n    constructor(\r\n        readonly chunkPos: ChunkPos,\r\n        private readonly levelHeightAccessor: LevelHeightAccessor\r\n    ) {\r\n        super()\r\n        this.sections = new Array(levelHeightAccessor.getSectionsCount()) as LevelChunkSection[]\r\n\r\n        ChunkAccess.replaceMissingSections(levelHeightAccessor, this.sections)\r\n    }\r\n\r\n    private static replaceMissingSections(\r\n        heightAccessor: LevelHeightAccessor,\r\n        section: LevelChunkSection[]\r\n    ): void {\r\n        for (let i = 0; i < section.length; ++i) {\r\n            if (section[i] == null) {\r\n                section[i] = new LevelChunkSection(heightAccessor.getSectionYFromSectionIndex(i))\r\n            }\r\n        }\r\n    }\r\n\r\n    getNoiseBiome(x: number, y: number, z: number): Biomes {\r\n        const minY = QuartPos.fromBlock(this.getMinBuildHeight())\r\n        const maxY = minY + QuartPos.fromBlock(this.getHeight()) - 1\r\n        const clampedY = Mth.clamp(y, minY, maxY)\r\n        const sectionIndex = this.getSectionIndex(QuartPos.toBlock(clampedY))\r\n        return this.sections[sectionIndex].getNoiseBiome(x & 3, clampedY & 3, z & 3)\r\n    }\r\n\r\n    abstract getStatus(): ChunkStatus\r\n\r\n    fillBiomesFromNoise(resolver: BiomeResolver, sampler: Climate.Sampler): void {\r\n        const chunkpos = this.getPos()\r\n        const x = QuartPos.fromBlock(chunkpos.getMinBlockX())\r\n        const z = QuartPos.fromBlock(chunkpos.getMinBlockZ())\r\n        const heightAccessor = this.getHeightAccessorForGeneration()\r\n\r\n        for (let y = heightAccessor.getMinSection(); y < heightAccessor.getMaxSection(); ++y) {\r\n            const section = this.getSection(this.getSectionIndexFromSectionY(y))\r\n            section.fillBiomesFromNoise(resolver, sampler, x, z)\r\n        }\r\n    }\r\n\r\n    getSections() {\r\n        return this.sections\r\n    }\r\n\r\n    getSection(sectionIndex: number): LevelChunkSection {\r\n        return this.getSections()[sectionIndex]\r\n    }\r\n\r\n    getPos(): ChunkPos {\r\n        return this.chunkPos\r\n    }\r\n\r\n    getMinBuildHeight(): number {\r\n        return this.levelHeightAccessor.getMinBuildHeight()\r\n    }\r\n\r\n    getMaxBuildHeight(): number {\r\n        return this.levelHeightAccessor.getMaxBuildHeight()\r\n    }\r\n\r\n    getHeight(): number {\r\n        return this.levelHeightAccessor.getHeight()\r\n    }\r\n\r\n    public getHeightAccessorForGeneration(): LevelHeightAccessor {\r\n        return this\r\n    }\r\n\r\n    getOrCreateNoiseChunk(\r\n        sampler: NoiseSampler,\r\n        filler: Supplier<NoiseFiller>,\r\n        settings: NoiseGeneratorSettings,\r\n        fluidPicker: FluidPicker,\r\n        blender: Blender\r\n    ): NoiseChunk {\r\n        if (this.noiseChunk == null) {\r\n            this.noiseChunk = NoiseChunk.forChunk(\r\n                this,\r\n                sampler,\r\n                filler,\r\n                settings,\r\n                fluidPicker,\r\n                blender\r\n            )\r\n        }\r\n\r\n        return this.noiseChunk\r\n    }\r\n}\r\n\r\nexport class ProtoChunk extends ChunkAccess {\r\n    private status = EMPTY\r\n\r\n    getStatus(): ChunkStatus {\r\n        return this.status\r\n    }\r\n}\r\n","import { BiomeManager, MultiNoiseBiomeSource } from \"./biome-source\"\r\nimport {\r\n    Blender,\r\n    ChunkGenerator,\r\n    ChunkPos,\r\n    NoiseBasedChunkGenerator,\r\n    NoiseGeneratorSettings,\r\n    NoiseSampler,\r\n} from \"./chunk-generator\"\r\nimport { clamp, toLong } from \"./mth\"\r\nimport { IntStream } from \"./noise/perlin-noise\"\r\nimport { PerlinSimplexNoise } from \"./noise/perlin-simplex-noise\"\r\nimport { OverworldBiomeBuilder } from \"./overworld-biome-builder\"\r\nimport { hashCode, WorldgenRandom, XoroshiroRandomSource } from \"./random\"\r\nimport * as Climate from \"./climate\"\r\nimport { Pair } from \"./consumer\"\r\nimport { Biomes } from \"./biomes\"\r\nimport { BlockPos } from \"./pos\"\r\nimport { BIOME_TO_COLOR } from \"../../managers/map-loader\"\r\nimport { ServerLevel } from \"./level\"\r\nimport { LevelHeightAccessor, ProtoChunk } from \"./chunks\"\r\n\r\nfunction same(n1, n2, e) {\r\n    return Math.abs(n2 - n1) <= e\r\n}\r\n\r\nexport function test() {\r\n    const seed = toLong(hashCode(\"test\"))\r\n\r\n    // get list of biomes\r\n    const builder = new OverworldBiomeBuilder()\r\n    const biomes = [] as Pair<Climate.ParameterPoint, Biomes>[]\r\n    builder.addBiomes(biomes)\r\n\r\n    const biomeSource = new MultiNoiseBiomeSource(biomes)\r\n    const settings = NoiseGeneratorSettings.OVERWORLD\r\n    const chunkGenerator = new NoiseBasedChunkGenerator(biomeSource, seed, settings)\r\n\r\n    const heightAccessor = new LevelHeightAccessor()\r\n\r\n    const chunkPos = new ChunkPos(7, 24)\r\n    const chunk = new ProtoChunk(chunkPos, heightAccessor)\r\n\r\n    chunkGenerator.createBiomes(Blender.empty(), chunk)\r\n\r\n    debugger\r\n\r\n    /*\r\n    const noiseSettings = settings.noiseSettings\r\n    const sampler = new NoiseSampler(noiseSettings, 0xdeadbeafdeadbeafn, settings.randomSource)\r\n    */\r\n\r\n    const canvas = document.createElement(\"canvas\")\r\n    canvas.width = 128\r\n    canvas.height = 128\r\n\r\n    canvas.style.width = canvas.width * 1 + \"px\"\r\n    canvas.style.height = canvas.height * 1 + \"px\"\r\n\r\n    const ctx = canvas.getContext(\"2d\")!\r\n\r\n    const data = ctx.getImageData(0, 0, canvas.width, canvas.height)\r\n\r\n    console.time(\"generation\")\r\n\r\n    for (let x = 0; x < data.width; x++) {\r\n        for (let y = 0; y < data.height; y++) {\r\n            // const x = 520\r\n            // const y = 538\r\n            const p = biomeMananager.getBiome(new BlockPos(x * 20, 256, y * 20))\r\n            const c = BIOME_TO_COLOR[p] ?? 0\r\n            // debugger\r\n\r\n            /*\r\n            const t = clamp((p.continentalness / 10000 + 1) / 2, 0, 1)\r\n            const h = Math.round((1 - t) * 240)\r\n            // const v = Math.trunc(8388608 + p.temperature + p.depth + p.erosion + p.humidity) | 0\r\n\r\n            ctx.fillStyle = `hsl(${h}, 100%, 50%)`\r\n            const v = parseInt(ctx.fillStyle.slice(1), 16)\r\n            */\r\n\r\n            // const v = (8388608 + p.temperature + p.depth + p.erosion + p.humidity) | 0\r\n\r\n            data.data[(y * data.width + x) * 4 + 0] = (c >> 16) & 255\r\n            data.data[(y * data.width + x) * 4 + 1] = (c >> 8) & 255\r\n            data.data[(y * data.width + x) * 4 + 2] = c & 255\r\n            data.data[(y * data.width + x) * 4 + 3] = 255\r\n        }\r\n    }\r\n\r\n    console.timeEnd(\"generation\")\r\n\r\n    ctx.putImageData(data, 0, 0)\r\n\r\n    document.body.appendChild(canvas)\r\n}\r\n","import { ServicesClass } from \"./managers/services-class\"\r\nimport { Services, setServices } from \"./managers/services\"\r\nimport { test } from \"./surface-generation/biomes/test\"\r\n\r\nasync function main() {\r\n    const ammo = await Ammo()\r\n\r\n    setServices(new ServicesClass({ ammo }))\r\n\r\n    await Services.start()\r\n}\r\n\r\ntest()\r\n\r\n// main()\r\n"],"names":["equals","create","glMatrix.ARRAY_TYPE","clone","copy","identity","fromValues","set","transpose","invert","adjoint","determinant","multiply","rotate","scale","fromRotation","fromScaling","str","frob","add","subtract","exactEquals","glMatrix.EPSILON","multiplyScalar","multiplyScalarAndAdd","mul","sub","translate","fromTranslation","fromMat4","fromQuat","rotateX","rotateY","rotateZ","fromRotationTranslation","getTranslation","length","divide","ceil","floor","min","max","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","random","glMatrix.RANDOM","transformMat4","transformMat3","transformQuat","angle","zero","div","dist","sqrDist","len","sqrLen","forEach","conjugate","vec4.clone","vec4.fromValues","vec4.copy","vec4.set","vec4.add","vec4.scale","vec4.dot","vec4.lerp","vec4.length","vec4.squaredLength","vec4.normalize","vec4.exactEquals","vec4.equals","vec3.create","vec3.fromValues","vec3.dot","vec3.cross","vec3.len","vec3.normalize","mat3.create","quat.create","mat4.getRotation","mat4.getTranslation","quat.copy","quat.rotateX","quat.rotateY","quat.rotateZ","quat.dot","quat.length","quat.squaredLength","STRIDE","mat4.create","mat4.fromRotationTranslation","mat4.mul","mat4.clone","ATTRIBUTES","mat4.invert","vec3.clone","quat.clone","mat4.perspective","lookAt","mat4.lookAt","mat4.fromRotationTranslationScale","mat4.multiply","mat4.translate","vec4.create","vec4.transformMat4","vec3.distance","quat.slerp","quat.fromValues","vec3.transformQuat","vec3.add","quat.fromEuler","quat.mul","Climate.Parameter","Climate.parameters","mat4.scale","Climate.unquantizeCoord","vec3.transformMat4","vec3.min","vec3.max","vec3.lerp","vec3.sub","cryptModule","require$$0","require$$1","require$$2","md5Module","Mth.square","Mth.getSeed","Mth.floor","Mth.smoothstep","Mth.lerp3","Mth.lerp2","Mth.smoothstepDerivative","Mth.lfloor","register","Mth.binarySearch","Mth.lerp","Mth.floorDiv","Mth.clampedLerp","Mth.log2","Mth.smallestEncompassingPowerOfTwo","Mth.toInt","Mth.toLong","Mth.clampedMap","Mth.clamp","Mth.map","Mth.quantize","Mth.computeIfAbsent","Mth.unsignedShift64","Mth.intFloorDiv","Climate.target","global","define","sha256","Mth.floorMod"],"mappings":"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AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7C,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7C,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7C,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7C,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7C,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7C,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,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AI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AACzG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;AAC5G,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;AAC5G,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AACzG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;AAC5G,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AACzG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AACzG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;AAC5G,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAC1G,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;AAC7G,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;AAC7G,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,G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AAG,GAAG,CAAC;AACrD,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACrD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;AACtD,EAAE,GAA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C,CAAC,CAAC,CAAC;AACb,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACd,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACd;AACA,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACtB,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1B,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1B,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1B,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACtB,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1B,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1B,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1B,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACtB;AACA,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7C,EAAE,GAAG,CAA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AE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAC1B,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAC1B,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAC1B,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAC1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AC,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAIA,OAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IA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S,CAAC,EAAE,GAAG,IAAI,CAAC;AACxD,MAAM,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC;AACjE,MAAM,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC;AACjE,MAAM,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAChE,MAAM,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,EAAE,GAAG,IAAI,CAAC;AACxD,MAAM,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC;AACjE,MAAM,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC;AACjE,MAAM,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAChE,MAAM,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,EAAE,GAAG,IAAI,CAAC;AACxD,MAAM,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC;AACjE,MAAM,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC;AACjE,MAAM,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAChE,MAAM,SAAS,CAAC,CAAC,EAAE,IAAI,C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"}